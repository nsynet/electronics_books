                        .module chengxu.c
                        .area data(ram, con, rel)
 0000           _Table::
 0000                   .blkb 2
                        .area idata
 0000 3F06              .byte 63,6
                        .area data(ram, con, rel)
 0002                   .blkb 2
                        .area idata
 0002 5B4F              .byte 91,'O
                        .area data(ram, con, rel)
 0004                   .blkb 2
                        .area idata
 0004 666D              .byte 'f,'m
                        .area data(ram, con, rel)
 0006                   .blkb 2
                        .area idata
 0006 7D07              .byte 125,7
                        .area data(ram, con, rel)
 0008                   .blkb 2
                        .area idata
 0008 7F6F              .byte 127,'o
                        .area data(ram, con, rel)
 000A                   .dbfile E:\Proteus\AVR单片机应用系统开发经典实例\009、基于T_CO的时钟设计\icc\chengxu.c
 000A                   .dbsym e Table _Table A[10:10]c
 000A           _Data::
 000A                   .blkb 2
                        .area idata
 000A 0000              .byte 0,0
                        .area data(ram, con, rel)
 000C                   .dbfile E:\Proteus\AVR单片机应用系统开发经典实例\009、基于T_CO的时钟设计\icc\chengxu.c
 000C                   .blkb 2
                        .area idata
 000C 0000              .byte 0,0
                        .area data(ram, con, rel)
 000E                   .dbfile E:\Proteus\AVR单片机应用系统开发经典实例\009、基于T_CO的时钟设计\icc\chengxu.c
 000E                   .dbsym e Data _Data A[4:4]c
 000E           _CNT::
 000E                   .blkb 1
                        .area idata
 000E 00                .byte 0
                        .area data(ram, con, rel)
 000F                   .dbfile E:\Proteus\AVR单片机应用系统开发经典实例\009、基于T_CO的时钟设计\icc\chengxu.c
 000F                   .dbsym e CNT _CNT c
 000F           _Timer::
 000F                   .blkb 2
                        .area idata
 000F 0000              .byte 0,0
                        .area data(ram, con, rel)
 0011                   .dbfile E:\Proteus\AVR单片机应用系统开发经典实例\009、基于T_CO的时钟设计\icc\chengxu.c
 0011                   .dbsym e Timer _Timer A[2:2]c
                        .area text(rom, con, rel)
 0000                   .dbfile E:\Proteus\AVR单片机应用系统开发经典实例\009、基于T_CO的时钟设计\icc\chengxu.c
 0000                   .dbfunc e DelayMs _DelayMs fV
 0000           ;              j -> R20,R21
 0000           ;              i -> R16,R17
                        .even
 0000           _DelayMs::
 0000 0E940000          xcall push_gset1
 0004                   .dbline -1
 0004                   .dbline 19
 0004           ; #include <iom16v.h>
 0004           ; /********************************************************************
 0004           ;                 数据类型定义
 0004           ; *********************************************************************/
 0004           ; #define uchar unsigned char
 0004           ; #define uint  unsigned int
 0004           ; 
 0004           ; /********************************************************************
 0004           ;                 数码管段码定义0123456789
 0004           ; *********************************************************************/
 0004           ; uchar Table[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
 0004           ; uchar Data[4]={0,0,0,0};       //显示初始值：0 0 0 0
 0004           ; uchar CNT=0;                   //初始计数值：0
 0004           ; uchar Timer[2]={0x00,0x00};    //初始时间00：00 
 0004           ; /**********************************************************************
 0004           ;                                 MS级延时函数程序，参数i 延时时间                                              
 0004           ; **********************************************************************/
 0004           ; void DelayMs(uint i)           //Ms级延时，参数i为延时时间
 0004           ; {uint j;
 0004                   .dbline 20
 0004           ;  for(;i!=0;i--)
 0004 0AC0              xjmp L5
 0006           L2:
 0006                   .dbline 21
 0006                   .dbline 21
 0006 40E4              ldi R20,8000
 0008 5FE1              ldi R21,31
 000A 02C0              xjmp L9
 000C           L6:
 000C                   .dbline 21
 000C                   .dbline 21
 000C                   .dbline 21
 000C           L7:
 000C                   .dbline 21
 000C 4150              subi R20,1
 000E 5040              sbci R21,0
 0010           L9:
 0010                   .dbline 21
 0010 4030              cpi R20,0
 0012 4507              cpc R20,R21
 0014 D9F7              brne L6
 0016           X0:
 0016                   .dbline 21
 0016           L3:
 0016                   .dbline 20
 0016 0150              subi R16,1
 0018 1040              sbci R17,0
 001A           L5:
 001A                   .dbline 20
 001A 0030              cpi R16,0
 001C 0107              cpc R16,R17
 001E 99F7              brne L2
 0020           X1:
 0020                   .dbline -2
 0020           L1:
 0020 0E940000          xcall pop_gset1
 0024                   .dbline 0 ; func end
 0024 0895              ret
 0026                   .dbsym r j 20 i
 0026                   .dbsym r i 16 i
 0026                   .dbend
 0026                   .dbfunc e Display _Display fV
 0026           ;            sel -> R20
 0026           ;              i -> R22
 0026           ;              p -> R10,R11
                        .even
 0026           _Display::
 0026 0E940000          xcall push_gset3
 002A 5801              movw R10,R16
 002C                   .dbline -1
 002C                   .dbline 28
 002C           ;   {for(j=8000;j!=0;j--) {;}}
 002C           ; }
 002C           ; /**********************************************************************
 002C           ;                                           显示函数            
 002C           ; 注意：使用开发板时sel=0xef;
 002C           ; **********************************************************************/
 002C           ; void Display(uchar *p)         //动态显示函数，参数p为待显示的数组名
 002C           ; {uchar i,sel=0x01;           
 002C                   .dbline 28
 002C 41E0              ldi R20,1
 002E                   .dbline 29
 002E           ;  for(i=0;i<4;i++)
 002E 6627              clr R22
 0030 13C0              xjmp L14
 0032           L11:
 0032                   .dbline 30
 0032                   .dbline 30
 0032 45BB              out 0x15,R20
 0034                   .dbline 31
 0034 E62F              mov R30,R22
 0036 FF27              clr R31
 0038 EA0D              add R30,R10
 003A FB1D              adc R31,R11
 003C E081              ldd R30,z+0
 003E FF27              clr R31
 0040 80E0              ldi R24,<_Table
 0042 90E0              ldi R25,>_Table
 0044 E80F              add R30,R24
 0046 F91F              adc R31,R25
 0048 2080              ldd R2,z+0
 004A 2094              com R2
 004C 2BBA              out 0x1b,R2
 004E                   .dbline 32
 004E 01E0              ldi R16,1
 0050 10E0              ldi R17,0
 0052 D6DF              xcall _DelayMs
 0054                   .dbline 33
 0054 440F              lsl R20
 0056                   .dbline 34
 0056           L12:
 0056                   .dbline 29
 0056 6395              inc R22
 0058           L14:
 0058                   .dbline 29
 0058 6430              cpi R22,4
 005A 58F3              brlo L11
 005C                   .dbline -2
 005C           L10:
 005C 0E940000          xcall pop_gset3
 0060                   .dbline 0 ; func end
 0060 0895              ret
 0062                   .dbsym r sel 20 c
 0062                   .dbsym r i 22 c
 0062                   .dbsym r p 10 pc
 0062                   .dbend
 0062                   .dbfunc e Process _Process fV
 0062           ;             p2 -> R20,R21
 0062           ;             p1 -> R22,R23
                        .even
 0062           _Process::
 0062 0E940000          xcall push_gset2
 0066 A901              movw R20,R18
 0068 B801              movw R22,R16
 006A                   .dbline -1
 006A                   .dbline 40
 006A           ;   {PORTC=sel;                  //选通最右边的数码管
 006A           ;    PORTA=~Table[p[i]];          //送字型码
 006A           ;    DelayMs(1);                 //显示延时    
 006A           ;    sel=sel<<1;                 //移位以显示前一位
 006A           ;   }
 006A           ; }
 006A           ; 
 006A           ; //计数值处理函数。参数p1:时间数组名；参数p2:显示数组名//
 006A           ; //功能：此函数用于将计数值拆分为BCD码的10分，分，10秒，秒//
 006A           ; void Process(uchar *p1,uchar *p2) 
 006A           ; {
 006A                   .dbline 41
 006A           ; p2[0]=p1[0]/10;
 006A 1AE0              ldi R17,10
 006C FB01              movw R30,R22
 006E 0081              ldd R16,z+0
 0070 0E940000          xcall div8u
 0074 FA01              movw R30,R20
 0076 0083              std z+0,R16
 0078                   .dbline 42
 0078           ; p2[1]=p1[0]-p2[0]*10;
 0078 2080              ldd R2,z+0
 007A 8AE0              ldi R24,10
 007C 829D              mul R24,R2
 007E FB01              movw R30,R22
 0080 2080              ldd R2,z+0
 0082 2018              sub R2,R0
 0084 FA01              movw R30,R20
 0086 2182              std z+1,R2
 0088                   .dbline 43
 0088           ; p2[2]=p1[1]/10;
 0088 1AE0              ldi R17,10
 008A FB01              movw R30,R22
 008C 0181              ldd R16,z+1
 008E 0E940000          xcall div8u
 0092 FA01              movw R30,R20
 0094 0283              std z+2,R16
 0096                   .dbline 44
 0096           ; p2[3]=p1[1]-p2[2]*10;
 0096 FA01              movw R30,R20
 0098 2280              ldd R2,z+2
 009A 8AE0              ldi R24,10
 009C 829D              mul R24,R2
 009E FB01              movw R30,R22
 00A0 2180              ldd R2,z+1
 00A2 2018              sub R2,R0
 00A4 FA01              movw R30,R20
 00A6 2382              std z+3,R2
 00A8                   .dbline -2
 00A8           L15:
 00A8 0E940000          xcall pop_gset2
 00AC                   .dbline 0 ; func end
 00AC 0895              ret
 00AE                   .dbsym r p2 20 pc
 00AE                   .dbsym r p1 22 pc
 00AE                   .dbend
 00AE                   .dbfunc e Init_IO _Init_IO fV
                        .even
 00AE           _Init_IO::
 00AE                   .dbline -1
 00AE                   .dbline 50
 00AE           ; }
 00AE           ; /**********************************************************************
 00AE           ;                                          初始化I/O                            
 00AE           ; **********************************************************************/
 00AE           ; void Init_IO(void)             //初始化I/O口
 00AE           ; {DDRA=0xff;                    //设置A口为推挽1输出
 00AE                   .dbline 50
 00AE 8FEF              ldi R24,255
 00B0 8ABB              out 0x1a,R24
 00B2                   .dbline 51
 00B2           ;  PORTA=0xff;
 00B2 8BBB              out 0x1b,R24
 00B4                   .dbline 52
 00B4           ;  DDRC=0xff;                    //设置C口为推挽1输出；             
 00B4 84BB              out 0x14,R24
 00B6                   .dbline 53
 00B6           ;  PORTC=0xff;
 00B6 85BB              out 0x15,R24
 00B8                   .dbline -2
 00B8           L16:
 00B8                   .dbline 0 ; func end
 00B8 0895              ret
 00BA                   .dbend
 00BA                   .dbfunc e main _main fV
 00BA           ;           Load -> <dead>
                        .even
 00BA           _main::
 00BA                   .dbline -1
 00BA                   .dbline 59
 00BA           ; }
 00BA           ; /**********************************************************************
 00BA           ;                                         主函数                        
 00BA           ; **********************************************************************/
 00BA           ; void main(void)
 00BA           ; {uchar Load; 
 00BA                   .dbline 60
 00BA           ;  Init_IO();                    //初始化I/O口
 00BA F9DF              xcall _Init_IO
 00BC                   .dbline 61
 00BC           ;  TCCR0=0x04;                   //T/C0工作于定时方式，系统时钟256分频
 00BC 84E0              ldi R24,4
 00BE 83BF              out 0x33,R24
 00C0                   .dbline 62
 00C0           ;  TCNT0=0x06;   
 00C0 86E0              ldi R24,6
 00C2 82BF              out 0x32,R24
 00C4                   .dbline 63
 00C4           ;  SREG=0X80;
 00C4 80E8              ldi R24,128
 00C6 8FBF              out 0x3f,R24
 00C8                   .dbline 64
 00C8           ;  TIMSK=0X01;                //计数初始值6    
 00C8 81E0              ldi R24,1
 00CA 89BF              out 0x39,R24
 00CC 08C0              xjmp L19
 00CE           L18:
 00CE                   .dbline 66
 00CE                   .dbline 66
 00CE 20E0              ldi R18,<_Data
 00D0 30E0              ldi R19,>_Data
 00D2 00E0              ldi R16,<_Timer
 00D4 10E0              ldi R17,>_Timer
 00D6 C5DF              xcall _Process
 00D8                   .dbline 67
 00D8 00E0              ldi R16,<_Data
 00DA 10E0              ldi R17,>_Data
 00DC A4DF              xcall _Display
 00DE                   .dbline 68
 00DE           L19:
 00DE                   .dbline 65
 00DE F7CF              xjmp L18
 00E0           X2:
 00E0                   .dbline -2
 00E0           L17:
 00E0                   .dbline 0 ; func end
 00E0 0895              ret
 00E2                   .dbsym l Load 1 c
 00E2                   .dbend
                        .area vector(rom, abs)
                        .org 36
 0024 0C947100          jmp _Timer0
                        .area text(rom, con, rel)
 00E2                   .dbfile E:\Proteus\AVR单片机应用系统开发经典实例\009、基于T_CO的时钟设计\icc\chengxu.c
 00E2                   .dbfunc e Timer0 _Timer0 fV
                        .even
 00E2           _Timer0::
 00E2 2A92              st -y,R2
 00E4 8A93              st -y,R24
 00E6 9A93              st -y,R25
 00E8 2FB6              in R2,0x3f
 00EA 2A92              st -y,R2
 00EC                   .dbline -1
 00EC                   .dbline 74
 00EC           ;  while(1)
 00EC           ;  {Process(Timer,Data);          //计数值处理
 00EC           ;   Display(Data);               //动态扫描显示
 00EC           ;  }
 00EC           ; }
 00EC           ; 
 00EC           ; //********************T/C0中断服务函数********************//
 00EC           ; #pragma interrupt_handler Timer0:10 
 00EC           ; void Timer0(void)
 00EC           ; {CNT++;                        //中断次数累加
 00EC                   .dbline 74
 00EC 80910E00          lds R24,_CNT
 00F0 8F5F              subi R24,255    ; addi 1
 00F2 80930E00          sts _CNT,R24
 00F6                   .dbline 75
 00F6           ;  if(CNT==125)           
 00F6 8D37              cpi R24,125
 00F8 C1F4              brne L22
 00FA                   .dbline 76
 00FA           ;     {CNT=0;                    //计数到125次，计数值复位
 00FA                   .dbline 76
 00FA 2224              clr R2
 00FC 20920E00          sts _CNT,R2
 0100                   .dbline 77
 0100           ;        Timer[1]++;               //秒加1
 0100 80911000          lds R24,_Timer+1
 0104 8F5F              subi R24,255    ; addi 1
 0106 80931000          sts _Timer+1,R24
 010A                   .dbline 78
 010A           ;        if(Timer[1]==60)
 010A 8C33              cpi R24,60
 010C 39F4              brne L25
 010E                   .dbline 79
 010E           ;           {Timer[1]=0;
 010E                   .dbline 79
 010E 20921000          sts _Timer+1,R2
 0112                   .dbline 80
 0112           ;                Timer[0]++;}          //分进位
 0112 80910F00          lds R24,_Timer
 0116 8F5F              subi R24,255    ; addi 1
 0118 80930F00          sts _Timer,R24
 011C                   .dbline 80
 011C           L25:
 011C                   .dbline 81
 011C           ;      if(Timer[0]==60)
 011C 80910F00          lds R24,_Timer
 0120 8C33              cpi R24,60
 0122 19F4              brne L29
 0124                   .dbline 82
 0124 2224              clr R2
 0126 20920F00          sts _Timer,R2
 012A           L29:
 012A                   .dbline 82
 012A           L22:
 012A                   .dbline -2
 012A           L21:
 012A 2990              ld R2,y+
 012C 2FBE              out 0x3f,R2
 012E 9991              ld R25,y+
 0130 8991              ld R24,y+
 0132 2990              ld R2,y+
 0134                   .dbline 0 ; func end
 0134 1895              reti
 0136                   .dbend
