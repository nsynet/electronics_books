__text_start:
__start:
    0033 E5CF      LDI	R28,0x5F
    0034 E0D4      LDI	R29,4
    0035 BFCD      OUT	0x3D,R28
    0036 BFDE      OUT	0x3E,R29
    0037 51C0      SUBI	R28,0x10
    0038 40D0      SBCI	R29,0
    0039 EA0A      LDI	R16,0xAA
    003A 8308      STD	Y+0,R16
    003B 2400      CLR	R0
    003C E7E1      LDI	R30,0x71
    003D E0F0      LDI	R31,0
    003E E010      LDI	R17,0
    003F 37E1      CPI	R30,0x71
    0040 07F1      CPC	R31,R17
    0041 F011      BEQ	0x0044
    0042 9201      ST	R0,Z+
    0043 CFFB      RJMP	0x003F
    0044 8300      STD	Z+0,R16
    0045 E5E4      LDI	R30,0x54
    0046 E0F0      LDI	R31,0
    0047 E6A0      LDI	R26,0x60
    0048 E0B0      LDI	R27,0
    0049 E010      LDI	R17,0
    004A 36E5      CPI	R30,0x65
    004B 07F1      CPC	R31,R17
    004C F021      BEQ	0x0051
    004D 95C8      LPM
    004E 9631      ADIW	R30,1
    004F 920D      ST	R0,X+
    0050 CFF9      RJMP	0x004A
    0051 940E00B1  CALL	_main
_exit:
    0053 CFFF      RJMP	_exit
_DelayMs:
  j                    --> R20
  i                    --> R16
    0054 940E010D  CALL	push_gset1
FILE: D:\整理\个人总结的M8程序\009、基于T_CO的时钟设计\icc\chengxu.c
(0001) #include <iom8v.h>
(0002) /********************************************************************
(0003)                 数据类型定义
(0004) *********************************************************************/
(0005) #define uchar unsigned char
(0006) #define uint  unsigned int
(0007) #define WEI PORTC
(0008) #define DUAN PORTB
(0009) /********************************************************************
(0010)                 数码管段码定义0123456789
(0011) *********************************************************************/
(0012) uchar Table[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
(0013) uchar Data[4]={0,0,0,0};       //显示初始值：0 0 0 0
(0014) uchar CNT=0;                   //初始计数值：0
(0015) uchar Timer[2]={0x00,0x00};    //初始时间00：00 
(0016) /**********************************************************************
(0017) 				  MS级延时函数程序，参数i 延时时间					   	
(0018) **********************************************************************/
(0019) void DelayMs(uint i)           //Ms级延时，参数i为延时时间
(0020) {uint j;
(0021)  for(;i!=0;i--)
    0056 C00A      RJMP	0x0061
(0022)   {for(j=8000;j!=0;j--) {;}}
    0057 E440      LDI	R20,0x40
    0058 E15F      LDI	R21,0x1F
    0059 C002      RJMP	0x005C
    005A 5041      SUBI	R20,1
    005B 4050      SBCI	R21,0
    005C 3040      CPI	R20,0
    005D 0745      CPC	R20,R21
    005E F7D9      BNE	0x005A
    005F 5001      SUBI	R16,1
    0060 4010      SBCI	R17,0
    0061 3000      CPI	R16,0
    0062 0701      CPC	R16,R17
    0063 F799      BNE	0x0057
    0064 940E0110  CALL	pop_gset1
    0066 9508      RET
_Display:
  sel                  --> R20
  i                    --> R22
  p                    --> R10
    0067 940E0128  CALL	push_gset3
    0069 0158      MOVW	R10,R16
(0023) }
(0024) /**********************************************************************
(0025) 				            显示函数		
(0026) 注意：使用开发板时sel=0xef;
(0027) **********************************************************************/
(0028) void Display(uchar *p)         //动态显示函数，参数p为待显示的数组名
(0029) {uchar i,sel=0x01;           
    006A E041      LDI	R20,1
(0030)  for(i=0;i<4;i++)
    006B 2766      CLR	R22
    006C C013      RJMP	0x0080
(0031)   {WEI=sel;                  //选通最右边的数码管
    006D BB45      OUT	0x15,R20
(0032)    DUAN=~Table[p[i]];          //送字型码
    006E 2FE6      MOV	R30,R22
    006F 27FF      CLR	R31
    0070 0DEA      ADD	R30,R10
    0071 1DFB      ADC	R31,R11
    0072 81E0      LDD	R30,Z+0
    0073 27FF      CLR	R31
    0074 E680      LDI	R24,0x60
    0075 E090      LDI	R25,0
    0076 0FE8      ADD	R30,R24
    0077 1FF9      ADC	R31,R25
    0078 8020      LDD	R2,Z+0
    0079 9420      COM	R2
    007A BA28      OUT	0x18,R2
(0033)    DelayMs(1);                 //显示延时    
    007B E001      LDI	R16,1
    007C E010      LDI	R17,0
    007D DFD6      RCALL	_DelayMs
(0034)    sel=sel<<1;                 //移位以显示前一位
    007E 0F44      LSL	R20
    007F 9563      INC	R22
    0080 3064      CPI	R22,4
    0081 F358      BCS	0x006D
    0082 940E010A  CALL	pop_gset3
    0084 9508      RET
_Process:
  p2                   --> R20
  p1                   --> R22
    0085 940E0124  CALL	push_gset2
    0087 01A9      MOVW	R20,R18
    0088 01B8      MOVW	R22,R16
(0035)   }
(0036) }
(0037) 
(0038) //计数值处理函数。参数p1:时间数组名；参数p2:显示数组名//
(0039) //功能：此函数用于将计数值拆分为BCD码的10分，分，10秒，秒//
(0040) void Process(uchar *p1,uchar *p2) 
(0041) {
(0042) p2[0]=p1[0]/10;
    0089 E01A      LDI	R17,0xA
    008A 01FB      MOVW	R30,R22
    008B 8100      LDD	R16,Z+0
    008C 940E00F1  CALL	div8u
    008E 01FA      MOVW	R30,R20
    008F 8300      STD	Z+0,R16
(0043) p2[1]=p1[0]-p2[0]*10;
    0090 8020      LDD	R2,Z+0
    0091 E08A      LDI	R24,0xA
    0092 9D82      MUL	R24,R2
    0093 01FB      MOVW	R30,R22
    0094 8020      LDD	R2,Z+0
    0095 1820      SUB	R2,R0
    0096 01FA      MOVW	R30,R20
    0097 8221      STD	Z+1,R2
(0044) p2[2]=p1[1]/10;
    0098 E01A      LDI	R17,0xA
    0099 01FB      MOVW	R30,R22
    009A 8101      LDD	R16,Z+1
    009B 940E00F1  CALL	div8u
    009D 01FA      MOVW	R30,R20
    009E 8302      STD	Z+2,R16
(0045) p2[3]=p1[1]-p2[2]*10;
    009F 01FA      MOVW	R30,R20
    00A0 8022      LDD	R2,Z+2
    00A1 E08A      LDI	R24,0xA
    00A2 9D82      MUL	R24,R2
    00A3 01FB      MOVW	R30,R22
    00A4 8021      LDD	R2,Z+1
    00A5 1820      SUB	R2,R0
    00A6 01FA      MOVW	R30,R20
    00A7 8223      STD	Z+3,R2
    00A8 940E0107  CALL	pop_gset2
    00AA 9508      RET
(0046) }
(0047) /**********************************************************************
(0048) 				           初始化I/O			   	
(0049) **********************************************************************/
(0050) void Init_IO(void)             //初始化I/O口
(0051) {DDRB=0xff;                    //设置A口为推挽1输出
_Init_IO:
    00AB EF8F      LDI	R24,0xFF
    00AC BB87      OUT	0x17,R24
(0052)  DUAN=0xff;
    00AD BB88      OUT	0x18,R24
(0053)  DDRC=0xff;                    //设置C口为推挽1输出；             
    00AE BB84      OUT	0x14,R24
(0054)  WEI=0xff;
    00AF BB85      OUT	0x15,R24
    00B0 9508      RET
(0055) }
(0056) /**********************************************************************
(0057) 				          主函数		   	
(0058) **********************************************************************/
(0059) void main(void)
(0060) {uchar Load; 
(0061)  Init_IO();                    //初始化I/O口
_main:
  Load                 --> Y+1
    00B1 DFF9      RCALL	_Init_IO
(0062)  TCCR0=0x04;                   //T/C0工作于定时方式，系统时钟256分频
    00B2 E084      LDI	R24,4
    00B3 BF83      OUT	0x33,R24
(0063)  TCNT0=0x06;   
    00B4 E086      LDI	R24,6
    00B5 BF82      OUT	0x32,R24
(0064)  SREG=0X80;
    00B6 E880      LDI	R24,0x80
    00B7 BF8F      OUT	0x3F,R24
(0065)  TIMSK=0X01;                //计数初始值6    
    00B8 E081      LDI	R24,1
    00B9 BF89      OUT	0x39,R24
    00BA C008      RJMP	0x00C3
(0066)  while(1)
(0067)  {Process(Timer,Data);          //计数值处理
    00BB E62A      LDI	R18,0x6A
    00BC E030      LDI	R19,0
    00BD E60F      LDI	R16,0x6F
    00BE E010      LDI	R17,0
    00BF DFC5      RCALL	_Process
(0068)   Display(Data);               //动态扫描显示
    00C0 E60A      LDI	R16,0x6A
    00C1 E010      LDI	R17,0
    00C2 DFA4      RCALL	_Display
    00C3 CFF7      RJMP	0x00BB
    00C4 9508      RET
_Timer0:
    00C5 922A      ST	R2,-Y
    00C6 938A      ST	R24,-Y
    00C7 939A      ST	R25,-Y
    00C8 B62F      IN	R2,0x3F
    00C9 922A      ST	R2,-Y
(0069)  }
(0070) }
(0071) 
(0072) //********************T/C0中断服务函数********************//
(0073) #pragma interrupt_handler Timer0:10 
(0074) void Timer0(void)
(0075) {CNT++;                        //中断次数累加
    00CA 9180006E  LDS	R24,0x6E
    00CC 5F8F      SUBI	R24,0xFF
    00CD 9380006E  STS	0x6E,R24
(0076)  if(CNT==125)           
    00CF 378D      CPI	R24,0x7D
    00D0 F4C1      BNE	0x00E9
(0077)     {CNT=0;                    //计数到125次，计数值复位
    00D1 2422      CLR	R2
    00D2 9220006E  STS	0x6E,R2
(0078) 	 Timer[1]++;               //秒加1
    00D4 91800070  LDS	R24,0x70
    00D6 5F8F      SUBI	R24,0xFF
    00D7 93800070  STS	0x70,R24
(0079) 	 if(Timer[1]==60)
    00D9 338C      CPI	R24,0x3C
    00DA F439      BNE	0x00E2
(0080) 	    {Timer[1]=0;
    00DB 92200070  STS	0x70,R2
(0081) 		 Timer[0]++;}          //分进位
    00DD 9180006F  LDS	R24,0x6F
    00DF 5F8F      SUBI	R24,0xFF
    00E0 9380006F  STS	0x6F,R24
(0082)      if(Timer[0]==60)
    00E2 9180006F  LDS	R24,0x6F
    00E4 338C      CPI	R24,0x3C
    00E5 F419      BNE	0x00E9
(0083) 	     Timer[0]=0;}          //计数到达最高位，计数复位
FILE: <library>
    00E6 2422      CLR	R2
    00E7 9220006F  STS	0x6F,R2
    00E9 9029      LD	R2,Y+
    00EA BE2F      OUT	0x3F,R2
    00EB 9199      LD	R25,Y+
    00EC 9189      LD	R24,Y+
    00ED 9029      LD	R2,Y+
    00EE 9518      RETI
mod8u:
    00EF 9468      BSET	6
    00F0 C001      RJMP	xdiv8u
div8u:
    00F1 94E8      BCLR	6
xdiv8u:
    00F2 932A      ST	R18,-Y
    00F3 92FA      ST	R15,-Y
    00F4 92EA      ST	R14,-Y
    00F5 24FF      CLR	R15
    00F6 24EE      CLR	R14
    00F7 E120      LDI	R18,0x10
    00F8 0F00      LSL	R16
    00F9 1CFF      ROL	R15
    00FA 1CEE      ROL	R14
    00FB 16E1      CP	R14,R17
    00FC F010      BCS	0x00FF
    00FD 1AE1      SUB	R14,R17
    00FE 9503      INC	R16
    00FF 952A      DEC	R18
    0100 F7B9      BNE	0x00F8
    0101 F40E      BRTC	0x0103
    0102 2D0E      MOV	R16,R14
    0103 90E9      LD	R14,Y+
    0104 90F9      LD	R15,Y+
    0105 9129      LD	R18,Y+
    0106 9508      RET
pop_gset2:
    0107 E0E2      LDI	R30,2
    0108 940C0111  JMP	pop
pop_gset3:
    010A E0E4      LDI	R30,4
    010B 940C0111  JMP	pop
push_gset1:
    010D 935A      ST	R21,-Y
    010E 934A      ST	R20,-Y
    010F 9508      RET
pop_gset1:
    0110 E0E1      LDI	R30,1
pop:
    0111 9149      LD	R20,Y+
    0112 9159      LD	R21,Y+
    0113 FDE0      SBRC	R30,0
    0114 9508      RET
    0115 9169      LD	R22,Y+
    0116 9179      LD	R23,Y+
    0117 FDE1      SBRC	R30,1
    0118 9508      RET
    0119 90A9      LD	R10,Y+
    011A 90B9      LD	R11,Y+
    011B FDE2      SBRC	R30,2
    011C 9508      RET
    011D 90C9      LD	R12,Y+
    011E 90D9      LD	R13,Y+
    011F FDE3      SBRC	R30,3
    0120 9508      RET
    0121 90E9      LD	R14,Y+
    0122 90F9      LD	R15,Y+
    0123 9508      RET
push_gset2:
    0124 937A      ST	R23,-Y
    0125 936A      ST	R22,-Y
    0126 940C010D  JMP	push_gset1
push_gset3:
    0128 92BA      ST	R11,-Y
    0129 92AA      ST	R10,-Y
    012A 940C0124  JMP	push_gset2
