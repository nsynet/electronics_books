__start:
__text_start:
    0031 E5CF      LDI	R28,0x5F
    0032 E0D4      LDI	R29,4
    0033 BFCD      OUT	0x3D,R28
    0034 BFDE      OUT	0x3E,R29
    0035 51C0      SUBI	R28,0x10
    0036 40D0      SBCI	R29,0
    0037 EA0A      LDI	R16,0xAA
    0038 8308      STD	Y+0,R16
    0039 2400      CLR	R0
    003A E6EE      LDI	R30,0x6E
    003B E0F0      LDI	R31,0
    003C E010      LDI	R17,0
    003D 37E1      CPI	R30,0x71
    003E 07F1      CPC	R31,R17
    003F F011      BEQ	0x0042
    0040 9201      ST	R0,Z+
    0041 CFFB      RJMP	0x003D
    0042 8300      STD	Z+0,R16
    0043 E5E4      LDI	R30,0x54
    0044 E0F0      LDI	R31,0
    0045 E6A0      LDI	R26,0x60
    0046 E0B0      LDI	R27,0
    0047 E010      LDI	R17,0
    0048 36E2      CPI	R30,0x62
    0049 07F1      CPC	R31,R17
    004A F021      BEQ	0x004F
    004B 95C8      LPM
    004C 9631      ADIW	R30,1
    004D 920D      ST	R0,X+
    004E CFF9      RJMP	0x0048
    004F 940E011F  CALL	_main
_exit:
    0051 CFFF      RJMP	_exit
_DelayMs:
  j                    --> R20
  i                    --> R16
    0052 940E0164  CALL	push_gset1
FILE: E:\Proteus\AVR单片机应用系统开发经典实例\011、基于TC1的波形发生器设计---------------未成功\icc\chengxu.c
(0001) #include <iom16v.h>
(0002) /********************************************************************
(0003)                 数据类型定义
(0004) *********************************************************************/
(0005) #define uchar unsigned char
(0006) #define uint  unsigned int
(0007) /********************************************************************
(0008)                 数码管段码定义0123456789
(0009) *********************************************************************/
(0010) uchar Table[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
(0011) uchar Data[4]={0,0,0,1};       //定义初始方波频率：1KHz
(0012) uchar Key1_Flag,Key2_Flag,Key3_Flag;
(0013) /**********************************************************************
(0014) 				  MS级延时函数程序，参数i 延时时间					   	
(0015) **********************************************************************/ 
(0016) void DelayMs(uint i)           //Ms级延时，参数i为延时时间
(0017) {uint j;
(0018)  for(;i!=0;i--)
    0054 C00A      RJMP	0x005F
(0019)   {for(j=8000;j!=0;j--) {;}}
    0055 E440      LDI	R20,0x40
    0056 E15F      LDI	R21,0x1F
    0057 C002      RJMP	0x005A
    0058 5041      SUBI	R20,1
    0059 4050      SBCI	R21,0
    005A 3040      CPI	R20,0
    005B 0745      CPC	R20,R21
    005C F7D9      BNE	0x0058
    005D 5001      SUBI	R16,1
    005E 4010      SBCI	R17,0
    005F 3000      CPI	R16,0
    0060 0701      CPC	R16,R17
    0061 F799      BNE	0x0055
    0062 940E0167  CALL	pop_gset1
    0064 9508      RET
_Display:
  sel                  --> R20
  i                    --> R22
  p                    --> R10
    0065 940E017F  CALL	push_gset3
    0067 0158      MOVW	R10,R16
(0020) }
(0021) /**********************************************************************
(0022) 				            显示函数		
(0023) 注意：使用开发板时sel=0xef;
(0024) **********************************************************************/
(0025) void Display(uchar *p)         //动态显示函数，参数p为待显示的数组名
(0026) {uchar i,sel=0x01;           
    0068 E041      LDI	R20,1
(0027)  for(i=0;i<4;i++)
    0069 2766      CLR	R22
    006A C013      RJMP	0x007E
(0028)   {PORTC=sel;                  //选通最右边的数码管
    006B BB45      OUT	0x15,R20
(0029)    PORTA=~Table[p[i]];          //送字型码
    006C 2FE6      MOV	R30,R22
    006D 27FF      CLR	R31
    006E 0DEA      ADD	R30,R10
    006F 1DFB      ADC	R31,R11
    0070 81E0      LDD	R30,Z+0
    0071 27FF      CLR	R31
    0072 E680      LDI	R24,0x60
    0073 E090      LDI	R25,0
    0074 0FE8      ADD	R30,R24
    0075 1FF9      ADC	R31,R25
    0076 8020      LDD	R2,Z+0
    0077 9420      COM	R2
    0078 BA2B      OUT	0x1B,R2
(0030)    DelayMs(1);                 //显示延时    
    0079 E001      LDI	R16,1
    007A E010      LDI	R17,0
    007B DFD6      RCALL	_DelayMs
(0031)    sel=sel<<1;                 //移位以显示前一位
    007C 0F44      LSL	R20
    007D 9563      INC	R22
    007E 3064      CPI	R22,4
    007F F358      BCS	0x006B
    0080 940E0161  CALL	pop_gset3
    0082 9508      RET
_Key_Process:
  k                    --> Y+1
  j                    --> Y+1
  i                    --> Y+1
  p                    --> R20
    0083 940E0164  CALL	push_gset1
    0085 01A8      MOVW	R20,R16
(0032)   }
(0033) }
(0034) /**********************************************************************
(0035) 				           频率处理函数		
(0036) **********************************************************************/
(0037) void Key_Process(uchar *p)
(0038) {uchar i,j,k;
    0086 C006      RJMP	0x008D
(0039)  while((PINB&0x01)==0) {Display(Data);Key1_Flag=1;}        
    0087 E60A      LDI	R16,0x6A
    0088 E010      LDI	R17,0
    0089 DFDB      RCALL	_Display
    008A E081      LDI	R24,1
    008B 93800070  STS	_Key1_Flag,R24
    008D 9BB0      SBIS	0x16,0
    008E CFF8      RJMP	0x0087
    008F C006      RJMP	0x0096
(0040)  while((PINB&0x02)==0) {Display(Data);Key2_Flag=1;}
    0090 E60A      LDI	R16,0x6A
    0091 E010      LDI	R17,0
    0092 DFD2      RCALL	_Display
    0093 E081      LDI	R24,1
    0094 9380006F  STS	_Key2_Flag,R24
    0096 9BB1      SBIS	0x16,1
    0097 CFF8      RJMP	0x0090
    0098 C006      RJMP	0x009F
(0041)  while((PINB&0x04)==0) {Display(Data);Key3_Flag=1;}
    0099 E60A      LDI	R16,0x6A
    009A E010      LDI	R17,0
    009B DFC9      RCALL	_Display
    009C E081      LDI	R24,1
    009D 9380006E  STS	_Key3_Flag,R24
    009F 9BB2      SBIS	0x16,2
    00A0 CFF8      RJMP	0x0099
(0042)  if(Key1_Flag==1)	   		      //处理频率个位，最高9		   
    00A1 91800070  LDS	R24,_Key1_Flag
    00A3 3081      CPI	R24,1
    00A4 F481      BNE	0x00B5
(0043)    {p[3]++;
    00A5 01CA      MOVW	R24,R20
    00A6 9603      ADIW	R24,3
    00A7 01FC      MOVW	R30,R24
    00A8 8180      LDD	R24,Z+0
    00A9 5F8F      SUBI	R24,0xFF
    00AA 8380      STD	Z+0,R24
(0044) 	if(p[3]==10) p[3]=0;
    00AB 01FA      MOVW	R30,R20
    00AC 8183      LDD	R24,Z+3
    00AD 308A      CPI	R24,0xA
    00AE F419      BNE	0x00B2
    00AF 2422      CLR	R2
    00B0 01FA      MOVW	R30,R20
    00B1 8223      STD	Z+3,R2
(0045) 	Key1_Flag=0;}   
    00B2 2422      CLR	R2
    00B3 92200070  STS	_Key1_Flag,R2
(0046)  if(Key2_Flag==1)                 //处理频率十位，最高9
    00B5 9180006F  LDS	R24,_Key2_Flag
    00B7 3081      CPI	R24,1
    00B8 F481      BNE	0x00C9
(0047)     {p[2]++;
    00B9 01CA      MOVW	R24,R20
    00BA 9602      ADIW	R24,2
    00BB 01FC      MOVW	R30,R24
    00BC 8180      LDD	R24,Z+0
    00BD 5F8F      SUBI	R24,0xFF
    00BE 8380      STD	Z+0,R24
(0048) 	 if(p[2]==10) p[2]=0;
    00BF 01FA      MOVW	R30,R20
    00C0 8182      LDD	R24,Z+2
    00C1 308A      CPI	R24,0xA
    00C2 F419      BNE	0x00C6
    00C3 2422      CLR	R2
    00C4 01FA      MOVW	R30,R20
    00C5 8222      STD	Z+2,R2
(0049) 	 Key2_Flag=0;}
    00C6 2422      CLR	R2
    00C7 9220006F  STS	_Key2_Flag,R2
(0050)  if(Key3_Flag==1)                 //处理频率百位，最高9
    00C9 9180006E  LDS	R24,_Key3_Flag
    00CB 3081      CPI	R24,1
    00CC F481      BNE	0x00DD
(0051)     {p[1]++;
    00CD 01CA      MOVW	R24,R20
    00CE 9601      ADIW	R24,1
    00CF 01FC      MOVW	R30,R24
    00D0 8180      LDD	R24,Z+0
    00D1 5F8F      SUBI	R24,0xFF
    00D2 8380      STD	Z+0,R24
(0052) 	 if(p[1]==10) p[1]=0;
    00D3 01FA      MOVW	R30,R20
    00D4 8181      LDD	R24,Z+1
    00D5 308A      CPI	R24,0xA
    00D6 F419      BNE	0x00DA
    00D7 2422      CLR	R2
    00D8 01FA      MOVW	R30,R20
    00D9 8221      STD	Z+1,R2
(0053) 	 Key3_Flag=0;}
    00DA 2422      CLR	R2
    00DB 9220006E  STS	_Key3_Flag,R2
    00DD 940E0167  CALL	pop_gset1
    00DF 9508      RET
_Set_Process:
  i                    --> R20
  j                    --> R20
    00E0 940E0164  CALL	push_gset1
(0054) }
(0055) 
(0056) void Set_Process(void)
(0057) {uint i,j;
(0058)  i=Data[0]*1000+Data[1]*100+Data[2]*10+Data[3];
    00E2 9020006B  LDS	R2,0x6B
    00E4 E684      LDI	R24,0x64
    00E5 9D82      MUL	R24,R2
    00E6 0110      MOVW	R2,R0
    00E7 9120006A  LDS	R18,0x6A
    00E9 2733      CLR	R19
    00EA EE08      LDI	R16,0xE8
    00EB E013      LDI	R17,3
    00EC 940E0151  CALL	empy16s
    00EE 01A8      MOVW	R20,R16
    00EF 0D42      ADD	R20,R2
    00F0 1D53      ADC	R21,R3
    00F1 9020006C  LDS	R2,0x6C
    00F3 E08A      LDI	R24,0xA
    00F4 9D82      MUL	R24,R2
    00F5 0D40      ADD	R20,R0
    00F6 1D51      ADC	R21,R1
    00F7 9020006D  LDS	R2,0x6D
    00F9 2433      CLR	R3
    00FA 0D42      ADD	R20,R2
    00FB 1D53      ADC	R21,R3
(0059)  j=500/i;
    00FC EF04      LDI	R16,0xF4
    00FD E011      LDI	R17,1
    00FE 019A      MOVW	R18,R20
    00FF 940E0137  CALL	div16u
    0101 01A8      MOVW	R20,R16
(0060)  OCR1AH=j>>8;
    0102 011A      MOVW	R2,R20
    0103 2C23      MOV	R2,R3
    0104 2433      CLR	R3
    0105 BC2B      OUT	0x2B,R2
(0061)  OCR1AL=j&0x00ff;
    0106 01CA      MOVW	R24,R20
    0107 7090      ANDI	R25,0
    0108 BD8A      OUT	0x2A,R24
    0109 940E0167  CALL	pop_gset1
    010B 9508      RET
(0062) }
(0063) /**********************************************************************
(0064)                       初始化I/O口
(0065) **********************************************************************/
(0066) void Init_IO(void)             //初始化I/O口
(0067) {DDRA=0xff;                    //设置A口为推挽1输出
_Init_IO:
    010C EF8F      LDI	R24,0xFF
    010D BB8A      OUT	0x1A,R24
(0068)  PORTA=0xff;
    010E BB8B      OUT	0x1B,R24
(0069)  DDRC=0xff;                    //设置C口为推挽1输出             
    010F BB84      OUT	0x14,R24
(0070)  PORTC=0xff;
    0110 BB85      OUT	0x15,R24
(0071)  DDRB=0x00;                    //设置B口为三态输入
    0111 2422      CLR	R2
    0112 BA27      OUT	0x17,R2
(0072)  PORTB=0x00;
    0113 BA28      OUT	0x18,R2
(0073)  DDRD=0xff;                    //设置D口为推挽1输出
    0114 BB81      OUT	0x11,R24
(0074)  PORTD=0xff;    
    0115 BB82      OUT	0x12,R24
    0116 9508      RET
(0075) }
(0076) /**********************************************************************
(0077)                          初始化T/C1的输入捕获中断
(0078) **********************************************************************/
(0079) void Init_Timer1(void)         //初始化T/C1的输入捕获中断
(0080) {TIMSK=TIMSK|0x10;             //输出比较使能
_Init_Timer1:
    0117 B789      IN	R24,0x39
    0118 6180      ORI	R24,0x10
    0119 BF89      OUT	0x39,R24
(0081)  TCCR1B=0x0a;                  //定时方式8分频                                                             频,输出比较匹配清除定时器值
    011A E08A      LDI	R24,0xA
    011B BD8E      OUT	0x2E,R24
(0082)  //TCNT1H=0x00;                  //清除定时器值
(0083)  //TCNT1L=0x00;
(0084)  Set_Process();                //OCR1A,OCR1B置初值
    011C DFC3      RCALL	_Set_Process
(0085)  SREG=SREG|0x80;               //全局中断开
    011D 9478      BSET	7
    011E 9508      RET
(0086) } 
(0087) /**********************************************************************
(0088) 				          主函数		   	
(0089) **********************************************************************/
(0090) void main(void)
(0091) {Init_IO();                    //初始化I/O口
_main:
    011F DFEC      RCALL	_Init_IO
(0092)  Init_Timer1();                //初始化T/C1的输入捕获中断
    0120 DFF6      RCALL	_Init_Timer1
    0121 C007      RJMP	0x0129
(0093)  while(1)
(0094)  {Key_Process(Data);
    0122 E60A      LDI	R16,0x6A
    0123 E010      LDI	R17,0
    0124 DF5E      RCALL	_Key_Process
(0095)   Set_Process();
    0125 DFBA      RCALL	_Set_Process
(0096)   Display(Data);               //动态扫描显示
    0126 E60A      LDI	R16,0x6A
    0127 E010      LDI	R17,0
    0128 DF3C      RCALL	_Display
    0129 CFF8      RJMP	0x0122
    012A 9508      RET
_Compare:
    012B 922A      ST	R2,-Y
    012C B62F      IN	R2,0x3F
    012D 922A      ST	R2,-Y
(0097)  }
(0098) }
(0099) //********************T/C1中断服务函数********************//
(0100) #pragma interrupt_handler Compare:7
(0101) void Compare(void)
(0102) {PORTD=~PORTD;}
FILE: <library>
    012E B222      IN	R2,0x12
    012F 9420      COM	R2
    0130 BA22      OUT	0x12,R2
    0131 9029      LD	R2,Y+
    0132 BE2F      OUT	0x3F,R2
    0133 9029      LD	R2,Y+
    0134 9518      RETI
mod16u:
    0135 9468      BSET	6
    0136 C001      RJMP	xdiv16u
div16u:
    0137 94E8      BCLR	6
xdiv16u:
    0138 92EA      ST	R14,-Y
    0139 92FA      ST	R15,-Y
    013A 938A      ST	R24,-Y
    013B 24EE      CLR	R14
    013C 24FF      CLR	R15
    013D E180      LDI	R24,0x10
    013E 0F00      LSL	R16
    013F 1F11      ROL	R17
    0140 1CEE      ROL	R14
    0141 1CFF      ROL	R15
    0142 16E2      CP	R14,R18
    0143 06F3      CPC	R15,R19
    0144 F018      BCS	0x0148
    0145 1AE2      SUB	R14,R18
    0146 0AF3      SBC	R15,R19
    0147 9503      INC	R16
    0148 958A      DEC	R24
    0149 F7A1      BNE	0x013E
    014A F416      BRTC	0x014D
    014B 2D0E      MOV	R16,R14
    014C 2D1F      MOV	R17,R15
    014D 9189      LD	R24,Y+
    014E 90F9      LD	R15,Y+
    014F 90E9      LD	R14,Y+
    0150 9508      RET
empy16s:
    0151 920A      ST	R0,-Y
    0152 921A      ST	R1,-Y
    0153 938A      ST	R24,-Y
    0154 939A      ST	R25,-Y
    0155 9F02      MUL	R16,R18
    0156 01C0      MOVW	R24,R0
    0157 9F12      MUL	R17,R18
    0158 0D90      ADD	R25,R0
    0159 9F03      MUL	R16,R19
    015A 0D90      ADD	R25,R0
    015B 018C      MOVW	R16,R24
    015C 9199      LD	R25,Y+
    015D 9189      LD	R24,Y+
    015E 9019      LD	R1,Y+
    015F 9009      LD	R0,Y+
    0160 9508      RET
pop_gset3:
    0161 E0E4      LDI	R30,4
    0162 940C0168  JMP	pop
push_gset1:
    0164 935A      ST	R21,-Y
    0165 934A      ST	R20,-Y
    0166 9508      RET
pop_gset1:
    0167 E0E1      LDI	R30,1
pop:
    0168 9149      LD	R20,Y+
    0169 9159      LD	R21,Y+
    016A FDE0      SBRC	R30,0
    016B 9508      RET
    016C 9169      LD	R22,Y+
    016D 9179      LD	R23,Y+
    016E FDE1      SBRC	R30,1
    016F 9508      RET
    0170 90A9      LD	R10,Y+
    0171 90B9      LD	R11,Y+
    0172 FDE2      SBRC	R30,2
    0173 9508      RET
    0174 90C9      LD	R12,Y+
    0175 90D9      LD	R13,Y+
    0176 FDE3      SBRC	R30,3
    0177 9508      RET
    0178 90E9      LD	R14,Y+
    0179 90F9      LD	R15,Y+
    017A 9508      RET
push_gset2:
    017B 937A      ST	R23,-Y
    017C 936A      ST	R22,-Y
    017D 940C0164  JMP	push_gset1
push_gset3:
    017F 92BA      ST	R11,-Y
    0180 92AA      ST	R10,-Y
    0181 940C017B  JMP	push_gset2
