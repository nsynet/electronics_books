Sunplus u'nSP Assembler - Ver. 1.10.0
              Listing File Has Been Relocated
                            	//======================================================
                            	//  The information contained herein is the exclusive property of
                            	//  Sunnnorth Technology Co. And shall not be distributed, reproduced,
                            	//  or disclosed in whole in part without prior written permission.
                            	//           (C) COPYRIGHT 2003  SUNNORTH TECHNOLOGY CO.
                            	//                     ALL RIGHTS RESERVED
                            	//  The entire notice above must be reproduced on all authorized copies.
                            	//=======================================================
                            	
                            	//============================================================
                            	//  工程名称： led10_asm.scs
                            	//  功能描述:  用汇编实现A/D采样数据在发光二极管上点亮
                            	//  文件来源：《61板实验教程》"实验十 A/D采样数据在发光二极管上点亮“
                            	//  硬件连接： 61板SPY0029接口选择3.3V，IOB高8位接至SEG接口控制LED的导通
                            	//             IOB6连至DIG7通过ULN2003A控制8个LED的共阴极电平状态
                            	//  IDE环境：  SUNPLUS u'nSPTM  IDE 1.8.0
                            	//
                            	//  涉及的库：
                            	//  组成文件:
                            	//  main.asm
                            	//
                            	//  日期:  2004/8/16
                            	//===============================================
                            	
                            	//*****************************************************************************/
                            	// 文件名称： main.asm
                            	// 实现功能： 用汇编实现A/D采样数据在发光二极管上点亮
                            	//            通过改变LINE_IN端口的模拟电压来改变IOB口输出的数据，
                            	//            采用自动方式执行ADC转换，可以通过发光
                            	//            二极管的点亮了解转换的数据值。
                            	// 日期： 2004/8/16
                            	//*****************************************************************************/
                            	
                            			.define		P_IOB_DATA  	   	0x7005 
                            			.define		P_IOB_DIR   	    0x7007 
                            			.define		P_IOB_ATTRI			0x7008 
                            			.define		P_INT_Ctrl			0x7010 
                            			.define		P_INT_CLEAR			0x7011 
                            			.define		P_ADC_Ctrl		    0x7015 
                            			.define		P_ADC_MUX_Ctrl		0x702b 
                            			.define		P_ADC_MUX_DATA		0x702C
                            			.define		P_DAC_Ctrl		    0x702A 
                            	        .define		P_Watchdog_Clear    0x7012
                            	        
00000000                    	        .ram 
00000000 00 00              	        .var   R_DelayCounter = 0
                            	            
00008026                    			.code
                            			.public _main
                            	//============================================================= 
                            	// 函数名称:  _main
                            	// 功能描述: 通过改变LINE_IN端口的模拟电压来改变IOB口输出的数据，
                            	//           采用自动方式即定时器A溢出执行ADC转换，可以通过IOB高8位控制发光
                            	//           二极管的点亮了解转换的数据值。
                            	// 语法格式:  _main
                            	//入口参数:     无
                            	// 出口参数:    无
                            	// 注意事项:    仅为用户模型
                            	//=================================================================
                            	_main:         
00008026 09 93 40 FF        			r1 = 0xff40 
00008028 19 D3 08 70        			[P_IOB_ATTRI] = r1             //IOB8-IOB15,IOB6口设置为同向输出口
0000802A 19 D3 07 70        			[P_IOB_DIR] = r1 
0000802C 09 93 40 00        			r1 = 0x0040
0000802E 19 D3 05 70        			[P_IOB_DATA] = r1
00008030 41 92              			r1 = 0x0001                   //选择通道LINE_IN为IOA0
00008031 19 D3 2B 70        			[P_ADC_MUX_Ctrl] = r1		 	
00008033 41 92              			r1 = 0x0001	                  //允许A/D转换
00008034 19 D3 15 70        			[P_ADC_Ctrl] = r1 		 
                            	 Loop_AD:    
00008036 11 93 2B 70        			r1 = [P_ADC_MUX_Ctrl]         //读寄存器[P_ADC_MUX_Ctrl]的B15  
00008038 09 C3 00 80        			test r1,0x8000				  //判断是否转换完毕
0000803A 45 5E              			jz Loop_AD                 	  //否，继续转换
0000803B 11 93 2C 70        			r1 = [P_ADC_MUX_DATA]    	  //是，则读出[P_ADC_MUX_DATA]转换结果
                            	                                      //同时触发A/D重新转换
0000803D 49 93              			r1 = r1 lsl 2				  //保留A/D值的最低8位
0000803E 09 A3 40 00        			r1 |= 0x0040				  //保证IOB6为高,LED阴极共地
00008040 19 D3 05 70        			[P_IOB_DATA] = r1
00008042 40 92              			r1 = 0x0000                   //延时初值设定
00008043 19 D3 00 00        	        [R_DelayCounter] = r1
                            	L_DelayLoop:	                      //延时并清看门狗
00008045 41 92              			r1 = 0x0001                   //清看门狗
00008046 19 D3 12 70        			[P_Watchdog_Clear] = r1
00008048 11 93 00 00        			r1 = [R_DelayCounter]	  
0000804A 41 02              			r1 += 1		 				  //延时计数加1
0000804B 19 D3 00 00        			[R_DelayCounter] = r1
0000804D 09 43 00 01        			cmp r1,0x100                  //延时时间到了吗？
0000804F 4B 4E              			jne  L_DelayLoop 				
00008050 5B EE              			jmp Loop_AD;
                            			
                            	//============================================================= 
                            	//main.asm 结束
                            	//=============================================================
0 error(s), 0 warning(s).

