Sunplus u'nSP Assembler - Ver. 1.8.0

                            	//*****************************************************************************/
                            	// 名称： T_DAC
                            	// 来源：《SPCE061A单片机实验指导书》,"实验十八	双通道 D/A"可以
                            	// 描述： 本实验采取直接方式，通过编程实现一个锯齿波，用示波器则观
                            	//        察到锯齿波形,同时也可以听到AUD1和ADU2两端的扬声器有持续间
                            	//        断的声音。
                            	// 日期： 2003/6/17
                            	//*****************************************************************************/
                            	.DEFINE		P_DAC_Ctrl		0x702A 
                            	.DEFINE	    P_DAC1			0x7017
                            	.DEFINE		P_DAC2			0x7016
                            	.DEFINE		P_WatchDog_Clear	0x7012;        // Watchdog Reset
00000000                    	.CODE
                            	
                            	//============================================================================= 
                            	// 函数： main()
                            	// 描述：主函数
                            	//=============================================================================
                            	.PUBLIC _main;
                            	_main:
00000000 40 F1              	    INT OFF;
00000001 40 92              	    R1=0x0000;
00000002 19 D3 2A 70        	    [P_DAC_Ctrl]=R1;    
00000004 0B 97 40 00        	    R3=0x0040		      //D/A转换为10位，即B15~B6
00000006 40 92              	    R1=0x0000;
                            	L_MainLoop1:    
00000007 19 D3 17 70        	    [P_DAC1]=R1;  
00000009 19 D3 16 70        	    [P_DAC2]=R1;
0000000B 40 F0 16 00        	    CALL L_Delay		  //调用延时
0000000D 09 43 C0 FF        	    cmp R1, 0xffc0;       //判断是否达到峰值
0000000F 04 4E              	    jne L_Add;
00000010 40 42              	    cmp R1, 0x0000;		  //判断是否为零
00000011 02 5E              	    je  L_Add;
00000012 03 23              	    R1-=R3;
00000013 4D EE              	    jmp L_MainLoop1  
                            	L_Add:
00000014 03 03              	    R1+=R3
00000015 4F EE              	    jmp L_MainLoop1
                            	    
                            	L_Delay:				  //延时
00000016 40 94              	    R2=0  
                            	L_DelayLoop:
00000017 41 98              	 	R4 = 0x0001;                      
00000018 1C D9 12 70        		[P_WatchDog_Clear] = R4;	   		
0000001A 0A 05 00 08        	    R2+=2048
0000001C 46 4E              	    JNZ L_DelayLoop    
0000001D 90 9A              	    RETF
                            	    
                            	//*****************************************************************************/
                            	//  main.asm 结束
                            	//*****************************************************************************/
0 error(s), 0 warning(s).
