Sunplus u'nSP Assembler - Ver. 1.8.0
              Listing File Has Been Relocated
                            	.include   hardware.inc
                     <      	//========================================================================================
                     <      	// Progarm: The file be included by modules
                     <      	// Arranged by: Andy Hsu
                     <      	// Date: 	2000/06/23: first version
                     <      	//		2000/07/24: modified
                     <      	//		2000/10/20: modified for version 52A
                     <      	//========================================================================================
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Definitions for I/O Port
                     <      	//////////////////////////////////////////////////////////////////
                     <      	.DEFINE	P_IOA_Data   		0x7000;        // Write Data into data register and read from IOA pad
                     <      	.DEFINE P_IOA_Buffer        0x7001;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOA_Dir           0x7002;        // Direction vector for IOA
                     <      	.DEFINE P_IOA_Attrib        0x7003;        // Attribute vector for IOA
                     <      	.DEFINE P_IOA_Latch         0x7004;        // Latch PortA data for key change wake-up
                     <      	
                     <      	.DEFINE P_IOB_Data         	0x7005;        // Write Data into the data register and read from IOB pad
                     <      	.DEFINE P_IOB_Buffer        0x7006;        // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOB_Dir           0x7007;        // Direction vector for IOB
                     <      	.DEFINE P_IOB_Attrib        0x7008;        // Attribute vector for IOB
                     <      	
                     <      	.DEFINE P_FeedBack          0x7009;        // Clock form external R,C
                     <      	.DEFINE P_TimerA_Data       0x700A;        // Data port for TimerA 
                     <      	.DEFINE P_TimerA_Ctrl       0x700B;        // Control Port for TimerA
                     <      	.DEFINE P_TimerB_Data       0x700C;        // Data port for TimerB
                     <      	.DEFINE P_TimerB_Ctrl       0x700D;        // Control Port for TimerB
                     <      	.DEFINE P_TimeBase_Setup    0x700E;        // TimerBase Freq. Set
                     <      	.DEFINE P_TimeBase_Clear	0x700F;		   // Reset Timerbase counter
                     <      	.DEFINE P_INT_Ctrl          0x7010;        // Control port for interrupt source
                     <      	.DEFINE P_INT_Clear         0x7011;        // Clear interrupt source
                     <      	.DEFINE P_Watchdog_Clear    0x7012;        // Watchdog Reset
                     <      	.DEFINE P_SystemClock       0x7013;        // Change system clock frequency(include go to standby mode)
                     <      	
                     <      	//... PA6442 Old version (for EC-02) ...........
                     <      	//.DEFINE P_ADDA               0x7014;        //10-bit DA(W) AD(R)
                     <      	//.DEFINE P_DAC1               0x7014;        //
                     <      	//.DEFINE P_AD_Ctrl            0x7015;        //AD/DA control
                     <      	//.DEFINE P_AD_Status          0x7015;        //AD status
                     <      	//.DEFINE P_DAC2               0x7016;        //DAC channel 2
                     <      	//.DEFINE P_PWM                0x7016;        //PWM output
                     <      	//.DEFINE P_DA_Ctrl            0x7017;        //DAC latch control
                     <      	
                     <      	//... PA6442 New version MC52A (For EC-03)....
                     <      	.DEFINE P_ADC 	        	0x7014;        	// Data Port for AD
                     <      	.DEFINE P_ADC_Ctrl          0x7015;        	// Control Port for AD control
                     <      	.DEFINE P_ADC_Status        0x7015;        	// AD Port Status
                     <      	.DEFINE P_DAC2              0x7016;        	// Data Port for DAC2
                     <      	.DEFINE P_PWM               0x7016;        	// Data Port for PWM
                     <      	.DEFINE P_DAC1	        	0x7017;        	// Data Port for DAC1
                     <      	.DEFINE P_DAC_Ctrl			0x702A;			// Control Port for two DAC and audio output mode
                     <      	//............................................
                     <      	
                     <      	.DEFINE P_IR_Ctrl			0x7018;			// Control Port for IR
                     <      	.DEFINE P_LVD_Ctrl          0x7019;        	// Control Port for LVD
                     <      	
                     <      	.DEFINE P_SIO_Addr_Low		0x701B;			// Address Port low
                     <      	.DEFINE P_SIO_Addr_Mid		0x701C;			// Address Port middle
                     <      	.DEFINE P_SIO_Addr_High	 	0x701D;			// Address Port high
                     <      	.DEFINE P_SIO_Ctrl			0x701E;			// Control Port
                     <      	.DEFINE P_SIO_Start			0x701F;			// Start port for serial interface
                     <      	.DEFINE P_SIO_Stop			0x7020;			// Stop port for serial interface
                     <      	
                     <      	.DEFINE P_UART_Command1		 0x7021;		// Command1 Port for UART
                     <      	.DEFINE P_UART_Command2		 0x7022;		// Command2 Port for UART
                     <      	.DEFINE P_UART_Data			 0x7023; 		// Data Port for UART
                     <      	.DEFINE	P_UART_BaudScalarLow 0x7024;		// Set Baud Rate scalar low
                     <      	.DEFINE	P_UART_BaudScalarHigh 0x7025;		// Set Baud Rate scalar high
                     <      	
                     <      	
                     <      	//... Definitions for P_INT_Ctrl ..............
                     <      	.DEFINE C_IRQ6_TMB2             0x0001;        	// Timer B IRQ6
                     <      	.DEFINE C_IRQ6_TMB1             0x0002;        	// Timer A IRQ6
                     <      	.DEFINE C_IRQ5_2Hz              0x0004;        	// 2Hz IRQ5
                     <      	.DEFINE C_IRQ5_4Hz              0x0008;        	// 4Hz IRQ5
                     <      	.DEFINE C_IRQ4_1KHz             0x0010;        	// 1024Hz IRQ4
                     <      	.DEFINE C_IRQ4_2KHz             0x0020;        	// 2048Hz IRQ4
                     <      	.DEFINE C_IRQ4_4KHz             0x0040;        	// 4096Hz IRQ4
                     <      	.DEFINE C_IRQ3_KEY              0x0080;        	// Key Change IRQ3
                     <      	.DEFINE C_IRQ3_EXT1             0x0100;        	// Ext1 IRQ3
                     <      	.DEFINE C_IRQ3_EXT2             0x0200;        	// Ext2 IRQ3
                     <      	.DEFINE C_IRQ2_TMB              0x0400;        	// Timer B IRQ2
                     <      	.DEFINE C_FIQ_TMB               0x0800;        	// Timer B FIQ
                     <      	.DEFINE C_IRQ1_TMA              0x1000;        	// Timer A IRQ1
                     <      	.DEFINE C_FIQ_TMA               0x2000;        	// Timer A FIQ
                     <      	.DEFINE C_IRQ0_PWM              0x4000;        	// PWM IRQ0
                     <      	.DEFINE C_FIQ_PWM               0x8000;        	// PWM FIQ
                     <      	
                     <      	// Definitions for P_TimerA/B_Ctrl ............                               
                     <      	.DEFINE	C_Fosc_2				0x0000;			// 
                     <      	.DEFINE	C_Fosc_256		    	0x0001;			//
                     <      	.DEFINE	C_32768Hz				0x0002;			//
                     <      	.DEFINE	C_8192Hz				0x0003;			//
                     <      	.DEFINE	C_4096Hz				0x0004;			//
                     <      	.DEFINE	C_A1					0x0005;			//
                     <      	.DEFINE C_A0					0x0006;			//
                     <      	.DEFINE C_Ext1					0x0007;			//
                     <      	
                     <      	.DEFINE	C_2048Hz				0x0000;			//
                     <      	.DEFINE	C_1024Hz				0x0008;			//
                     <      	.DEFINE	C_256Hz					0x0010;			//
                     <      	.DEFINE	C_TMB1Hz				0x0018;			//
                     <      	.DEFINE	C_4Hz					0x0020;			//
                     <      	.DEFINE	C_2Hz					0x0028;			//
                     <      	.DEFINE	C_B1					0x0030;			//
                     <      	.DEFINE	C_Ext2					0x0038;			//
                     <      	
                     <      	.DEFINE	C_Off					0x0000;			//
                     <      	.DEFINE C_D1					0x0040;			//
                     <      	.DEFINE C_D2					0x0080;			//
                     <      	.DEFINE C_D3					0x00C0;			//
                     <      	.DEFINE C_D4					0x0100;			//
                     <      	.DEFINE C_D5					0x0140;			//
                     <      	.DEFINE C_D6					0x0180;			//
                     <      	.DEFINE C_D7					0x01C0;			//
                     <      	.DEFINE C_D8					0x0200;			//
                     <      	.DEFINE C_D9					0x0240;			//
                     <      	.DEFINE C_D10					0x0280;			//
                     <      	.DEFINE C_D11					0x02C0;			//
                     <      	.DEFINE C_D12					0x0300;			//
                     <      	.DEFINE C_D13					0x0340;			//
                     <      	.DEFINE C_D14					0x0380;			//
                     <      	.DEFINE C_TA_Div_2				0x03C0;			// Timer A
                     <      	.DEFINE C_TB_Div_2				0x03C0;			// Timer B
                     <      	
                     <      	//... Definition for P_SystemClock ............
                     <      	.DEFINE C_Fosc					0x0000;			// b3..b0
                     <      	.DEFINE C_Fosc_Div_2			0x0001;			//
                     <      	.DEFINE C_Fosc_Div_4			0x0002;			//
                     <      	.DEFINE C_Fosc_Div_8			0x0003;			// (default)
                     <      	.DEFINE C_Fosc_Div_16			0x0004;			//
                     <      	.DEFINE C_Fosc_Div_32			0x0005;			//
                     <      	.DEFINE C_Fosc_Div_64			0x0006;			//
                     <      	.DEFINE C_Sleep					0x0007;		 	//
                     <      	
                     <      	.DEFINE	C_32K_Work				0x0000;			// b4
                     <      	.DEFINE C_32K_Off				0x0000;			// 
                     <      	.DEFINE C_StrongMode			0x0000;			// b5
                     <      	.DEFINE C_AutoMode				0x0000;			//
                     <      	
                     <      	//... Define for P_AD_Ctrl ....................
                     <      	.DEFINE	C_AD					0x0001;			//
                     <      	.DEFINE C_DA					0x0000;			//
                     <      	.DEFINE C_MIC					0x0000;			//
                     <      	.DEFINE C_LINE					0x0002;			//
                     <      	
                     <      	//... Define for P_DA_Ctrl ....................
                     <      	.DEFINE C_PushPull				0x0000;			// b0, (default) 
                     <      	.DEFINE C_DoubleEnd				0x0001;			// b0
                     <      	.DEFINE	C_DAC_Mode				0x0000;			// b1, (default)
                     <      	.DEFINE C_PWM_Mode				0x0002;			// b1
                     <      	
                     <      	.DEFINE	C_D1_Direct				0x0000;			// DAC1 latch
                     <      	.DEFINE C_D1_LatchA				0x0008;			// 
                     <      	.DEFINE C_D1_LatchB				0x0010;			//
                     <      	.DEFINE C_D1_LatchAB			0x0018;			//
                     <      	
                     <      	.DEFINE	C_D2_Direct				0x0000;			// DAC2 latch
                     <      	.DEFINE C_D2_LatchA				0x0020;			// 
                     <      	.DEFINE C_D2_LatchB				0x0040;			//
                     <      	.DEFINE C_D2_LatchAB			0x00C0;			//
                     <      	
                     <      	//... Define for P_LVD_Ctrl ...................
                     <      	.DEFINE C_LVD24V				0x0000;			// LVD = 2.4V 
                     <      	.DEFINE C_LVD28V				0x0001;			// LVD = 2.8V
                     <      	.DEFINE C_LVD32V				0x0002;			// LVD = 3.2V
                     <      	.DEFINE C_LVD36V				0x0003;			// LVD = 3.6V
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Read_INT_Status;			// for further use
                     <      	.EXTERNAL 	F_SP_Write_INT_Status;			// for further use
                     <      	.EXTERNAL  	F_SP_Set_INT_Vector;			// for further use
                     <      	.EXTERNAL	F_SP_Clear_INT_Vector;			// for further use
                     <      	
                     <      	.EXTERNAL	F_SP_Send_Out;					//
                     <      	.EXTERNAL	F_SP_Send_DAC1;					//
                     <      	.EXTERNAL	F_SP_Send_DAC2;					//
                     <      	.EXTERNAL	F_SP_Send_Two_DAC;				//
                     <      	.EXTERNAL	F_SP_Init_HW;					//
                     <      	
                     <      	.EXTERNAL	R_InterruptStatus;
                     <      	
                     <      	
                     <      	.EXTERNAL 	F_SP_RampUpDAC1;
                     <      	.EXTERNAL 	F_SP_RampDnDAC1;
                     <      	.EXTERNAL 	F_SP_RampUpDAC2;
                     <      	.EXTERNAL  	F_SP_RampDnDAC2;
                     <      	
                     <      	.EXTERNAL 	F_SP_InitQueue;
                     <      	.EXTERNAL 	F_SP_ReadQueue;
                     <      	.EXTERNAL 	F_SP_WriteQueue;
                     <      	.EXTERNAL 	F_SP_TestQueue;
                     <      	
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_Get_ADC
                     <      	
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerA_Data
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_TimerB_Data
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_INT_Clear
                     <      	.EXTERNAL 	F_SP_Set_P_SystemClock
                     <      	.EXTERNAL 	F_SP_Set_P_DAC_Ctrl
                     <      	.EXTERNAL 	F_SP_Set_P_ADC_Ctrl
                     <      	
                     <      		
                     <      	
                     <      	//--------------------------------------------
                     <      	SACM_MACRO1: 	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	SACM_MACRO2:	.MACRO
                     <      		
                     <      		.ENDM
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	//.define PC_Play_Enable_A2000		1    	// Enable the PC-Play function for SACM-A2000 module
                     <      	//.define PC_Play_Enable_S480		1    	// Enable the PC-Play function for SACM-S480 module
                     <      	//.define PC_Play_Enable_S240		1    	// Enable the PC-Play function for SACM-S240 module    
                     <      	//.define PC_Play_Enable_MS01		1    	// Enable the PC-Play function for SACM-MS01 module
                     <      	
                     <      	
                     <      	
                     <      	//========================================================================================        
                     <      	// End of hardware.inc
                     <      	//========================================================================================
                            	.define		C_data
                            	.include		splc501c_io.inc
                     <      	//========================================================
                     <      	//SPLC501C Library Pin Definition
                     <      	//==========================================================
                     <      	//6800 Control Pin
                     <      	//-----------------------------------------------------------------------------
                     <      	//User can change  any of control pins at any bit, except user select the IO port 
                     <      	//of control pin the same as control bus. 
                     <      	//=======================================================
                     <      	//								FEDCBA9876543210					
                     <      	//.define		C_AOP_Pin    	00100000000000b;		//IO AOP
                     <      	//.define		C_EP_Pin   		01000000000000b;		//IO EP
                     <      	//.define		C_RWP_Pin     	10000000000000b;		//IO as RWP
                     <      	//								FEDCBA9876543210
                     <      	.define		C_AOP_Pin    	    0000000000010000b;		//IO AOP
                     <      	.define		C_EP_Pin   			0000000001000000b;		//IO EP
                     <      	.define		C_RWP_Pin     		0000000000100000b;		//IO as RWP
                     <      	//========================================================
                     <      	//Define the SPLC Data Bus Pin
                     <      	//Only Two Type Can Select
                     <      	//=====================================================
                     <      	//							FEDCBA9876543210
                     <      	.define		C_DataBus		1111111100000000b;		//IO Data Bus
                     <      	//.define		C_DataBus		0000000011111111b;
                     <      	.define		C_BusHighLow	1;			//Set Data High/Low Byte 1:High	
                     <      	//.define	C_AddressBus	0000000011111111b;		//IO Data Bus
                     <      	//.define	C_DataBus		0000000011111111b;		//IO Data Bus
                     <      	//.define	C_BusHighLow	0;			//Set Data High/Low Byte 0:Low
                     <      	//=====================================================
                     <      	//================================================
                     <      	//Set Control Pins Port
                     <      	//================================================
                     <      	//Set Control Pins At Port A
                     <      	//.define	P_IO_Control_Data			0x7000;		//P_IOA_Data
                     <      	//.define	P_IO_Control_Buffer			0x7001;		//P_IOA_Buffer
                     <      	//.define	P_IO_Control_Dir			0x7002;		//P_IOA_Dir
                     <      	//.define	P_IO_Control_Attrib			0x7003;		//P_IOA_Attrib
                     <      	//=========================================================
                     <      	//Set Control Pins At Port B
                     <      	.define	P_IO_Control_Data		0x7005;		//P_IOB_Data
                     <      	.define	P_IO_Control_Buffer		0x7006;		//P_IOB_Buffer
                     <      	.define	P_IO_Control_Dir		0x7007;		//P_IOB_Dir
                     <      	.define	P_IO_Control_Attrib		0x7008;		//P_IOB_Attrib
                     <      	//========================================================
                     <      	//=========================================================
                     <      	//Set Control Bus Port
                     <      	//==========================================================
                     <      	//Set Control Bus At Port A
                     <      	.define	P_IO_Data_Data				0x7000;		//P_IOA_Data
                     <      	.define	P_IO_Data_Buffer			0x7001;		//P_IOA_Buffer
                     <      	.define	P_IO_Data_Dir				0x7002;		//P_IOA_Dir
                     <      	.define	P_IO_Data_Attrib			0x7003;		//P_IOA_Attrib
                     <      	//==========================================================
                     <      	//Set Control Bus At Port B
                     <      	//.define	P_IO_Data_Data			0x7005;		//P_IOB_Data
                     <      	//.define	P_IO_Data_Buffer		0x7006;		//P_IOB_Buffer
                     <      	//.define	P_IO_Data_Dir			0x7007;		//P_IOB_Dir
                     <      	//.define	P_IO_Data_Attrib		0x7008;		//P_IOB_Attrib
                     <      	//=========================================================
0000C321                    	.code
                            	//////////////////////////////////////////////////////////////////////////////
                            	//Filename : F_Init_LCD_501
                            	//Function : Intialize  SPLC501c
                            	//Input    : None
                            	//Output   : None
                            	//Destory  : R1,R2,r3
                            	//////////////////////////////////////////////////////////////////////////////
                            	.public		_Init_LCD_501
                            	_Init_LCD_501:		.proc
0000C321 41 92              			R1 = 0x0001;
0000C322 19 D3 12 70        	        [P_Watchdog_Clear] = R1;   // reset watchdog
0000C324 40 F0 3F C3        	        CALL    F_LCD_Reset_Command;//Destory  : r3
0000C326 40 F0 4D C3        	        CALL    F_LCD_Command_Nop;	//Destory  : r3
0000C328 40 F0 5B C3        	        CALL    F_LCD_Solomon_Freq;	//Destory  : r3
0000C32A 40 F0 76 C3        	        CALL    F_LCD_Power_Set;	//Destory  : r3
0000C32C 40 F0 EB C3        	        CALL    F_LCD_Display_On;	//Destory  : r3
0000C32E 40 92              	        R1 = 0x0000;                //Page No. = 0
0000C32F 40 F0 15 C4        	        CALL    F_Set_LCD_Page_No;	//Destory  : r3,r1
0000C331 40 92              	        R1 = 0x0000;                //Start line = 0
0000C332 40 F0 2D C4        	        CALL    F_Set_LCD_Start_Line;//Destory  : r3,r1
0000C334 40 94              	        R2 = 0x0000;                //Column address = 0
0000C335 40 F0 3E C4        	        CALL    F_Set_LCD_Column_Addr;//Destory  : r3,r2,r1
0000C337 40 F0 F9 C3        	        CALL    F_LCD_ALL_On;		//Destory  : r3
0000C339 40 F0 07 C4        	        CALL    F_LCD_Normal_Display;//Destory  : r3
0000C33B 40 96              	        R3 = 0x0000;                //Fill "00"
0000C33C 40 F0 74 C4        	        CALL  F_Fill_All_LCD_Value;	
0000C33E 90 9A              	        RETF;
                            			.endp
                            		
                            		
                            	//////////////////////////////////////////////////////////////////////////////
                            	//Subroutine
                            	//////////////////////////////////////////////////////////////////////////////
                            	F_LCD_Reset_Command:
0000C33F 13 97 00 70        			r3=[P_IO_Data_Data]
0000C341 0A 95 00 FF        			r2=C_DataBus
0000C343 0A 85 FF FF        			r2^=0xffff
0000C345 02 B7              			r3&=r2
0000C346 0B A7 00 E2        			r3|=0xe200
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C348 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C34A 40 F0 A3 C4        			CALL F_Send_data			   
                            	//        R1=0x0AE2;                //Reset
                            	//        [P_Lcd501Ctrl]=R1;
                            	//        CALL    F_Delay_Bus_Time;
                            	
0000C34C 90 9A              	        RETF;
                            	
                            	//////////////////////////////////////////////////////////////////////////////
                            	F_LCD_Command_Nop:
0000C34D 13 97 00 70        			r3=[P_IO_Data_Data]
                            			
0000C34F 0A 95 00 FF        			r2=C_DataBus
0000C351 0A 85 FF FF        			r2^=0xffff
0000C353 02 B7              			r3&=r2
                            		
0000C354 0B A7 00 E3        			r3|=0xe300
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C356 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C358 40 F0 A3 C4        			CALL F_Send_data			   
                            	//        R1=0x0AE3;                //Nop
                            	//        [P_Lcd501Ctrl]=R1;
                            	//        CALL F_Delay_Bus_Time;
                            	
0000C35A 90 9A              	        RETF;
                            	
                            	//////////////////////////////////////////////////////////////////////////////
                            	F_LCD_Solomon_Freq:
0000C35B 13 97 00 70        			r3=[P_IO_Data_Data]
0000C35D 0A 95 00 FF        					r2=C_DataBus
0000C35F 0A 85 FF FF        			r2^=0xffff
0000C361 02 B7              			r3&=r2
                            		
0000C362 0B A7 00 C8        			r3|=0xC800					//C8
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C364 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C366 40 F0 A3 C4        			CALL F_Send_data			  
                            	//        R1=0x0AA9;                //
                            	//        [P_Lcd501Ctrl]=R1;
                            	//        CALL F_Delay_Bus_Time;
0000C368 13 97 00 70        			r3=[P_IO_Data_Data]
0000C36A 0A 95 00 FF        					r2=C_DataBus
0000C36C 0A 85 FF FF        			r2^=0xffff
0000C36E 02 B7              			r3&=r2
                            		
0000C36F 0B A7 00 A0        			r3|=0xa000					//A0
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C371 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C373 40 F0 A3 C4        			CALL F_Send_data			  
                            	//        R1=0x0AA1;                //ADC : Normal
                            	//        [P_Lcd501Ctrl]=R1;
                            	//        CALL F_Delay_Bus_Time;
                            	
0000C375 90 9A              	        RETF;
                            	
                            	//////////////////////////////////////////////////////////////////////////////
                            	F_LCD_Power_Set:
0000C376 13 97 00 70        			r3=[P_IO_Data_Data]
0000C378 0A 95 00 FF        					r2=C_DataBus
0000C37A 0A 85 FF FF        			r2^=0xffff
0000C37C 02 B7              			r3&=r2
                            		
0000C37D 0B A7 00 A2        			r3|=0xa200
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C37F 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C381 40 F0 A3 C4        			CALL F_Send_data			   
                            	//        R1=0x0AA2;
                            	//        [P_Lcd501Ctrl]=R1;        // 1/9 bias
                            	//        CALL F_Delay_Bus_Time;
0000C383 13 97 00 70        			r3=[P_IO_Data_Data]
0000C385 0A 95 00 FF        					r2=C_DataBus
0000C387 0A 85 FF FF        			r2^=0xffff
0000C389 02 B7              			r3&=r2
                            		
0000C38A 0B A7 00 24        			r3|=0x2400
                            			.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C38C 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C38E 40 F0 A3 C4        			CALL F_Send_data			   
                            	//        R1=0x0A24;
                            	//        [P_Lcd501Ctrl]=R1;        // V5 RATIO 5 FOR 1/9 BIAS
                            	//        CALL F_Delay_Bus_Time;
0000C390 13 97 00 70        			r3=[P_IO_Data_Data]
0000C392 0A 95 00 FF        					r2=C_DataBus
0000C394 0A 85 FF FF        			r2^=0xffff
0000C396 02 B7              			r3&=r2
                            		
0000C397 0B A7 00 81        			r3|=0x8100
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C399 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C39B 40 F0 A3 C4        			CALL F_Send_data			  
                            	//        R1=0x0A81;
                            	//        [P_Lcd501Ctrl]=R1;        // ELECTRONIC VOLUME MODE
                            	//        CALL F_Delay_Bus_Time;
0000C39D 13 97 00 70        			r3=[P_IO_Data_Data]
0000C39F 0A 95 00 FF        					r2=C_DataBus
0000C3A1 0A 85 FF FF        			r2^=0xffff
0000C3A3 02 B7              			r3&=r2
                            		
0000C3A4 0B A7 00 1A        			r3|=0x1a00
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C3A6 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C3A8 40 F0 A3 C4        			CALL F_Send_data			   
                            	//        R1=0x0A1A;
                            	//        [P_Lcd501Ctrl]=R1;        // MS Column : A
                            	//        CALL F_Delay_Bus_Time;
0000C3AA 13 97 00 70        			r3=[P_IO_Data_Data]
0000C3AC 0A 95 00 FF        					r2=C_DataBus
0000C3AE 0A 85 FF FF        			r2^=0xffff
0000C3B0 02 B7              			r3&=r2
                            		
0000C3B1 0B A7 00 D2        			r3|=0xd200
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C3B3 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C3B5 40 F0 A3 C4        			CALL F_Send_data			  
                            	//        R1=0x0AD2;
                            	//        [P_Lcd501Ctrl]=R1;        // Set driving mode register
                            	//        CALL F_Delay_Bus_Time;
0000C3B7 13 97 00 70        			r3=[P_IO_Data_Data]
0000C3B9 0A 95 00 FF        					r2=C_DataBus
0000C3BB 0A 85 FF FF        			r2^=0xffff
0000C3BD 02 B7              			r3&=r2
                            		
0000C3BE 40 A6              			r3|=0x0000
                            			.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C3BF 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C3C1 40 F0 A3 C4        			CALL F_Send_data			  
                            	//        R1=0x0A00;
                            	//        [P_Lcd501Ctrl]=R1;        // LS Column : 0
                            	//        CALL F_Delay_Bus_Time;
0000C3C3 13 97 00 70        			r3=[P_IO_Data_Data]
0000C3C5 0A 95 00 FF        					r2=C_DataBus
0000C3C7 0A 85 FF FF        			r2^=0xffff
0000C3C9 02 B7              			r3&=r2
                            		
0000C3CA 0B A7 00 2C        			r3|=0x2c00
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C3CC 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C3CE 40 F0 A3 C4        			CALL F_Send_data			  
                            	//        R1=0x0A2C;
                            	//        [P_Lcd501Ctrl]=R1;        // REGULATOR on
                            	//        CALL F_Delay_Bus_Time;
0000C3D0 13 97 00 70        			r3=[P_IO_Data_Data]
0000C3D2 0A 95 00 FF        					r2=C_DataBus
0000C3D4 0A 85 FF FF        			r2^=0xffff
0000C3D6 02 B7              			r3&=r2
                            		
0000C3D7 0B A7 00 2E        			r3|=0x2e00
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C3D9 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C3DB 40 F0 A3 C4        			CALL F_Send_data			 
                            	//        R1=0x0A2E;
                            	//        [P_Lcd501Ctrl]=R1;        // +FOLLOWER oFF
                            	//        CALL F_Delay_Bus_Time;
0000C3DD 13 97 00 70        			r3=[P_IO_Data_Data]
0000C3DF 0A 95 00 FF        					r2=C_DataBus
0000C3E1 0A 85 FF FF        			r2^=0xffff
0000C3E3 02 B7              			r3&=r2
                            		
0000C3E4 0B A7 00 2F        			r3|=0x2f00
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C3E6 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C3E8 40 F0 A3 C4        			CALL F_Send_data			
                            	//        R1=0x0A2F;
                            	//        [P_Lcd501Ctrl]=R1;        // +FOLLOWER oFF
                            	//        CALL F_Delay_Bus_Time;
                            	
0000C3EA 90 9A              	        RETF;
                            	
                            	//////////////////////////////////////////////////////////////////////////////
                            	F_LCD_Display_On:
0000C3EB 13 97 00 70        			r3=[P_IO_Data_Data]
0000C3ED 0A 95 00 FF        					r2=C_DataBus
0000C3EF 0A 85 FF FF        			r2^=0xffff
0000C3F1 02 B7              			r3&=r2
                            		
0000C3F2 0B A7 00 AF        			r3|=0xaf00
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C3F4 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C3F6 40 F0 A3 C4        			CALL F_Send_data			  
                            	//        R1=0x0AAF;
                            	//        [P_Lcd501Ctrl]=R1;
                            	//        CALL F_Delay_Bus_Time;
                            	
0000C3F8 90 9A              	        RETF;
                            	
                            	//////////////////////////////////////////////////////////////////////////////
                            	F_LCD_ALL_On:
0000C3F9 13 97 00 70        			r3=[P_IO_Data_Data]
0000C3FB 0A 95 00 FF        					r2=C_DataBus
0000C3FD 0A 85 FF FF        			r2^=0xffff
0000C3FF 02 B7              			r3&=r2
                            		
0000C400 0B A7 00 A5        			r3|=0xa500
                            			.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C402 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C404 40 F0 A3 C4        			CALL F_Send_data			  
                            	//        R1=0x0AA5;              	//All points on
                            	//        [P_Lcd501Ctrl]=R1;
                            	//        CALL F_Delay_Bus_Time;
                            	
0000C406 90 9A              	        RETF;
                            	
                            	//////////////////////////////////////////////////////////////////////////////
                            	F_LCD_Normal_Display:
0000C407 13 97 00 70        			r3=[P_IO_Data_Data]
0000C409 0A 95 00 FF        					r2=C_DataBus
0000C40B 0A 85 FF FF        			r2^=0xffff
0000C40D 02 B7              			r3&=r2
                            		
0000C40E 0B A7 00 A4        			r3|=0xa400
                            			.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C410 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C412 40 F0 A3 C4        			CALL F_Send_data			 
                            	//        R1=0x0AA4;              	//Normal display
                            	//        [P_Lcd501Ctrl]=R1;
                            	//        CALL F_Delay_Bus_Time;
                            	
0000C414 90 9A              	        RETF;
                            	//////////////////////////////////////////////////////////////////////////////
                            	//Filename : F_Set_LCD_Page_No
                            	//Function : Set the LCD page No.
                            	//Input    : Page No. (R1:0x0000~0x0007)
                            	//Output   : None
                            	//Destroy  : R1
                            	//////////////////////////////////////////////////////////////////////////////
                            	
                            	.public	_Set_LCD_Page_No
                            	.public	F_Set_LCD_Page_No
                            	F_Set_LCD_Page_No:
                            	_Set_LCD_Page_No:
0000C415 59 93              			r1=r1 lsl 0x04
0000C416 59 93              			r1=r1 lsl 0x04
0000C417 09 A3 00 B0        			r1|=0xb000
0000C419 88 D2              			PUSH R1,R1 TO [SP]
0000C41A 11 93 00 70        			r1=[P_IO_Data_Data]
0000C41C 88 D4              			push r2 to [sp]
0000C41D 0A 95 00 FF        			r2=C_DataBus
0000C41F 0A 85 FF FF        			r2^=0xffff
0000C421 02 B3              			r1&=r2
0000C422 88 92              			pop r2 from [sp]
0000C423 19 D3 00 70        			[P_IO_Data_Data]=r1
0000C425 88 90              			POP R1,R1 FROM [SP]
0000C426 11 A3 00 70        			r1|=[P_IO_Data_Data]
                            			.if	C_BusHighLow
                            		.else
                            			R1	=	R1	lsr	4;
                            			R1	=	R1	lsr	4;		
                            		.endif
0000C428 19 D3 00 70        			[P_IO_Data_Data]=r1
0000C42A 40 F0 A3 C4        			CALL F_Send_data
                            	//        R1 |= 0x0AB0;         	//Set Page No. (0~7)
                            	//        [P_Lcd501Ctrl]=R1;
                            	//        CALL F_Delay_Bus_Time;
                            	
0000C42C 90 9A              	        RETF;
                            	
                            	//////////////////////////////////////////////////////////////////////////////
                            	//////////////////////////////////////////////////////////////////////////////
                            	//Filename : F_Set_LCD_Start_Line
                            	//Function : Set the LCD start line
                            	//Input    : Page No. (R1:0x0000~0x003F)
                            	//Output   : None
                            	//Destroy  : R1
                            	//////////////////////////////////////////////////////////////////////////////
                            	F_Set_LCD_Start_Line:
0000C42D 13 97 00 70        			r3=[P_IO_Data_Data]
0000C42F 0A 95 00 FF        					r2=C_DataBus
0000C431 0A 85 FF FF        			r2^=0xffff
0000C433 02 B7              			r3&=r2
                            		
0000C434 59 93              			r1=r1 lsl 0x04
0000C435 59 93              			r1=r1 lsl 0x04
0000C436 0B A7 00 40        			r3|=0x4000
0000C438 01 A7              			r3|=r1
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C439 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C43B 40 F0 A3 C4        			CALL F_Send_data			  
                            	//        R1 |= 0x0A40;           	//Set start line (00D ~ 63D)
                            	//        [P_Lcd501Ctrl]=R1;
                            	//        CALL F_Delay_Bus_Time;
                            	
0000C43D 90 9A              	        RETF;
                            	//////////////////////////////////////////////////////////////////////////////
                            	//Filename : F_Set_LCD_Column_Addr
                            	//Function : Set the LCD column address
                            	//Input    : Page No. (R2:0x0000~0x0083)
                            	//Output   : None
                            	//Destroy  : R1,R2
                            	//////////////////////////////////////////////////////////////////////////////
                            	.public		_Set_LCD_Column_Addr
                            	.public		F_Set_LCD_Column_Addr
                            	F_Set_LCD_Column_Addr:
                            	_Set_LCD_Column_Addr:
0000C43E 88 D2              	        push	r1 to [sp]
0000C43F 88 D6              	        push	r3 to [sp]
0000C440 02 93              	        R1 = R2                 
0000C441 59 93              	        R1 = R1 LSl 4;
0000C442 09 B3 00 0F        	        R1 &= 0x0F00;           	      
0000C444 09 A3 00 10        	        R1 |= 0x1000;
0000C446 88 D2              	        push r1,r1 to [sp]
0000C447 11 93 00 70        	        r1=[P_IO_Data_Data]
                            	 //      r1&=0x00ff
0000C449 88 D4              	 		push r2 to [sp]
0000C44A 0A 95 00 FF        			r2=C_DataBus
0000C44C 0A 85 FF FF        			r2^=0xffff
0000C44E 02 B3              			r1&=r2
0000C44F 88 92              			pop r2 from [sp]
0000C450 19 D3 00 70        	        [P_IO_Data_Data]=r1
0000C452 88 90              	        pop r1,r1 from [sp] 
0000C453 11 A3 00 70        	        r1|=[P_IO_Data_Data]      
                            	        .if	C_BusHighLow
                            		.else
                            			R1	=	R1	lsr	4;
                            			R1	=	R1	lsr	4;		
                            		.endif   	
0000C455 19 D3 00 70        			[P_IO_Data_Data]=r1
0000C457 40 F0 A3 C4        			CALL F_Send_data
0000C459 02 93              			R1 = R2
0000C45A 59 93              			R1 = R1 LSl 4;
0000C45B 59 93              			R1 = R1 LSl 4;
0000C45C 09 B3 00 0F        	        R1 &= 0x0F00;   
0000C45E 88 D2              	        push r1,r1 to [sp]
0000C45F 11 93 00 70        	        r1=[P_IO_Data_Data]
                            	   //     r1&=0x00ff
0000C461 88 D4              	  		push r2 to [sp]
0000C462 0A 95 00 FF        			r2=C_DataBus
0000C464 0A 85 FF FF        			r2^=0xffff
0000C466 02 B3              			r1&=r2
0000C467 88 92              			pop r2 from [sp]
0000C468 19 D3 00 70        	        [P_IO_Data_Data]=r1
0000C46A 88 90              	        pop r1,r1 from [sp] 
0000C46B 11 A3 00 70        	        r1|=[P_IO_Data_Data]    
                            	        .if	C_BusHighLow
                            		.else
                            			R1	=	R1	lsr	4;
                            			R1	=	R1	lsr	4;		
                            		.endif    	         	 	
0000C46D 19 D3 00 70        	        [P_IO_Data_Data]=r1
0000C46F 40 F0 A3 C4        			CALL F_Send_data
0000C471 88 94              			pop	r3 from [sp]
0000C472 88 90              			pop	r1 from [sp]
                            	        
0000C473 90 9A              	        RETF;
                            	//////////////////////////////////////////////////////////////////////////////
                            	//Filename : F_Fill_All_LCD_Value
                            	//Function : Clear all LCD dots
                            	//Input    : Value (R3 : b0~7)
                            	//Output   : None
                            	//Destroy  : R1,R2
                            	//////////////////////////////////////////////////////////////////////////////
                            	.public _Fill_All_LCD_Value
                            	.public F_Fill_All_LCD_Value
                            	_Fill_All_LCD_Value:
                            	F_Fill_All_LCD_Value:
0000C474 0B B7 00 FF        	        R3 &= 0xFF00;           	//Filling value
0000C476 40 92              	        R1 = 0x0000;            	//Page No. = 0
                            			.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
                            	L_Fill_Page_Loop:
0000C477 98 D6              	        PUSH R1,R3 TO [SP];     	//Store R1 temporarily
0000C478 40 F0 15 C4        	        CALL F_Set_LCD_Page_No; 	//Page No. = 0
0000C47A 40 94              	        R2 = 0x0000;            	//Column address (00H ~ 63H)
0000C47B 40 F0 3E C4        	        CALL F_Set_LCD_Column_Addr; //Column Addr. = 0
0000C47D 98 90              	        POP R1,R3 FROM [SP];    	//Restore R1
0000C47E 0A 95 84 00        	        R2 = 0x0084;            	//Max. column address +1
                            	L_Fill_Column_Loop:
0000C480 88 D6              	        push r3,r3 to[sp]
0000C481 13 97 00 70        			r3=[P_IO_Data_Data]
0000C483 88 D4              			push r2 to [sp]
0000C484 0A 95 00 FF        			r2=C_DataBus
0000C486 0A 85 FF FF        			r2^=0xffff
0000C488 02 B7              			r3&=r2
0000C489 88 92              			pop r2 from [sp]
0000C48A 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C48C 88 94              			pop r3,r3 from [sp]
0000C48D 13 A7 00 70        			r3|=[P_IO_Data_Data]
                            	
0000C48F 1B D7 00 70        	        [P_IO_Data_Data]=r3
0000C491 88 D6              	        PUSH R3,R3 TO [SP];
0000C492 50 96              	        r3=C_AOP_Pin				//0x2000
0000C493 13 A7 05 70        	        r3|=[P_IO_Control_Data]
0000C495 1B D7 05 70        	        [P_IO_Control_Data]=r3
0000C497 40 F0 A3 C4        			CALL F_Send_data					////xxxxxxxx	  
0000C499 88 94              	        POP R3,R3 FROM [SP]
0000C49A 41 24              	        R2 -= 0x0001;           	//Next column address
0000C49B 5C 4E              	        JNZ L_Fill_Column_Loop; 	//End Page ?
0000C49C 41 02              	        R1 += 0x0001;
0000C49D 48 42              	        CMP R1,0x0008;          	//Next page address
0000C49E 68 4E              	        JNE L_Fill_Page_Loop;
0000C49F 41 92              	        R1 = 0x0001;
0000C4A0 19 D3 12 70        	        [P_Watchdog_Clear] = R1;  	// reset watchdog
                            	
0000C4A2 90 9A              	        RETF;
                            	
                            	//////////////////////////////////////////////////////////////////////////////
                            	//destory: r3
                            	//////////////////////////////////////////////////////////////////////
                            	.public	 _Send_data
                            	.public	 F_Send_data
                            	F_Send_data:
                            	_Send_data:			.proc
0000C4A3 13 97 05 70        			r3=[P_IO_Control_Data]
0000C4A5 0B A7 40 00        			r3|=C_EP_Pin				//0x4000
0000C4A7 1B D7 05 70        			[P_IO_Control_Data]=r3
0000C4A9 88 D2              			push  r1 to [sp]
0000C4AA 09 93 40 00        			r1=C_EP_Pin
0000C4AC 09 83 FF FF        			r1^=0xffff
0000C4AE 01 B7              			r3&=r1						//0xbfff
0000C4AF 88 90              			pop r1 from [sp]
0000C4B0 1B D7 05 70        			[P_IO_Control_Data]=r3
0000C4B2 88 D2              	        push r1 to [sp]
0000C4B3 50 92              	        r1=C_AOP_Pin
0000C4B4 09 83 FF FF        			r1^=0xffff
0000C4B6 01 B7              			r3&=r1
0000C4B7 60 92              			r1=C_RWP_Pin
0000C4B8 09 83 FF FF        			r1^=0xffff
0000C4BA 01 B7              			r3&=r1
0000C4BB 88 90              			pop r1 from [sp]
                            	//        r3&=0x1fff
0000C4BC 1B D7 05 70        	        [P_IO_Control_Data]=r3
0000C4BE 90 9A              	        retf
                            	        .endp
                            	////////////////////////////////////////////////////////////////////////////// 
                            	F_Delay_Bus_Time:
                            	
0000C4BF 90 9A              	        RETF;
                            	//////////////////////////////////////////////////////////////////////////////    
                            	//Filename : F_Read_Lcd_data
                            	//Function : frist read appoint  data on lcd
                            	//Input    : 
                            	//Output   : r3
                            	//Destroy  : R1,r3
                            	////////////////////////////////////////////////////////////////////////////// 
                            	.public	_Read_Lcd_data
                            	.public	F_Read_Lcd_data
                            	_Read_Lcd_data:	.proc
                            	F_Read_Lcd_data:
0000C4C0 11 93 02 70        			r1=[P_IO_Data_Dir]
0000C4C2 88 D4              			push r2 to [sp]
0000C4C3 0A 95 00 FF        			r2=C_DataBus
0000C4C5 0A 85 FF FF        			r2^=0xffff
0000C4C7 02 B3              			r1&=r2
0000C4C8 88 92              			pop r2 from [sp]
                            		//	r1&=0x00ff
0000C4C9 19 D3 02 70        			[P_IO_Data_Dir]=r1					
                            	//		r1=[P_IOA_Attrib]
                            	//		r1|=0xff00
                            	//		[P_IOA_Attrib]=r1				
                            	
                            	//		r3=0x00fd
0000C4CB 13 97 05 70        	        r3=[P_IO_Control_Data]
                            	//       r3|=0xb000
0000C4CD 50 A6              			r3|=C_AOP_Pin
0000C4CE 60 A6              			r3|=C_RWP_Pin
0000C4CF 09 93 40 00        			r1=C_EP_Pin
0000C4D1 09 83 FF FF        			r1^=0xffff
0000C4D3 01 B7              	        r3&=r1
0000C4D4 1B D7 05 70        	        [P_IO_Control_Data]=r3
0000C4D6 40 F0 A3 C4        	        CALL F_Send_data				//Dummy read after setting column address immediately
                            	 //       r3=0x00fd
0000C4D8 13 97 05 70        	        r3=[P_IO_Control_Data]
0000C4DA 50 A6              	        r3|=C_AOP_Pin
0000C4DB 60 A6              			r3|=C_RWP_Pin
0000C4DC 09 93 40 00        			r1=C_EP_Pin
0000C4DE 09 83 FF FF        			r1^=0xffff
0000C4E0 01 B7              	        r3&=r1
0000C4E1 1B D7 05 70        	        [P_IO_Control_Data]=r3
0000C4E3 40 F0 A3 C4        	        CALL F_Send_data                //Read Data
0000C4E5 13 97 00 70        	        R3 = [P_IO_Data_Data]               //Get it
                            	    .if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsl	4;
                            			R3	=	R3	lsl	4;		
                            		.endif 
0000C4E7 11 93 02 70        	        r1=[P_IO_Data_Dir]
0000C4E9 09 A3 00 FF        	   	 	r1|=C_DataBus
0000C4EB 19 D3 02 70        			[P_IO_Data_Dir]=r1
0000C4ED 90 9A              			retf
                            	        .endp    
                            	//////////////////////////////////////////////////////////////////////
                            	//input: r3
                            	//destory: r3
                            	//////////////////////////////////////////////////////////////////////
                            	.PUBLIC  		F_Display_point
                            	//_Display_point:		.proc
                            	F_Display_point:
0000C4EE 00 EE              			nop
0000C4EF 00 EE              			nop 
0000C4F0 88 D6              			push r3,r3 to[sp]
0000C4F1 13 97 00 70        			r3=[P_IO_Data_Data]
0000C4F3 0A 95 00 FF        			r2=C_DataBus
0000C4F5 0A 85 FF FF        			r2^=0xffff
0000C4F7 02 B7              			r3&=r2
                            		
0000C4F8 1B D7 00 70        			[P_IO_Data_Data]=r3
0000C4FA 88 94              			pop r3,r3 from [sp]
0000C4FB 5B 97              			r3=r3 lsl	0x04
0000C4FC 5B 97              			r3=r3 lsl	0x04 
                            	//        R3 |= 0x00f4;           	//Write data
                            		.if	C_BusHighLow
                            		.else
                            			R3	=	R3	lsr	4;
                            			R3	=	R3	lsr	4;		
                            		.endif
0000C4FD 13 A7 00 70        			r3|=[P_IO_Data_Data]
0000C4FF 1B D7 00 70        	        [P_IO_Data_Data]=r3
0000C501 13 97 05 70        	        r3=[P_IO_Control_Data]
0000C503 50 A6              	        r3|=C_AOP_Pin			//0x2000
0000C504 1B D7 05 70        	        [P_IO_Control_Data]=r3
0000C506 40 F0 A3 C4        	        CALL F_Send_data
0000C508 90 9A              	        retf    
                            	//////////////////////////////////////////////////////////////////////////////
                            	//Filename : F_Init_IO
                            	//Function : Intialize I/O 
                            	//Input    : None
                            	//Output   : None
                            	//Destory  : R1
                            	//////////////////////////////////////////////////////////////////////////////
                            	.public		F_Init_IO
                            	.public		_Init_IO
                            	_Init_IO:
                            	F_Init_IO:		.proc
                            		
0000C509 11 93 02 70        	    r1=[P_IO_Data_Dir]
0000C50B 09 A3 00 FF        	    r1|=C_DataBus
0000C50D 19 D3 02 70        		[P_IO_Data_Dir]=r1
0000C50F 11 93 03 70        		r1=[P_IO_Data_Attrib]					
0000C511 09 A3 00 FF        		r1|=C_DataBus
0000C513 19 D3 03 70        		[P_IO_Data_Attrib]=r1				
0000C515 11 93 00 70        		r1=[P_IO_Data_Data]
0000C517 0A 95 00 FF        		r2=C_DataBus
0000C519 0A 85 FF FF        		r2^=0xffff
0000C51B 02 B3              		r1&=r2
0000C51C 19 D3 00 70        		[P_IO_Data_Data]=r1					//Initial porta
                            		
0000C51E 11 93 07 70        		r1=[P_IO_Control_Dir]
0000C520 50 A2              		r1|=C_AOP_Pin
0000C521 09 A3 40 00        		r1|=C_EP_Pin
0000C523 60 A2              		r1|=C_RWP_Pin
0000C524 19 D3 07 70        		[P_IO_Control_Dir]=r1					
0000C526 12 95 08 70        		r2=[P_IO_Control_Attrib]
0000C528 01 A5              		r2|=r1
0000C529 1A D5 08 70        		[P_IO_Control_Attrib]=r2				
0000C52B 12 95 05 70        		r2=[P_IO_Control_Data]
0000C52D 09 83 FF FF        		r1^=0xffff
0000C52F 01 B5              		r2&=r1
0000C530 19 D3 05 70        		[P_IO_Control_Data]=r1	
0000C532 90 9A              	    RETF
                            		.endp
0 error(s), 0 warning(s).

