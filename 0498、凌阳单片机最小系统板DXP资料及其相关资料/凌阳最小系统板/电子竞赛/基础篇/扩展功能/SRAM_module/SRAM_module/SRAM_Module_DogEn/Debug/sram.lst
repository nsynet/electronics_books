Sunplus u'nSP Assembler - Ver. 1.8.0
              Listing File Has Been Relocated
                            	//==============================================================================================================
                            	// 文件名称:   sram.asm
                            	// 功    能：  完成对HM628128A的读写初始化、以及读写数据操作。
                            	// 库 函 数：  NONE
                            	// 日    期:   2003-07-07
                            	//==============================================================================================================
                            	.INCLUDE hardware.inc
                     <      	//========================================================================================
                     <      	// Progarm: The file be included by modules
                     <      	// Arranged by: Andy Hsu
                     <      	// Date: 	2000/06/23: first version
                     <      	//		2000/07/24: modified
                     <      	//		2000/10/20: modified for version 52A chip sacmv25.lib
                     <      	//		2001/10/07: modified for sacmv25f.lib
                     <      	// 		2001/11/06: Independent Queue for A2000/S480/MS01 Manual Mode
                     <      	//		2001/11/06: Fix volume parameter problem - sacmv25i.lib
                     <      	//
                     <      	// For: sacmV25n.lib
                     <      	//
                     <      	//========================================================================================
                     <      	
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Definitions for I/O Port
                     <      	//////////////////////////////////////////////////////////////////
                     <      	.DEFINE	P_IOA_Data   		0x7000         // Write Data into data register and read from IOA pad
                     <      	.DEFINE P_IOA_Buffer        0x7001         // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOA_Dir           0x7002         // Direction vector for IOA
                     <      	.DEFINE P_IOA_Attrib        0x7003         // Attribute vector for IOA
                     <      	.DEFINE P_IOA_Latch         0x7004         // Latch PortA data for key change wake-up
                     <      	
                     <      	.DEFINE P_IOB_Data         	0x7005         // Write Data into the data register and read from IOB pad
                     <      	.DEFINE P_IOB_Buffer        0x7006         // Write Data into buffer register and read from buffer register
                     <      	.DEFINE P_IOB_Dir           0x7007         // Direction vector for IOB
                     <      	.DEFINE P_IOB_Attrib        0x7008         // Attribute vector for IOB
                     <      	
                     <      	.DEFINE P_FeedBack          0x7009         // Clock form external R,C
                     <      	.DEFINE P_TimerA_Data       0x700A         // Data port for TimerA 
                     <      	.DEFINE P_TimerA_Ctrl       0x700B         // Control Port for TimerA
                     <      	.DEFINE P_TimerB_Data       0x700C         // Data port for TimerB
                     <      	.DEFINE P_TimerB_Ctrl       0x700D         // Control Port for TimerB
                     <      	.DEFINE P_TimeBase_Setup    0x700E         // TimerBase Freq. Set
                     <      	.DEFINE P_TimeBase_Clear	0x700F 		   // Reset Timerbase counter
                     <      	.DEFINE P_INT_Ctrl          0x7010         // Control port for interrupt source
                     <      	.DEFINE P_INT_Clear         0x7011         // Clear interrupt source
                     <      	.DEFINE P_Watchdog_Clear    0x7012         // Watchdog Reset
                     <      	.DEFINE P_SystemClock       0x7013         // Change system clock frequency(include go to standby mode)
                     <      	
                     <      	//... PA6442 New version MC52A (For EC-03)....
                     <      	.DEFINE P_ADC 	        	0x7014         	// Data Port for AD
                     <      	.DEFINE P_ADC_Ctrl          0x7015         	// Control Port for AD control
                     <      	.DEFINE P_ADC_Status        0x7015         	// AD Port Status
                     <      	.DEFINE P_DAC2              0x7016         	// Data Port for DAC2
                     <      	.DEFINE P_PWM               0x7016         	// Data Port for PWM
                     <      	.DEFINE P_DAC1	        	0x7017         	// Data Port for DAC1
                     <      	.DEFINE P_DAC_Ctrl			0x702A 			// Control Port for two DAC and audio output mode
                     <      	//............................................
                     <      	
                     <      	.DEFINE P_IR_Ctrl			0x7018 			// Control Port for IR
                     <      	.DEFINE P_LVD_Ctrl          0x7019         	// Control Port for LVD
                     <      	.DEFINE P_SIO_Data			0x701A 			// Data port for serial IO
                     <      	.DEFINE P_SIO_Addr_Low		0x701B 			// Address Port low
                     <      	.DEFINE P_SIO_Addr_Mid		0x701C 			// Address Port middle
                     <      	.DEFINE P_SIO_Addr_High	 	0x701D 			// Address Port high
                     <      	.DEFINE P_SIO_Ctrl			0x701E 			// Control Port
                     <      	.DEFINE P_SIO_Start			0x701F 			// Start port for serial interface
                     <      	.DEFINE P_SIO_Stop			0x7020 			// Stop port for serial interface
                     <      	
                     <      	.DEFINE P_UART_Command1		 0x7021 		// Command1 Port for UART
                     <      	.DEFINE P_UART_Command2		 0x7022 		// Command2 Port for UART
                     <      	.DEFINE P_UART_Data			 0x7023  		// Data Port for UART
                     <      	.DEFINE	P_UART_BaudScalarLow 0x7024 		// Set Baud Rate scalar low
                     <      	.DEFINE	P_UART_BaudScalarHigh 0x7025 		// Set Baud Rate scalar high
                     <      	
                     <      	
                     <      	//... Definitions for P_INT_Ctrl ..............
                     <      	.DEFINE C_IRQ6_TMB2             0x0001         	// Timer B IRQ6
                     <      	.DEFINE C_IRQ6_TMB1             0x0002         	// Timer A IRQ6
                     <      	.DEFINE C_IRQ5_2Hz              0x0004         	// 2Hz IRQ5
                     <      	.DEFINE C_IRQ5_4Hz              0x0008         	// 4Hz IRQ5
                     <      	.DEFINE C_IRQ4_1KHz             0x0010         	// 1024Hz IRQ4
                     <      	.DEFINE C_IRQ4_2KHz             0x0020         	// 2048Hz IRQ4
                     <      	.DEFINE C_IRQ4_4KHz             0x0040         	// 4096Hz IRQ4
                     <      	.DEFINE C_IRQ3_KEY              0x0080         	// Key Change IRQ3
                     <      	.DEFINE C_IRQ3_EXT1             0x0100         	// Ext1 IRQ3
                     <      	.DEFINE C_IRQ3_EXT2             0x0200         	// Ext2 IRQ3
                     <      	.DEFINE C_IRQ2_TMB              0x0400         	// Timer B IRQ2
                     <      	.DEFINE C_FIQ_TMB               0x0800         	// Timer B FIQ
                     <      	.DEFINE C_IRQ1_TMA              0x1000         	// Timer A IRQ1
                     <      	.DEFINE C_FIQ_TMA               0x2000         	// Timer A FIQ
                     <      	.DEFINE C_IRQ0_PWM              0x4000         	// PWM IRQ0
                     <      	.DEFINE C_FIQ_PWM               0x8000         	// PWM FIQ
                     <      	
                     <      	// Definitions for P_TimerA/B_Ctrl ............                               
                     <      	.DEFINE	C_Fosc_2				0x0000 			// 
                     <      	.DEFINE	C_Fosc_256		    	0x0001 			//
                     <      	.DEFINE	C_32768Hz				0x0002 			//
                     <      	.DEFINE	C_8192Hz				0x0003 			//
                     <      	.DEFINE	C_4096Hz				0x0004 			//
                     <      	.DEFINE	C_A1					0x0005 			//
                     <      	.DEFINE C_A0					0x0006 			//
                     <      	.DEFINE C_Ext1					0x0007 			//
                     <      	
                     <      	.DEFINE	C_2048Hz				0x0000 			//
                     <      	.DEFINE	C_1024Hz				0x0008 			//
                     <      	.DEFINE	C_256Hz					0x0010 			//
                     <      	.DEFINE	C_TMB1Hz				0x0018 			//
                     <      	.DEFINE	C_4Hz					0x0020 			//
                     <      	.DEFINE	C_2Hz					0x0028 			//
                     <      	.DEFINE	C_B1					0x0030 			//
                     <      	.DEFINE	C_Ext2					0x0038 			//
                     <      	
                     <      	.DEFINE	C_Off					0x0000 			//
                     <      	.DEFINE C_D1					0x0040 			//
                     <      	.DEFINE C_D2					0x0080 			//
                     <      	.DEFINE C_D3					0x00C0 			//
                     <      	.DEFINE C_D4					0x0100 			//
                     <      	.DEFINE C_D5					0x0140 			//
                     <      	.DEFINE C_D6					0x0180 			//
                     <      	.DEFINE C_D7					0x01C0 			//
                     <      	.DEFINE C_D8					0x0200 			//
                     <      	.DEFINE C_D9					0x0240 			//
                     <      	.DEFINE C_D10					0x0280 			//
                     <      	.DEFINE C_D11					0x02C0 			//
                     <      	.DEFINE C_D12					0x0300 			//
                     <      	.DEFINE C_D13					0x0340 			//
                     <      	.DEFINE C_D14					0x0380 			//
                     <      	.DEFINE C_TA_Div_2				0x03C0 			// Timer A
                     <      	.DEFINE C_TB_Div_2				0x03C0 			// Timer B
                     <      	
                     <      	//... Definition for P_SystemClock ............
                     <      	.DEFINE C_Fosc					0x0000 			// b3..b0
                     <      	.DEFINE C_Fosc_Div_2			0x0001 			//
                     <      	.DEFINE C_Fosc_Div_4			0x0002 			//
                     <      	.DEFINE C_Fosc_Div_8			0x0003 			// (default)
                     <      	.DEFINE C_Fosc_Div_16			0x0004 			//
                     <      	.DEFINE C_Fosc_Div_32			0x0005 			//
                     <      	.DEFINE C_Fosc_Div_64			0x0006 			//
                     <      	.DEFINE C_Sleep					0x0007 		 	//
                     <      	
                     <      	.DEFINE	C_32K_Work				0x0000 			// b4
                     <      	.DEFINE C_32K_Off				0x0000 			// 
                     <      	.DEFINE C_StrongMode			0x0000 			// b5
                     <      	.DEFINE C_AutoMode				0x0000 			//
                     <      	
                     <      	//... Define for P_AD_Ctrl ....................
                     <      	.DEFINE	C_AD					0x0001 			//
                     <      	.DEFINE C_DA					0x0000 			//
                     <      	.DEFINE C_MIC					0x0000 			//
                     <      	.DEFINE C_LINE					0x0002 			//
                     <      	
                     <      	//... Define for P_DA_Ctrl ....................
                     <      	.DEFINE C_PushPull				0x0000 			// b0, (default) 
                     <      	.DEFINE C_DoubleEnd				0x0001 			// b0
                     <      	.DEFINE	C_DAC_Mode				0x0000 			// b1, (default)
                     <      	.DEFINE C_PWM_Mode				0x0002 			// b1
                     <      	
                     <      	.DEFINE	C_D1_Direct				0x0000 			// DAC1 latch
                     <      	.DEFINE C_D1_LatchA				0x0008 			// 
                     <      	.DEFINE C_D1_LatchB				0x0010 			//
                     <      	.DEFINE C_D1_LatchAB			0x0018 			//
                     <      	
                     <      	.DEFINE	C_D2_Direct				0x0000 			// DAC2 latch
                     <      	.DEFINE C_D2_LatchA				0x0020 			// 
                     <      	.DEFINE C_D2_LatchB				0x0040 			//
                     <      	.DEFINE C_D2_LatchAB			0x00C0 			//
                     <      	
                     <      	//... Define for P_LVD_Ctrl ...................
                     <      	.DEFINE C_LVD24V				0x0000 			// LVD = 2.4V 
                     <      	.DEFINE C_LVD28V				0x0001 			// LVD = 2.8V
                     <      	.DEFINE C_LVD32V				0x0002 			// LVD = 3.2V
                     <      	.DEFINE C_LVD36V				0x0003 			// LVD = 3.6V
                     <      	
                     <      	//////////////////////////////////////////////////
                     <      	// Note: This register will map to the P_INT_Ctrl
                     <      	//	(0x7010), The SACMvxx.lib use this register to
                     <      	//	combine with user's interrupt setting
                     <      	//////////////////////////////////////////////////
                     <      	.EXTERNAL	R_InterruptStatus 
                     <      	//////////////////////////////////////////////////
                     <      	
                     <      	
                     <      	.EXTERNAL 	F_SP_RampUpDAC1
                     <      	.EXTERNAL 	F_SP_RampDnDAC1
                     <      	.EXTERNAL 	F_SP_RampUpDAC2
                     <      	.EXTERNAL 	F_SP_RampDnDAC2
                     <      	
                     <      	.EXTERNAL 	F_SP_InitQueue
                     <      	.EXTERNAL 	F_SP_InitQueue_A2000
                     <      	.EXTERNAL 	F_SP_InitQueue_S480
                     <      	.EXTERNAL 	F_SP_InitQueue_S240
                     <      	.EXTERNAL 	F_SP_InitQueue_MS01
                     <      	.EXTERNAL 	F_SP_InitQueue_DVR
                     <      	
                     <      	.EXTERNAL 	F_SP_ReadQueue
                     <      	.EXTERNAL 	F_SP_ReadQueue_A2000
                     <      	.EXTERNAL 	F_SP_ReadQueue_S480
                     <      	.EXTERNAL 	F_SP_ReadQueue_S240
                     <      	.EXTERNAL 	F_SP_ReadQueue_MS01
                     <      	.EXTERNAL 	F_SP_ReadQueue_DVR
                     <      	
                     <      	.EXTERNAL 	F_SP_WriteQueue
                     <      	.EXTERNAL 	F_SP_WriteQueue_A2000
                     <      	.EXTERNAL 	F_SP_WriteQueue_S480
                     <      	.EXTERNAL 	F_SP_WriteQueue_S240
                     <      	.EXTERNAL 	F_SP_WriteQueue_MS01
                     <      	.EXTERNAL 	F_SP_WriteQueue_DVR
                     <      	
                     <      	.EXTERNAL 	F_SP_TestQueue
                     <      	.EXTERNAL 	F_SP_TestQueue_A2000
                     <      	.EXTERNAL 	F_SP_TestQueue_S480
                     <      	.EXTERNAL 	F_SP_TestQueue_S240
                     <      	.EXTERNAL 	F_SP_TestQueue_MS01
                     <      	.EXTERNAL 	F_SP_TestQueue_DVR
                     <      	
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC		// Read queue with no index change
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_A2000
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_S480
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_S240
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_MS01
                     <      	.EXTERNAL	F_SP_ReadQueue_NIC_DVR
                     <      	
                     <      	
                     <      	.EXTERNAL	F_SP_SACM_A2000_Init_
                     <      	.EXTERNAL	F_SP_SACM_S480_Init_
                     <      	.EXTERNAL	F_SP_SACM_S240_Init_
                     <      	
                     <      	.EXTERNAL	F_SP_SACM_MS01_Init_
                     <      	.EXTERNAL	F_SP_PlayMode0_
                     <      	.EXTERNAL	F_SP_PlayMode1_
                     <      	.EXTERNAL	F_SP_PlayMode2_
                     <      	.EXTERNAL	F_SP_PlayMode3_
                     <      	
                     <      	.EXTERNAL	F_SP_SACM_DVR_Init_
                     <      	.EXTERNAL 	F_SP_SACM_DVR_Rec_Init_
                     <      	.EXTERNAL 	F_SP_SACM_DVR_Play_Init_
                     <      	
                     <      	.EXTERNAL	F_SP_GetResource
                     <      	
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Reserve old defintion
                     <      	// Note: Some user who use old library may use the old name
                     <      	//////////////////////////////////////////////////////////////////
                     <      	.EXTERNAL	F_SP_Send_PWM					// Get RAW data 
                     <      	.EXTERNAL	F_SP_Send_DAC1 					// 
                     <      	.EXTERNAL	F_SP_Send_DAC2 					//
                     <      	
                     <      	.EXTERNAL	F_STD_Send_DAC1 				// reserved old
                     <      	.EXTERNAL	F_STD_Send_DAC2 				// reserved old
                     <      	
                     <      	.EXTERNAL 	F_RampUpDAC1					// reserved old
                     <      	.EXTERNAL 	F_RampDnDAC1					// reserved old
                     <      	.EXTERNAL 	F_RampUpDAC2					// reserved old
                     <      	.EXTERNAL  	F_RampDnDAC2					// reserved old
                     <      	///////////////////////////////////////////////////////////////////
                     <      	
                     <      	
                     <      		
                     <      	//========================================================================================        
                     <      	// End of hardware.inc
                     <      	//========================================================================================
00000000                    	.RAM 
                            	.PUBLIC  HighAddr      
00000000 00 00              	.VAR  HighAddr
                            	
00008026                    	.CODE
                            	//**************************************************************************************************************
                            	// 函数: SP_InitWriteSRAM
                            	// 语法：void SP_InitWriteSRAM(void) (for c language)
                            	// 功能：写SRAM初始化,不改变IOA0~IOA3的端口属性
                            	// 入口：无
                            	// 出口：无
                            	//**************************************************************************************************************
                            	.PUBLIC _SP_InitWriteSRAM
                            	.PUBLIC F_SP_InitWriteSRAM 
                            	_SP_InitWriteSRAM:         .PROC
                            	F_SP_InitWriteSRAM:
00008026 88 D2              			PUSH r1 TO [sp]
                            			
00008027 11 93 02 70        			r1=[P_IOA_Dir]		// IOA8---IOA15 接数据线，写入时设置为同相高电平输出
00008029 09 A3 F0 FF        			r1|=0xFFF0;			// IOA4--IOA6 接SRAM控制线(IOA4＝WE_N,IOA5=OE_N,IOA6=CS_N)，设为同相高电平输出.
0000802B 09 B3 FF FF        			r1&=0xFFFF;			// IOB15--IOB0 接SRAM地址线(A0-A15)，设置为同相高电平输出
0000802D 19 D3 02 70        			[P_IOA_Dir]=r1 		
                            			
0000802F 11 93 03 70        	   		r1=[P_IOA_Attrib];
00008031 09 A3 F0 FF        			r1|=0xFFF0;
00008033 09 B3 FF FF        			r1&=0xFFFF;
00008035 19 D3 03 70        	        [P_IOA_Attrib]=r1  	
                            	       
00008037 11 93 01 70        	        r1=[P_IOA_Buffer] 
00008039 09 A3 F0 FF        	        r1|=0xFFF0;
0000803B 09 B3 FF FF        			r1&=0xFFFF;
0000803D 19 D3 01 70        			[P_IOA_Buffer]=r1;
                            			
0000803F 09 93 FF FF        	        r1 = 0xFFFF 		 //IOB15--IOB0 接SRAM地址线，设置为同相高电平输出
00008041 19 D3 07 70        	        [P_IOB_Dir] = r1     	
00008043 19 D3 08 70        	        [P_IOB_Attrib] = r1  
00008045 19 D3 05 70        	        [P_IOB_Data] = r1     
                            	         
00008047 88 90              	        POP r1 FROM [sp]
00008048 90 9A              	        RETF 
                            	        .ENDP
                            	
                            	//**************************************************************************************************************
                            	// 函数: SP_InitReadSRAM
                            	// 语法：void SP_InitReadSRAM(void) (for c language)
                            	// 功能：读SRAM初始化,不改变IOA0~IOA3的端口属性
                            	// 入口：无
                            	// 出口：无
                            	//**************************************************************************************************************
                            	
                            	.PUBLIC F_SP_InitReadSRAM 
                            	.PUBLIC _SP_InitReadSRAM 
                            	_SP_InitReadSRAM:          .PROC
                            	F_SP_InitReadSRAM:
00008049 88 D2              			PUSH r1 TO [sp]
                            		
0000804A 11 93 02 70        			r1=[P_IOA_Dir]		// IIOA8---IOA15 接数据线，读出时设置为带下拉电阻的输入
0000804C 09 A3 F0 00        			r1|=0x00F0;			// IOA4--IOA6 接SRAM控制线(IOA4＝WE_N,IOA5=OE_N,IOA6=CS_N)，设为同相高电平输出.
0000804E 09 B3 FF 00        			r1&=0x00FF;			// IOB15--IOB0 接SRAM地址线(A0-A15)，设置为同相高电平输出
00008050 19 D3 02 70        			[P_IOA_Dir]=r1 		
                            			
00008052 11 93 03 70        	   		r1=[P_IOA_Attrib];
00008054 09 A3 F0 00        			r1|=0x00F0;
00008056 09 B3 FF 00        			r1&=0x00FF;
00008058 19 D3 03 70        	        [P_IOA_Attrib]=r1  	
                            	       
0000805A 11 93 01 70        	        r1=[P_IOA_Buffer]   
0000805C 09 A3 F0 00        	        r1|=0x00F0;
0000805E 09 B3 FF 00        			r1&=0x00FF;
00008060 19 D3 01 70        			[P_IOA_Buffer]=r1;
                            			
00008062 09 93 FF FF        	        r1 = 0xFFFF 		//IOB15--IOB0 接SRAM地址线，设置为同相高电平输出
00008064 19 D3 07 70        	        [P_IOB_Dir] = r1     	
00008066 19 D3 08 70        	        [P_IOB_Attrib] = r1  
00008068 19 D3 05 70        	        [P_IOB_Data] = r1     
                            	        
0000806A 88 90              	        POP r1 FROM [sp]
0000806B 90 9A              	        RETF 
                            	        .ENDP
                            	//**************************************************************************************************************
                            	// 函 数: SP_ReadSRAM
                            	// 语 法：unsigned int SP_ReadSRAM(unsigned long Addr) (for c language)
                            	// 功 能：读SRAM,不改变IOA0~IOA3的端口属性
                            	// 参 数：Addr:SRAM的17位地址,参数通过堆栈传递
                            	// 返 回：r1：16位数据，低8bits为低地址的存储单元内容,高8bits为高地址的存储单元内容
                            	//**************************************************************************************************************
                            	.PUBLIC _SP_ReadSRAM 
                            	_SP_ReadSRAM:     .PROC
0000806C A0 DA              	        PUSH r2,r5 TO [sp]
0000806D 08 0B 01 00        	        bp = sp + 1 
0000806F 06 92              	        r1 = [bp+6]         	// SRAM 地址低位 A15---A0
00008070 07 94              	        r2 = [bp+7]         	// SRAM 地址高位 A16
00008071 02 5E              	        JZ   L_Read_Low_Addr
00008072 0A 95 80 00        	        r2 = 0x0080         	// IOA7接A16
                            	 L_Read_Low_Addr:
00008074 1A D5 00 00        	        [HighAddr]=r2
00008076 40 F0 7A 80        	        call	F_SP_ReadSRAM	//读子程序  r1: 返回数据值
00008078 A0 92              	        POP r2,r5 FROM [sp] 
00008079 90 9A              	        RETF 
                            	        .ENDP
                            	
                            	//**************************************************************************************************************
                            	// 函 数: F_SP_ReadSRAM
                            	// 语 法：call SP_ReadSRAM (for Assembly language)
                            	// 功 能：从SRAM中读取一个WORD数据，不改变IOA0~IOA3的端口属性
                            	// 参 数：r1:低16位地址,[HighAddr]：高1位地址
                            	// 返 回：r1：16位数据（说明：由于HM628128A的数据宽度为8位，一个WORD数据分两次读出，先读低8位，再读高8位
                            	//**************************************************************************************************************              
                            	.PUBLIC F_SP_ReadSRAM
                            	F_SP_ReadSRAM:
0000807A 98 D8              	        PUSH r2,r4 TO [sp]
                            	        
0000807B 13 97 01 70        	        r3=[P_IOA_Buffer]
0000807D 13 A7 00 00        	        r3|=[HighAddr]          //IOA7接地址 A16
0000807F 0B A7 70 00        	        r3|=0x0070              //IOA4接we,IOA5接oe,IOA6接cs，它们低电平有效
00008081 1B D7 01 70        	        [P_IOA_Buffer] = r3 
                            	        
00008083 19 D3 06 70        	        [P_IOB_Buffer] = r1     //地址A15---A0
00008085 01 99              	        r4 = r1                 
                            	        
00008086 13 97 01 70        	        r3=[P_IOA_Buffer]
00008088 13 A7 00 00        	        r3|=[HighAddr]          //A16
0000808A 50 A6              	        r3|=0x0010              //读允许设置
0000808B 0B B7 9F FF        	        r3&=0xFF9F
0000808D 1B D7 01 70        	        [P_IOA_Buffer] = r3     //CE_N=IOB6=0, OE_N=IOB5=0, WE_N=IOB4=1
                            	 
0000808F 11 93 00 70        	        r1 = [P_IOA_Data]       //读数据
00008091 11 93 00 70        	        r1 = [P_IOA_Data]        
00008093 79 93              	        r1 = r1 lsr 4           //将数据移入低8位
00008094 79 95              	        r2 = r1 lsr 4            
                            	        
00008095 13 97 01 70        	        r3=[P_IOA_Buffer]
00008097 70 A6              	        r3 |= 0x0030            //CE_N=IOB6=0, OE_N=IOB5=1, WE_N=IOB4=1
00008098 0B B7 BF FF        	        r3&=0xFFBF;
0000809A 1B D7 01 70        	        [P_IOA_Buffer] = r3     
                            	       
0000809C 41 08              	        r4 += 1         
0000809D 1C D9 06 70        	        [P_IOB_Buffer] = r4     //下一字节
                            	        
0000809F 13 97 01 70        	        r3=[P_IOA_Buffer]
000080A1 13 A7 00 00        	        r3|=[HighAddr]          //A16
000080A3 50 A6              	        r3|=0x0010 
000080A4 0B B7 9F FF        	        r3&=0xFF9F;
000080A6 1B D7 01 70        	        [P_IOA_Buffer] = r3     //CS_N=IOB6=0, OE_N=IOB5=0, WE_N=IOB4=1 
                            	
000080A8 11 93 00 70        	        r1 = [P_IOA_Data]       //读数据/////////////////////////////////
000080AA 11 93 00 70        	        r1 = [P_IOA_Data]        
000080AC 09 B3 00 FF        	        r1 = r1 & 0xFF00        //高8位数据
000080AE 02 A3              	        r1 |= r2                //返回一个字数据
000080AF 0B A7 70 00        	        r3 |= 0x0070 
000080B1 1B D7 01 70        	        [P_IOA_Buffer]=r3       //CS_N=IOB6=1, OE_N=IOB5=1, WE_N=IOB4=1 
000080B3 98 92              			POP r2,r4 FROM [sp]      
000080B4 90 9A              	        RETF 
                            	
                            	//**************************************************************************************************************
                            	// 函 数: SP_WriteSRAM
                            	// 语 法：void SP_WriteSRAM(unsigned long Addr,unsigned int uiWriteRamData) (for c language)
                            	// 功 能：读向SRAM中写入一个WORD数据,不改变IOA0~IOA3的端口属性
                            	// 参 数：Addr:SRAM的17位地址,参数通过堆栈传递; uiWriteRamData:为要写入SRAM的数据（一个字长度）
                            	// 返 回：无
                            	//**************************************************************************************************************
                            	.PUBLIC _SP_WriteSRAM 
                            	_SP_WriteSRAM: .PROC
000080B5 A8 DA              	        PUSH r1,r5 TO [sp] 
                            	        
000080B6 08 0B 01 00        	        bp = sp + 1 
000080B8 07 92              	        r1 = [bp+7]                // SRAM 地址低8位
000080B9 08 94              	        r2 = [bp+8]                // SRAM 地址高1位
000080BA 02 5E              	        JZ    Write_Low_Addr
000080BB 0A 95 80 00        	        r2 = 0x0080        
                            	 Write_Low_Addr:
000080BD 1A D5 00 00        	        [HighAddr]=r2
000080BF 09 94              	        r2 = [bp+9]                //待写入的一个WORD数据
000080C0 40 F0 C4 80        	        call	F_SP_WriteSRAM    //调用写入子程序
000080C2 A8 90              	        POP r1,r5 FROM [sp] 
000080C3 90 9A              	        RETF 
                            	        .ENDP
                            	
                            	//**************************************************************************************************************
                            	// 函 数: F_SP_WriteSRAM
                            	// 语 法：call F_SP_WriteSRAM (for Assembly language)
                            	// 功 能：写一个WORD数据到SRAM，不改变IOA0~IOA3的端口属性
                            	// 参 数：r1:低16位地址;[HighAddr]：高1位地址;r2:待写入的一个WORD数据
                            	// 返 回：r1：16位数据（说明：由于HM628128A的数据宽度为8位，一个WORD数据分两次写入，先写低8位，再写高8位)
                            	//************************************************************************************************************** 
                            	.PUBLIC F_SP_WriteSRAM
                            	F_SP_WriteSRAM:
000080C4 A8 DA              	        PUSH r1,r5 TO [sp]
                            	        
000080C5 13 97 01 70        	        r3=[P_IOA_Buffer];
000080C7 4F B6              	        r3&=0x000F;
000080C8 13 A7 00 00        	        r3|=[HighAddr]         //地址 A16
000080CA 0B A7 70 00        	        r3|=0x0070
000080CC 1B D7 01 70        	        [P_IOA_Buffer] = r3 
                            	        
000080CE 19 D3 05 70        	        [P_IOB_Data] = r1       //低位地址 A15---A0
000080D0 02 97              	        r3 = r2                 //存待写入数据
000080D1 5A 95              	        r2 = r2 lsl 4           //低字节，将低8位移到高8位（数据线是IOA15---IOA8）
000080D2 5A 95              	        r2 = r2 lsl 4           
                            	
000080D3 14 99 01 70        	        r4=[P_IOA_Buffer]
000080D5 0C B9 FF 00        	        r4&=0x00FF;
000080D7 04 A5              	        r2|=r4;
000080D8 60 A4              	        r2|=0x0020              //CS_N=IOB6=0, OE_N=IOB5=1, WE_N=IOB4=0 ,写允许
000080D9 0A B5 AF FF        	        r2&=0xFFAF;
000080DB 12 A5 00 00        	        r2|=[HighAddr] 
000080DD 1A D5 01 70        	        [P_IOA_Buffer] = r2     //写数据
                            	        
000080DF 50 A4              	        r2 |=0x0010             //CE_N=IOB6=0,OE_N=IOB5=1, WE_N=IOB4=1,
000080E0 1A D5 01 70        	        [P_IOA_Buffer] = r2     
                            	
000080E2 41 02              	        r1 += 1; 
000080E3 19 D3 05 70        	        [P_IOB_Data] = r1;      //高字节
                            			
000080E5 12 95 01 70        			r2=[P_IOA_Buffer];
000080E7 0A B5 FF 00        	        r2&=0x00FF;
000080E9 0B B7 00 FF        	        r3&=0xFF00;
000080EB 02 A7              	        r3|=r2; 
000080EC 60 A6              	        r3|=0x0020;            //CE_N=IOB6=0,OE_N=IOB5=1 ,WE_N=IOB4=0
000080ED 0B B7 AF FF        	        r3&=0xFFAF;
000080EF 13 A7 00 00        	        r3|=[HighAddr] 
000080F1 1B D7 01 70        	        [P_IOA_Buffer] = r3     //写数据 
                            	       
000080F3 0B A7 70 00        	        r3 |= 0x0070 
000080F5 1B D7 01 70        	        [P_IOA_Buffer] = r3     //CE_N=1, OE_N=1, WE_N=1
000080F7 A8 90              	        POP r1,r5 FROM [sp]
000080F8 90 9A              	        RETF 
                            	//========================================================================================        
                            	// End of sram.asm
                            	//========================================================================================
                            	     
0 error(s), 0 warning(s).


