Sunplus u'nSP Assembler - Ver. 1.14.3.1
              Listing File Has Been Relocated
                            	//==========================================================
                            	//文件名称:TNRFDriver.asm
                            	//功能描述:驱动函数
                            	//维护记录 2005.12.2 v1.0
                            	//==========================================================
                            	.define	P_IOA_Data 				0x7000   
                            	.define P_IOA_Buffer 			0x7001
                            	.define P_IOA_Dir 				0x7002
                            	.define P_IOA_Attrib 			0x7003
                            	.define P_IOA_Latch 			0x7004
                            	//............................................
                            	.define P_IOB_Data				0x7005  
                            	.define P_IOB_Buffer			0x7006   
                            	.define P_IOB_Dir				0x7007   
                            	.define P_IOB_Attrib			0x7008   
                            	//............................................
                            	.define P_Watchdog_Clear		0x7012   
                            	
                            	//=====================定义红外模块的控制口======================
                            	.define TN_ACK		0x2000             
                            	.define TN_Data		0x8000
                            	.define TN_Clk		0x4000
                            	.define TN_ACK_N	0xdfff
                            	.define TN_Data_N	0x7fff
                            	.define TN_Clk_N	0xbfff
                            	
                            	//=====================//define the port========================
                            	//如果使用IOA口，用下面程序-------------------------------------
                            	.define IO_Port			P_IOA_Data				
                            	.define IO_Port_Dir		P_IOA_Dir
                            	.define IO_Port_Attrib	P_IOA_Attrib
                            	.define IO_Port_Buffer	P_IOA_Buffer
                            	//如果使用IOB口，用下面程序-------------------------------------
                            	//.define IO_Port			P_IOB_Data				
                            	//.define IO_Port_Dir		P_IOB_Dir
                            	//.define IO_Port_Attrib	P_IOB_Attrib
                            	//.define IO_Port_Buffer	P_IOB_Buffer
                            	
                            	.public _TN_Data_Buff
000001A4                    	.ram
000001A4 FF FF FF FF        	_TN_Data_Buff:.dw 3 dup(?)
         FF FF      
000001A7 00 00              	.var Data_Counter
                            	
00009291                    	.code
                            	//==========================================================================
                            	//	汇编格式：	_TN_InitalIO
                            	//	C格式：		void TN_InitalIO(void);
                            	//	实现功能：	红外模块初始化
                            	//	入口参数：	无
                            	//	出口参数：	无
                            	//	破坏寄存器：r1
                            	//==========================================================================
                            	.public _TN_InitalIO//配置引脚为下拉输入
                            	_TN_InitalIO:
00009291 88 DA              		push bp to [sp]
00009292 11 93 02 70        		r1 = [IO_Port_Dir]
00009294 09 B3 FF DF        		r1 &= TN_ACK_N
00009296 09 B3 FF 7F        		r1 &= TN_Data_N
00009298 09 B3 FF BF        		r1 &= TN_Clk_N
0000929A 19 D3 02 70        		[IO_Port_Dir] = r1            
0000929C 11 93 03 70        		r1 = [IO_Port_Attrib]
0000929E 09 A3 00 20        		r1 |= TN_ACK
000092A0 09 B3 FF 7F        		r1 &= TN_Data_N
000092A2 09 B3 FF BF        		r1 &= TN_Clk_N
000092A4 19 D3 03 70        		[IO_Port_Attrib] = r1
000092A6 11 93 01 70        		r1 = [IO_Port_Buffer]
000092A8 09 B3 FF DF        		r1 &= TN_ACK_N
000092AA 09 B3 FF 7F        		r1 &= TN_Data_N
000092AC 09 B3 FF BF        		r1 &= TN_Clk_N
000092AE 19 D3 00 70        		[IO_Port] = r1
000092B0 88 98              		pop bp from [sp]
000092B1 90 9A              		retf
                            	//==========================================================================
                            	//	汇编格式：	_TN_IRACK_EN
                            	//	C格式：		void TN_IRACK_EN(void);
                            	//	实现功能：	红外模块启动函数
                            	//	入口参数：	无
                            	//	出口参数：	无
                            	//	破坏寄存器：r1
                            	//==========================================================================
                            	.public _TN_IRACK_EN
                            	_TN_IRACK_EN:
000092B2 88 DA              		push bp to [sp]
000092B3 11 93 02 70        		r1 = [IO_Port_Dir]		        //启动TN
000092B5 09 A3 00 20        		r1 |= TN_ACK
000092B7 19 D3 02 70        		[IO_Port_Dir] = r1				//...end
000092B9 88 98              		pop bp from [sp]
000092BA 90 9A              		retf
                            	//==========================================================================
                            	//	汇编格式：	_TN_IRACK_UN
                            	//	C格式：		void TN_IRACK_UN(void);
                            	//	实现功能：	红外模块启动函数
                            	//	入口参数：	无
                            	//	出口参数：	无
                            	//	破坏寄存器：r1
                            	//==========================================================================	
                            	.public _TN_IRACK_UN
                            	_TN_IRACK_UN:
000092BB 88 DA              		push bp to [sp]
000092BC 11 93 02 70        		r1 = [IO_Port_Dir]		        //启动TN
000092BE 09 B3 FF DF        		r1 &= TN_ACK_N
000092C0 19 D3 02 70        		[IO_Port_Dir] = r1				//...end
000092C2 88 98              		pop bp from [sp]
000092C3 90 9A              		retf
                            	//==========================================================================
                            	//	汇编格式：	_TN_ReadData
                            	//	C格式：		int TN_ReadData(void);
                            	//	实现功能：	读测得数据
                            	//	入口参数：	无
                            	//	出口参数：	读到的三个字数据
                            	//	破坏寄存器：r1
                            	//==========================================================================	
                            	.public _TN_ReadData
                            	_TN_ReadData:
000092C4 88 DA              		push bp to [sp]
000092C5 68 94              		r2 = 40                  //读5个字节的数据
000092C6 0D 9B A4 01        		r5 = _TN_Data_Buff       //取缓冲区数据
                            	TN_Read_loop:
000092C8 41 92              		r1 = 0x0001
000092C9 19 D3 12 70        		[P_Watchdog_Clear] = r1
000092CB 11 93 00 70        		r1 = [IO_Port]            
000092CD 09 B3 00 40        		r1 &= TN_Clk             //检测时钟数据 
000092CF 48 4E              		jnz TN_Read_loop         //不为零时继续检测 
000092D0 11 93 00 70        		r1 = [IO_Port]           //为0时读一个bit数据，即检测到下跳沿
000092D2 09 B3 00 80        		r1 &= TN_Data            
000092D4 02 4E              		jnz TN_Read_Data_H       //不为0时转到TN_Read_Data_H
000092D5 40 92              		r1 = 0                   //返回数据0
000092D6 01 EE              		jmp TN_Read_Data_NN
                            	TN_Read_Data_H:
000092D7 41 92              		r1 = 1                    //返回数据1
                            	TN_Read_Data_NN:
                            	//	[r5++] = r1
000092D8 02 96              		r3 = [r5+2]               //第一个字数据处理
000092D9 43 97              		r3 = r3 lsl 1             //   
000092DA 01 A7              		r3 = r3|r1                //
000092DB 02 D6              		[r5+2] = r3    
000092DC 54 99              		r4 = r4 lsl 3
000092DD 01 96              		r3 = [r5+1]              //第二个字数据处理
000092DE 83 97              		r3 = r3 rol 1
000092DF 54 99              		r4 = r4 lsl 3
000092E0 01 D6              		[r5+1] = r3
000092E1 C5 96              		r3 = [r5]               //第三个字数据处理
000092E2 83 97              		r3 = r3 rol 1
000092E3 54 99              		r4 = r4 lsl 3
000092E4 C5 D6              		[r5] = r3
000092E5 41 24              		r2-=1
000092E6 01 4E              		jnz TN_Read_Wait       //40个bit数据没有读完转向TN_Read_Wait
000092E7 09 EE              		jmp TN_Read_Exit       //读完转向TN_Read_Exit
                            	TN_Read_Wait:
000092E8 41 92              		r1 = 0x0001
000092E9 19 D3 12 70        		[P_Watchdog_Clear] = r1
000092EB 11 93 00 70        		r1 = [IO_Port]        //检测时钟 
000092ED 09 B3 00 40        		r1 &= TN_Clk      
000092EF 68 4E              		jnz TN_Read_loop       //时钟不为0时转向TN_Read_loop
000092F0 49 EE              		jmp TN_Read_Wait
                            	TN_Read_Exit:
000092F1 00 EE              		nop
000092F2 00 EE              		nop
000092F3 88 98              		pop bp from [sp]
000092F4 90 9A              		retf
0 error(s), 0 warning(s).






























































































