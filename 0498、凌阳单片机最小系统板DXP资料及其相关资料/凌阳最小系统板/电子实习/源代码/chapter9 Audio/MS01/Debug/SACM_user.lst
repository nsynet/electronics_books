Sunplus u'nSP Assembler - Ver. 1.8.0
              Listing File Has Been Relocated
                            	//========================================================================================
                            	// Progarm: SACM_user.asm for MS01 V32
                            	// By: Arthur Shieh
                            	// Last modified date: 
                            	//      2002/09/29: V32:First release for SACM v32  
                            	//
                            	// Functions:
                            	// F_SACM_MS01_SongEvent	: Call back function for Song Notes events
                            	//
                            	// F_User_InitAdpcmData_Ch0	: Initialize ADPCM Ch0(in Assembly)
                            	// _User_InitAdpcmData_Ch0	: Initialize ADPCM Ch0(in C)
                            	// F_User_InitAdpcmData_Ch1	: Initialize ADPCM Ch1(in Assembly)
                            	// _User_InitAdpcmData_Ch1	: Initialize ADPCM Ch1(in C)
                            	//
                            	// F_USER_MS01_GetAdpcmData_Ch0	: Gets ADPCM data for Ch0 
                            	// F_USER_MS01_GetAdpcmData_Ch1	: Gets ADPCM data for Ch1 
                            	//
                            	// Note:1. In the demo, it shows a way to synchronize the song events with program events 
                            	//         The library calls the F_SACM_MS01_SongEvent when certain event takes place in 
                            	//         song. User can do corresponding actions according to the event type passed in.
                            	//========================================================================================
                            	.include spce.inc
                     <      	//========================================================================================
                     <      	// Program: Standard function definition V1.0
                     <      	// Arranged by: Arthur Shieh
                     <      	// Platform:  SPCE500A/060A/061A, IDE 1.63, Windows 2000
                     <      	//
                     <      	// Date: 	2002/10/31 V1.0 : first version
                     <      	//
                     <      	// Note: 1)This inc file defines the ports available for user to use SPCE series.
                     <      	//         The port setting constants is also included for users' convenience. 
                     <      	//       2)Naming rule:
                     <      	//         C : define constant 
                     <      	//         P : define I/O port
                     <      	//=======================================================================================
                     <      	
                     <      	//---------------------------------------------------------- 
                     <      	//CPU Type definition : User needs to modified this according to the body used
                     <      	//---------------------------------------------------------- 
                     <      	.define SPCE500A 0
                     <      	.define SPCE061A 1   // SPCE060A as well
                     <      	
                     <      	//.define BODY_TYPE SPCE500A	       // SPCE500A 
                     <      	.define BODY_TYPE SPCE061A	       // SPCE061A 
                     <      	//---------------------------------------------------------- 
                     <      	
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Define Area for I/O									
                     <      	//////////////////////////////////////////////////////////////////
                     <      	//PortA,PortB contain some special functions
                     <      	P_IOA_Data:			.VDEF  0x7000;		// Write Data into data register and read from IOA pad
                     <      	P_IOA_Buffer:   	.VDEF  0x7001;		// Write Data into buffer register and read from buffer register
                     <      	P_IOA_Dir:      	.VDEF  0x7002;     // Direction vector for IOA
                     <      	P_IOA_Attrib:   	.VDEF  0x7003;     // Attribute vector for IOA
                     <      	P_IOA_Latch:		.VDEF  0x7004;     // Latch PortA data for key change wake-up
                     <      	
                     <      	P_IOB_Data:         .VDEF  0x7005      // Write Data into the data register and read from IOB pad
                     <      	P_IOB_Buffer:       .VDEF  0x7006      // Write Data into buffer register and read from buffer register
                     <      	P_IOB_Dir:          .VDEF  0x7007      // Direction vector for IOB
                     <      	P_IOB_Attrib:       .VDEF  0x7008  	// Attribute vector for IOB
                     <      	
                     <      	P_FeedBack:     	.VDEF  0x7009;     // Clock form external R,C
                     <      	P_TimerA_Data:  	.VDEF  0x700A;     // Data port for TimerA 
                     <      	P_TimerA_Ctrl:  	.VDEF  0x700B;     // Control Port for TimerA
                     <      	P_TimerB_Data:  	.VDEF  0x700C;     // Data port for TimerB
                     <      	P_TimerB_Ctrl:  	.VDEF  0x700D;     // Control Port for TimerB
                     <      	P_TimeBase_Setup:  	.VDEF  0x700E;     // TimerBase Freq. Set
                     <      	P_TimeBase_Clear:  	.VDEF  0x700F;   	// Reset Timerbase counter
                     <      	P_INT_Ctrl:     	.VDEF  0x7010;     // for read INT flag(R)
                     <      	P_INT_Clear:    	.VDEF  0x7011;     // Clear interrupt source
                     <      	P_Watchdog_Clear:   .VDEF  0x7012;     // Watchdog Reset
                     <      	P_SystemClock:      .VDEF  0x7013;     // Change system clock frequency(include go to standby mode)
                     <      	
                     <      	P_ADC: 	        	.VDEF  0x7014;     // Data Port for AD
                     <      	P_ADC_Ctrl:    		.VDEF  0x7015;     // Control Port for AD control
                     <      	P_ADC_Status:   	.VDEF  0x7015;     // AD Port Status
                     <      	P_DAC2:         	.VDEF  0x7016;     // Data Port for DAC2
                     <      	P_PWM:          	.VDEF  0x7016;     // Data Port for PWM
                     <      	P_DAC1:	        	.VDEF  0x7017;     // Data Port for DAC1
                     <      	P_DAC_Ctrl:	    	.VDEF  0x702A;		// Control Port for two DAC and audio output mode
                     <      	
                     <      	P_LVD_Ctrl:     	.VDEF  0x7019;     // Control Port for LVD
                     <      	
                     <      	P_SIO_Data:	    	.VDEF  0x701A;		// serial interface IO	
                     <      	P_SIO_Addr_Low:  	.VDEF  0x701B;		// Address Port low
                     <      	P_SIO_Addr_Mid:  	.VDEF  0x701C;		// Address Port middle
                     <      	P_SIO_Addr_High:    .VDEF  0x701D;		// Address Port high
                     <      	P_SIO_Ctrl:    	    .VDEF  0x701E;		// Control Port
                     <      	P_SIO_Start:    	.VDEF  0x701F;		// Start port for serial interface
                     <      	P_SIO_Stop:     	.VDEF  0x7020;		// Stop port for serial interface
                     <      	
                     <      	P_UART_Command1:    .VDEF 	0x7021;		// Command1 Port for UART
                     <      	P_UART_Command2:    .VDEF 	0x7022;		// Command2 Port for UART
                     <      	P_UART_Data: 	    .VDEF 	0x7023; 	// Data Port for UART
                     <      	P_UART_BaudScalarLow:  .VDEF  	0x7024;		// Set Baud Rate scalar low
                     <      	P_UART_BaudScalarHigh: .VDEF  	0x7025;		// Set Baud Rate scalar high
                     <      	
                     <      	//SPCE061A new ports
                     <      	//----------------------------------------------
                     <      	.if BODY_TYPE == SPCE061A
                     <      	P_ADC_MUX_Ctrl:  	.VDEF  	0x702B		// Control Port
                     <      	P_ADC_LINEIN_Data:  .VDEF  	0x702C		// Line in data
                     <      	P_INT_Mask:         .VDEF   0x702D		//R/W INT enable/disable
                     <      	P_Flash_Ctrl:       .VDEF   0x7555		//Internal flash access enable/disable
                     <      	.endif
                     <      	//----------------------------------------------
                     <      	
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Define Area for constants									
                     <      	//////////////////////////////////////////////////////////////////
                     <      	// Define for P_INT_Ctrl 
                     <      	.DEFINE C_IRQ6_TMB2             0x0001;     //TMB2 IRQ6
                     <      	.DEFINE C_IRQ6_TMB1             0x0002;		//TMB1 IRQ6
                     <      	.DEFINE C_IRQ5_2Hz              0x0004;     //2Hz IRQ5
                     <      	.DEFINE C_IRQ5_4Hz              0x0008;     //4Hz IRQ5
                     <      	.DEFINE C_IRQ4_1KHz            	0x0010;     //1024Hz IRQ4
                     <      	.DEFINE C_IRQ4_2KHz            	0x0020;     //2048 IRQ4
                     <      	.DEFINE C_IRQ4_4KHz            	0x0040;     //4096 IRQ4
                     <      	.DEFINE C_IRQ3_KEY         		0x0080;     //Key Change IRQ3
                     <      	.DEFINE C_IRQ3_Ext1             0x0100;     //Ext1 IRQ3
                     <      	.DEFINE C_IRQ3_Ext2             0x0200;     //Ext2 IRQ3
                     <      	.DEFINE C_IRQ2_TMB            	0x0400;     //Timer B IRQ2
                     <      	.DEFINE C_FIQ_TMB           	0x0800;     //Timer B FIQ
                     <      	.DEFINE C_IRQ1_TMA            	0x1000;     //Timer A IRQ1
                     <      	.DEFINE C_FIQ_TMA            	0x2000;     //Timer A FIQ
                     <      	.DEFINE C_IRQ0_PWM              0x4000;     //PWM IRQ0
                     <      	.DEFINE C_FIQ_PWM               0x8000;     //PWM FIQ
                     <      	
                     <      	// Define for P_TimerA_Ctrl, P_TimerB_Ctrl                               
                     <      	.DEFINE	C_Timer_Fosc_2			0x0000;		// b0--b2: clock of source A
                     <      	.DEFINE	C_Timer_Fosc_256		0x0001;		//
                     <      	.DEFINE	C_Timer_32768Hz			0x0002;		//
                     <      	.DEFINE	C_Timer_8192Hz			0x0003;		//
                     <      	.DEFINE	C_Timer_4096Hz			0x0004;		//
                     <      	.DEFINE	C_Timer_A1				0x0005;		//
                     <      	.DEFINE C_Timer_A0				0x0006;		//
                     <      	.DEFINE C_Timer_Ext1			0x0007;		//
                     <      	
                     <      	.DEFINE	C_Timer_2048Hz			0x0000;		//b3--b5: clock of source B
                     <      	.DEFINE	C_Timer_1024Hz			0x0008;		//
                     <      	.DEFINE	C_Timer_256Hz			0x0000;		//
                     <      	.DEFINE	C_Timer_TMB1			0x0018;		//
                     <      	.DEFINE	C_Timer_4Hz				0x0020;		//
                     <      	.DEFINE	C_Timer_2Hz				0x0028;		//
                     <      	.DEFINE	C_Timer_B1				0x0030;		//
                     <      	.DEFINE	C_Timer_Ext2			0x0038;		//
                     <      	
                     <      	.DEFINE	C_PWMO_Off				0x0000;		//b6--b9: output pulse
                     <      	.DEFINE C_PWMO_D1				0x0040;		//
                     <      	.DEFINE C_PWMO_D2				0x0080;		//
                     <      	.DEFINE C_PWMO_D3				0x00C0;		//
                     <      	.DEFINE C_PWMO_D4				0x0100;		//
                     <      	.DEFINE C_PWMO_D5				0x0140;		//
                     <      	.DEFINE C_PWMO_D6				0x0180;		//
                     <      	.DEFINE C_PWMO_D7				0x01C0;		//
                     <      	.DEFINE C_PWMO_D8				0x0200;		//
                     <      	.DEFINE C_PWMO_D9				0x0240;		//
                     <      	.DEFINE C_PWMO_D10				0x0280;		//
                     <      	.DEFINE C_PWMO_D11				0x02C0;		//
                     <      	.DEFINE C_PWMO_D12				0x0300;		//
                     <      	.DEFINE C_PWMO_D13				0x0340;		//
                     <      	.DEFINE C_PWMO_D14				0x0380;		//
                     <      	.DEFINE C_PWMO_Div_2			0x03C0;		// 
                     <      	
                     <      	
                     <      	// Define for P_SystemClock
                     <      	// SPCE 061 PLL
                     <      	//----------------------------------------------
                     <      	.if BODY_TYPE == SPCE061A
                     <      	.DEFINE C_Fosc_49M				0x0080			// b7..b5
                     <      	.DEFINE C_Fosc_41M				0x0060			//
                     <      	.DEFINE C_Fosc_33M				0x0040			//
                     <      	.DEFINE C_Fosc_20M				0x0020			// (default)
                     <      	.DEFINE C_Fosc_24M				0x0000			//
                     <      	.endif
                     <      	//----------------------------------------------
                     <      	.DEFINE C_Fosc					0x0000;		// b2..b0: frequency select 
                     <      	.DEFINE C_Fosc_Div_2			0x0001;		//
                     <      	.DEFINE C_Fosc_Div_4			0x0002;		//
                     <      	.DEFINE C_Fosc_Div_8			0x0003;		// (default)
                     <      	.DEFINE C_Fosc_Div_16			0x0004;		//
                     <      	.DEFINE C_Fosc_Div_32			0x0005;		//
                     <      	.DEFINE C_Fosc_Div_64			0x0006;		//
                     <      	.DEFINE C_Sleep					0x0007;		//
                     <      	
                     <      	.DEFINE	C_32K_Work				0x0010;		// b4 = 1: at sleep mode,32.768k still work 
                     <      	.DEFINE C_32K_Off				0x0000;		// b4 = 0: at sleep mode,32.768k off 
                     <      	.DEFINE C_StrongMode			0x0008;		// b3 = 1: force strong mode
                     <      	.DEFINE C_AutoWeakMode			0x0000;		// b3 = 0: auto weak mode(default) 
                     <      	
                     <      	.DEFINE	C_PLL_Freq_24M			0x0000		//b5..b7: PLL frequency select
                     <      	.DEFINE	C_PLL_Freq_20M			0x0020		//
                     <      	.DEFINE	C_PLL_Freq_32M			0x0040		//
                     <      	.DEFINE	C_PLL_Freq_40M			0x0060		//
                     <      	.DEFINE	C_PLL_Freq_49M			0x0080		//
                     <      	
                     <      	
                     <      	// Define for P_ADC_Ctrl
                     <      	//----------------------------------------------
                     <      	.if BODY_TYPE == SPCE061A
                     <      	.DEFINE	C_AD_Enable				0x0001;		//b0=1: enable A/D converter
                     <      	.DEFINE C_AD_Disable			0x0000;		//b0=0: disable A/D converter
                     <      	.DEFINE C_AD_Line_In			0x0002;		//b1=1: microphone disable
                     <      	.DEFINE C_AD_MIC_In				0x0000;		//b1=0: microphone enable
                     <      	.DEFINE C_AGC_Enable			0x0004;		//b2=1: enable AGC function
                     <      	.DEFINE C_AGC_Disable			0x0000;		//b2=0: disable AGC function
                     <      	.DEFINE C_AD_Sample	 			0x0004;		//b3=1: sample the analog signal(manual mode)
                     <      	.DEFINE C_AD_Hold				0x0000;		//b3=0: hold(manual mode)
                     <      	.DEFINE C_Auto_Mode	 			0x0010;		//b4=1: A/D auto mode
                     <      	.DEFINE C_Manual_Mode	 		0x0000;		//b4=0: A/D manual mode
                     <      	//b5: ADINI?
                     <      	.DEFINE C_DAC_Current_2mA		0x0040;		//b6=1: DAC current = 2mA @ vdd=3V(new option)
                     <      	.DEFINE C_DAC_Current_3mA		0x0000;		//b6=0: DAC current = 3mA @ vdd=3V(Default)
                     <      	.DEFINE C_AD_Vref_VDD			0x0080;		//b7=1: Vref is VDD
                     <      	.DEFINE C_AD_Vref_VRTPAD		0x0000;		//b7=0: Vref is from pin "VRTPAD"
                     <      	.DEFINE C_AD_COMP				0x4000;		//b14=1: output voltage of DAC0<Analog input signal
                     <      												//b14=0: output voltage of DAC0>Analog input signal
                     <      	.DEFINE C_AD_RDY				0x8000;		//b15=1: A/D digital data ready; 0: not ready
                     <      	.endif
                     <      	
                     <      	.if BODY_TYPE == SPCE500A
                     <      	.DEFINE	C_AD					0x0001 			//
                     <      	.DEFINE C_DA					0x0000 			//
                     <      	.DEFINE C_MIC					0x0000 			//
                     <      	.DEFINE C_LINE					0x0002 			//
                     <      	.endif
                     <      	//----------------------------------------------
                     <      	
                     <      	
                     <      	// Define for P_DAC_Ctrl
                     <      	//----------------------------------------------
                     <      	.if BODY_TYPE == SPCE061A
                     <      	.DEFINE	C_DAC1_Direct			0x0000;		// b8 b7: DAC1 latch
                     <      	.DEFINE C_DAC1_LatchA			0x0080;		// Latch data to DAC1 by TimerA 
                     <      	.DEFINE C_DAC1_LatchB			0x0100;		// Latch data to DAC1 by TimerB
                     <      	.DEFINE C_DAC1_LatchAB			0x0180;		// Latch data to DAC1 by TimerA or TimerB
                     <      	
                     <      	.DEFINE	C_DAC2_Direct			0x0000;		// b6 b5: DAC2 latch
                     <      	.DEFINE C_DAC2_LatchA			0x0020;		// Latch data to DAC2 by TimerA
                     <      	.DEFINE C_DAC2_LatchB			0x0040;		// Latch data to DAC2 by TimerB
                     <      	.DEFINE C_DAC2_LatchAB			0x0060;		// Latch data to DAC2 by TimerA or TimerB
                     <      	
                     <      	.DEFINE	C_ADC_Direct			0x0000;		// b4 b3: ADC latch
                     <      	.DEFINE C_ADC_LatchA			0x0008;		// Latch data to ADC by TimerA
                     <      	.DEFINE C_ADC_LatchB			0x0010;		// Latch data to ADC by TimerB
                     <      	.DEFINE C_ADC_LatchAB			0x0018;		// Latch data to ADC by TimerA or TimerB
                     <      	.endif
                     <      	
                     <      	.if BODY_TYPE == SPCE500A
                     <      	.DEFINE C_PushPull				0x0000 			// b0, (default) 
                     <      	.DEFINE C_DoubleEnd				0x0001 			// b0
                     <      	.DEFINE	C_DAC_Mode				0x0000 			// b1, (default)
                     <      	.DEFINE C_PWM_Mode				0x0002 			// b1
                     <      	
                     <      	.DEFINE	C_D1_Direct				0x0000 			// DAC1 latch
                     <      	.DEFINE C_D1_LatchA				0x0008 			// 
                     <      	.DEFINE C_D1_LatchB				0x0010 			//
                     <      	.DEFINE C_D1_LatchAB			0x0018 			//
                     <      	
                     <      	.DEFINE	C_D2_Direct				0x0000 			// DAC2 latch
                     <      	.DEFINE C_D2_LatchA				0x0020 			// 
                     <      	.DEFINE C_D2_LatchB				0x0040 			//
                     <      	.DEFINE C_D2_LatchAB			0x00C0 			//
                     <      	.endif
                     <      	//----------------------------------------------
                     <      	
                     <      	// Define for P_LVD_Ctrl
                     <      	//----------------------------------------------
                     <      	.if BODY_TYPE == SPCE061A
                     <      	.DEFINE C_LVD24V				0x0000;		// LVD = 2.4V; b1b0 
                     <      	.DEFINE C_LVD28V				0x0001;		// LVD = 2.8V
                     <      	.DEFINE C_LVD32V				0x0002;		// LVD = 3.2V
                     <      	.endif
                     <      	
                     <      	.if BODY_TYPE == SPCE500A
                     <      	.DEFINE C_LVD26V				0x0000 			// LVD = 2.6V 
                     <      	.DEFINE C_LVD30V				0x0001 			// LVD = 3.0V
                     <      	.DEFINE C_LVD36V				0x0002 			// LVD = 3.6V
                     <      	.DEFINE C_LVD40V				0x0003 			// LVD = 4.0V
                     <      	.endif
                     <      	
                     <      	.DEFINE C_LVD_Result			0x8000;		// b15 = 1: below the selected LVD level
                     <      	//----------------------------------------------
                     <      	
                     <      	
                     <      	// SPCE061 flash operation instruction definition
                     <      	//----------------------------------------------
                     <      	.if BODY_TYPE == SPCE061A
                     <      	.DEFINE C_EnableFlashAccess		0xAAAA;
                     <      	.DEFINE C_EraseFlashPage  		0x5511;
                     <      	.DEFINE C_ProgramFlash 	   		0x5533;
                     <      	.endif
                     <      	//----------------------------------------------
                     <      	
                     <      	
                     <      	
                     <      	//===============================================================
                     <      	// Sunplus APIs for SPCE 061A
                     <      	//===============================================================
                     <      	//////////////////////////////////////////////////
                     <      	// Note: This register will map to the P_INT_Ctrl
                     <      	//	(0x7010), The SACMvxx.lib use this register to
                     <      	//	combine with user's interrupt setting.
                     <      	//  In SPCE061, it is not necessary since the 
                     <      	//  P_INT_Mask(0x702D) already does this. It is for 
                     <      	//  compatibility to keep it here. 
                     <      	//////////////////////////////////////////////////
                     <      	//.EXTERNAL	R_InterruptStatus 
                     <      	
                     <      	//========================================================================================        
                     <      	// End of SPCE.inc
                     <      	//========================================================================================
                     <      	
                     <      	
                     <      	        
                            	
                            	.external T_SACM_MS01_DrumTable
                            	
000000B7                    	.IRAM
000000B7 00 00 00 00        	.var	R_AdpcmBankCh0, R_AdpcmAddrCh0 // Used to keep ch0 ADPCM Address
000000B9 00 00 00 00        	.var	R_AdpcmBankCh1, R_AdpcmAddrCh1 // Used to keep ch1 ADPCM Address
                            	
000094E2                    	.CODE
                            	.public F_USER_InitAdpcmData_Ch0
                            	.public _USER_InitAdpcmData_Ch0
                            	
                            	.public F_USER_InitAdpcmData_Ch1
                            	.public _USER_InitAdpcmData_Ch1
                            	
                            	// Library call-back functions
                            	.public F_USER_MS01_GetAdpcmData_Ch0
                            	.public F_USER_MS01_GetAdpcmData_Ch1
                            	
                            	
000094E2                    	.CODE
                            	////////////////////////////////////////////////////////////////////////////////
                            	// Function: F_SACM_MS01_SongEvent	:Call back function for Song Notes events
                            	// Input: R1 = return value 		
                            	//		[b15, b14] = [0, 0] : Note Event 
                            	//		[b15, b14] = [0, 1] : Instrument Event 
                            	//		[b15, b14] = [1, 0] : Command line event
                            	//		[b15, b14] = [1, 1] : Reserved
                            	//
                            	//	if bit[15,14] ={0,0}, Note Event:	
                            	// 			bit[3:0] Note 1-12(1=C,2=C#,3=D,4=D#,5=E,6=F,7=F#,8=G,9=G#,10=A,11=A#,12=B
                            	//		 	bit[6:4] Channel 0-5
                            	//	 		bit[9:7] Octave 0-5
                            	//
                            	//	if bit[15,14]={0,1}: Instrument Event: 	 	
                            	// 			bit[14} = 1: Instrument change event
                            	//			bit[7:0] Instrument/speech index 0-255
                            	//		 	bit[10:8] Channel 0-5
                            	//
                            	//	if bit[15,14] = [1,0] :  *  Event:(user-defined in pop file)
                            	//		bit[3..0] 0-15 Event from Command line in *.pop
                            	//
                            	//	if bit[15,14] =[1,1],  Reserved
                            	//
                            	// Output: user defined
                            	//  
                            	/////////////////////////////////////////////////////////////////////////////////
                            	.public F_SACM_MS01_SongEvent
                            	F_SACM_MS01_SongEvent:
000094E2 A0 DA              			push	r2,r5 to [sp]
                            	        //-----------------------
                            	        // Event processed by user
                            	        //-----------------------
000094E3 19 D3 05 70        			[P_IOB_Data]=R1; // Show R1 on LED attached to IOB
                            			
000094E5 A0 92              	    	pop		r2,r5 from [sp]
                            	        //-----------------------
                            	        // End of Event processing
                            	        //-----------------------
000094E6 90 9A              			retf
                            	
                            	
                            	
                            	
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: _USER_InitAdpcmData_Ch0
                            	// Syntax : USER_InitAdpcmData_Ch0(DrumIndex)
                            	// Input : DrumIndex (User defined)
                            	// Output: (User defined)
                            	// Note: 1. This C API calls F_USER_InitAdpcmData_Ch1 to initialize ADPCM playback 
                            	//          from user storage.  
                            	//       2. User needs to implement the function body based on the external 
                            	//          storage type.
                            	///////////////////////////////////////////////////////////////////////////////
                            	_USER_InitAdpcmData_Ch0:	.proc
                            	    //-----------------------
                            	    // defined by user
                            	    //-----------------------	
000094E7 88 DA              		push bp to [sp]
000094E8 08 0B 01 00        		bp = sp + 1
000094EA 88 D2              		push r1 to [sp]
000094EB 03 92              		r1 = [bp+3]
                            		
000094EC 40 F0 F1 94        		call F_USER_InitAdpcmData_Ch0
                            		
000094EE 88 90              		pop r1 from [sp]
000094EF 88 98              		pop bp from [sp]	
                            	    //-----------------------
                            		// end of user define area
                            	    //-----------------------			
000094F0 90 9A              		retf
                            		.endp
                            	
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: F_USER_InitAdpcmData_Ch1
                            	// Input : R1=DrumIndex (User defined)
                            	// Output: (User defined)
                            	// Note: 1. This function initializes ADPCM playback from user storage.  
                            	//       2. User needs to implement the function body based on the external 
                            	//          storage type.
                            	///////////////////////////////////////////////////////////////////////////////
                            	F_USER_InitAdpcmData_Ch0:
                            	    //-----------------------
                            	    // defined by user
                            	    //-----------------------	
000094F1 98 D6              		push	r1,r3 to [sp]
                            		 									// r1 = ADPCM speech index
000094F2 09 07 45 80        		r3 = r1 + T_SACM_MS01_DrumTable;	// Drum # r1:i/p
000094F4 C3 94              	    r2 = [r3];
000094F5 0A 07 01 00        	    r3 = r2 + 0x01;
000094F7 C2 94              	    r2 = [r2];
000094F8 1A D5 B8 00        	    [R_AdpcmAddrCh0] = r2					// Got Address
000094FA C3 96              	    r3 = [r3];
000094FB 5B 97              	    r3 = r3 lsl 4;
000094FC 5B 97              	    r3 = r3 lsl 4;
000094FD 4B 97              	    r3 = r3 lsl 2;
000094FE 1B D7 B7 00        	    [R_AdpcmBankCh0] = r3					// Got Bank
00009500 98 90              	    pop		r1,r3 from [sp]
                            	    //-----------------------
                            		// end of user define area
                            	    //-----------------------       
00009501 90 9A              			retf
                            	
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: _User_InitAdpcmData_Ch1
                            	// Syntax : User_InitAdpcmData_Ch1(DrumIndex)
                            	// Input : DrumIndex (User defined)
                            	// Output: (User defined)
                            	// Note: 1. This C API calls F_User_InitAdpcmData_Ch1 to initialize ADPCM playback 
                            	//          from user storage.  
                            	//       2. User needs to implement the function body based on the external 
                            	//          storage type.
                            	///////////////////////////////////////////////////////////////////////////////
                            	
                            	_USER_InitAdpcmData_Ch1:	.proc
                            	    //-----------------------
                            	    // defined by user
                            	    //-----------------------	
00009502 88 DA              		push bp to [sp]
00009503 08 0B 01 00        		bp = sp + 1
00009505 88 D2              		push r1 to [sp]
00009506 03 92              		r1 = [bp+3]
                            		
00009507 40 F0 0C 95        		call F_USER_InitAdpcmData_Ch1
                            		
00009509 88 90              		pop r1 from [sp]	
0000950A 88 98              		pop bp from [sp]	
                            	    //-----------------------
                            		// end of user define area
                            	    //-----------------------			
0000950B 90 9A              		retf
                            		.endp
                            			
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: F_USER_InitAdpcmData_Ch1
                            	// Input : R1=DrumIndex (User defined)
                            	// Output: (User defined)
                            	// Note: 1. This function initializes ADPCM playback from user storage.  
                            	//       2. User needs to implement the function body based on the external 
                            	//          storage type.
                            	///////////////////////////////////////////////////////////////////////////////
                            	F_USER_InitAdpcmData_Ch1:
                            	    //-----------------------
                            	    // defined by user
                            	    //-----------------------	
0000950C 98 D6              			push	r1,r3 to [sp]
                            			 									// r1 = ADPCM speech index
0000950D 09 07 45 80        			r3 = r1 + T_SACM_MS01_DrumTable;	// Drum # r1:i/p
0000950F C3 94              	        r2 = [r3];
00009510 0A 07 01 00        	        r3 = r2 + 0x01;
00009512 C2 94              	        r2 = [r2];
00009513 1A D5 BA 00        	        [R_AdpcmAddrCh1] = r2					// Got Address
00009515 C3 96              	        r3 = [r3];
00009516 5B 97              	        r3 = r3 lsl 4;
00009517 5B 97              	        r3 = r3 lsl 4;
00009518 4B 97              	        r3 = r3 lsl 2;
00009519 1B D7 B9 00        	        [R_AdpcmBankCh1] = r3					// Got Bank
0000951B 98 90              	        pop		r1,r3 from [sp]
                            	    //-----------------------
                            		// end of user define area
                            	    //-----------------------
0000951C 90 9A              	    	retf
                            	
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: F_USER_MS01_GetAdpcmData_Ch0
                            	// Input: None
                            	// Output: R3
                            	// Note: 1. User protect r1,r2,r5 if used.
                            	//       2. This function fetchs data from user storage and returns to 
                            	//          MS01 library for ADPCM Ch0 playback. The returned data is carried 
                            	//          by R3.
                            	//       3. User needs to implement the function body based on the external 
                            	//          storage type.
                            	///////////////////////////////////////////////////////////////////////////////
                            	
                            	F_USER_MS01_GetAdpcmData_Ch0:
                            	    //-----------------------
                            	    // defined by user
                            	    //-----------------------	
0000951D 90 D4              		push	r1,r2 to [sp]
0000951E 12 95 B8 00        		r2 = [R_AdpcmAddrCh0]
00009520 13 97 B7 00        		r3 = [R_AdpcmBankCh0]
                            		
00009522 7F BC              	    sr &= 0x03f 					// Change Page
00009523 06 A7              	    r3 |=sr 						//
00009524 03 9D              	    sr = r3 						//
00009525 E2 92              	 	r1 = D:[r2] 					// Got data
                            			  
                            		//... Adpcm address +1 ...........
00009526 12 95 B8 00        	    r2 = [R_AdpcmAddrCh0]; 			// 6
00009528 41 04              	    r2+= 1;                 		// 3
00009529 06 4E              	    jnz  ?L_NotCrossBankAdpcm;
0000952A 13 97 B7 00        	    r3 = [R_AdpcmBankCh0]      		// 9
0000952C 0B 0D 00 04        	    sr = r3 + 0x400;
0000952E 1E DD B7 00        	    [R_AdpcmBankCh0] = sr     	 		// 9
                            	    
                            	    ?L_NotCrossBankAdpcm:
00009530 1A D5 B8 00        	    [R_AdpcmAddrCh0] = r2;   		// 6 -> 36
00009532 01 97              		r3 = r1								//r3 = ADPCM Data from user	
00009533 90 90              		pop 	r1,r2 from [sp]
                            	    //-----------------------
                            		// end of user define area
                            	    //-----------------------		
00009534 90 9A              		retf
                            		
                            	///////////////////////////////////////////////////////////////////////////////
                            	// Function: F_USER_MS01_GetAdpcmData_Ch1
                            	// Input: None
                            	// Output: R3
                            	// Note: 1. User protect r1,r2,r5 if used.
                            	//       2. This function fetchs data from user storage and returns to 
                            	//          MS01 library for ADPCM Ch1 playback. The returned data is carried 
                            	//          by R3.
                            	//       3. User needs to implement the function body based on the external 
                            	//          storage type.
                            	///////////////////////////////////////////////////////////////////////////////
                            	F_USER_MS01_GetAdpcmData_Ch1:
                            	    //-----------------------
                            	    // defined by user
                            	    //-----------------------
00009535 90 D4              		push	r1,r2 to [sp]
                            	
00009536 12 95 BA 00        		r2 = [R_AdpcmAddrCh1]
00009538 13 97 B9 00        		r3 = [R_AdpcmBankCh1]
                            		
0000953A 7F BC              		sr &= 0x03f 					// Change Page
0000953B 06 A7              	    r3 |=sr 						//
0000953C 03 9D              	    sr = r3 						//
0000953D E2 92              		r1 = D:[r2] 					// Got data
                            		  
                            	 	//... Adpcm address +1 ...........
0000953E 12 95 BA 00        	    r2 = [R_AdpcmAddrCh1]; 			// 6
00009540 41 04              	    r2+= 1;                 		// 3
00009541 06 4E              	    jnz ?L_NotCrossBankAdpcm
00009542 13 97 B9 00        	    r3 = [R_AdpcmBankCh1]      		// 9
00009544 0B 0D 00 04        	    sr = r3 + 0x400;
00009546 1E DD B9 00        	    [R_AdpcmBankCh1] = sr     	 		// 9
                            	    
                            	    ?L_NotCrossBankAdpcm:
00009548 1A D5 BA 00        	    [R_AdpcmAddrCh1] = r2;   		// 6 -> 36
0000954A 01 97              		r3 = r1								//r3 = ADPCM Data from user
0000954B 90 90              		pop 	r1,r2 from [sp]
                            	    //-----------------------
                            		// end of user define area
                            	    //-----------------------
0000954C 90 9A              		retf		
0 error(s), 0 warning(s).


