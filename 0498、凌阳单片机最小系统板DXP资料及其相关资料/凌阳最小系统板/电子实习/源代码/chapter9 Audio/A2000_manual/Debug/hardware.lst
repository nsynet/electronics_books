Sunplus u'nSP Assembler - Ver. 1.8.0
              Listing File Has Been Relocated
                            	//========================================================================================
                            	// Progarm: Standard function definition
                            	// Writen by: Andy
                            	//
                            	// Last modified date: 
                            	// 		2000/06/23: first version
                            	//		2000/07/15: modified
                            	//		2000/07/24: modified
                            	//
                            	// Note: update hardware.inc with hardware.asm synchorously.
                            	//	
                            	//
                            	//========================================================================================
                            	
                            	.PUBLIC F_SP_Send_PWM;
                            	.PUBLIC F_SP_Send_DAC1;
                            	.PUBLIC F_SP_Send_DAC2;
                            	.PUBLIC F_SP_Send_Two_DAC;
                            	.PUBLIC F_SP_Send_Out;
                            	.public F_SP_Get_ADC;
                            	.PUBLIC F_SP_Set_P_TimerA_Ctrl	
                            	.PUBLIC F_SP_Set_P_TimerA_Data
                            	.PUBLIC F_SP_Set_P_TimerB_Ctrl	
                            	.PUBLIC F_SP_Set_P_TimerB_Data
                            	.PUBLIC F_SP_Set_P_INT_Ctrl
                            	.PUBLIC F_SP_Set_P_INT_Clear
                            	.PUBLIC F_SP_Set_P_SystemClock
                            	.PUBLIC F_SP_Set_P_DAC_Ctrl
                            	.PUBLIC F_SP_Set_P_ADC_Ctrl
                            	.PUBLIC F_SP_Write_INT_Status;        
                            	.PUBLIC F_SP_Read_INT_Status;				
                            	.public	F_SP_RampUpDAC1;
                            	.public	F_SP_RampDnDAC1;
                            	.public	F_SP_RampUpDAC2;
                            	.public	F_SP_RampDnDAC2;
                            	.public	_SP_RampUpDAC1;
                            	.public	_SP_RampDnDAC1;
                            	.public	_SP_RampUpDAC2;
                            	.public	_SP_RampDnDAC2;
                            	.public F_SP_Delay;
                            	.public	F_SP_InitQueue;
                            	.public	F_SP_ReadQueue;
                            	.public	F_SP_WriteQueue;	
                            	.public F_SP_TestQueue;
                            	.PUBLIC _SP_Export; 
                            	.PUBLIC	_SP_Import;
                            	.PUBLIC _SP_Init_IOB;
                            	.PUBLIC _SP_Init_IOA;
                            	
                            	.public	_SP_GetResource	
                            	//////////////////////////////////////////////////////////////////
                            	// Define Area for I/O									
                            	//////////////////////////////////////////////////////////////////
                            	.DEFINE	P_IOA_Data   		0x7000;        // Write Data into data register and read from IOA pad
                            	.DEFINE P_IOA_Buffer        0x7001;        // Write Data into buffer register and read from buffer register
                            	.DEFINE P_IOA_Dir           0x7002;        // Direction vector for IOA
                            	.DEFINE P_IOA_Attrib        0x7003;        // Attribute vector for IOA
                            	.DEFINE P_IOA_Latch         0x7004;        // Latch PortA data for key change wake-up
                            	
                            	.DEFINE P_IOB_Data         	0x7005;        // Write Data into the data register and read from IOB pad
                            	.DEFINE P_IOB_Buffer        0x7006;        // Write Data into buffer register and read from buffer register
                            	.DEFINE P_IOB_Dir           0x7007;        // Direction vector for IOB
                            	.DEFINE P_IOB_Attrib        0x7008;        // Attribute vector for IOB
                            	
                            	.DEFINE P_FeedBack          0x7009;        // Clock form external R,C
                            	.DEFINE P_TimerA_Data       0x700A;        // Data port for TimerA 
                            	.DEFINE P_TimerA_Ctrl       0x700B;        // Control Port for TimerA
                            	.DEFINE P_TimerB_Data       0x700C;        // Data port for TimerB
                            	.DEFINE P_TimerB_Ctrl       0x700D;        // Control Port for TimerB
                            	.DEFINE P_TimeBase_Setup    0x700E;        // TimerBase Freq. Set
                            	.DEFINE P_TimeBase_Clear	0x700F;		   // Reset Timerbase counter
                            	.DEFINE P_INT_Ctrl          0x7010;        // Control port for interrupt source
                            	.DEFINE P_INT_Clear         0x7011;        // Clear interrupt source
                            	.DEFINE P_Watchdog_Clear    0x7012;        // Watchdog Reset
                            	.DEFINE P_SystemClock       0x7013;        // Change system clock frequency(include go to standby mode)
                            	
                            	
                            	//... PA6442 New version MC52A (For EC-03)....
                            	.DEFINE P_ADC 	        	0x7014;        	// Data Port for AD
                            	.DEFINE P_ADC_Ctrl          0x7015;        	// Control Port for AD control
                            	.DEFINE P_ADC_Status        0x7015;        	// AD Port Status
                            	.DEFINE P_DAC2              0x7016;        	// Data Port for DAC2
                            	.DEFINE P_PWM               0x7016;        	// Data Port for PWM
                            	.DEFINE P_DAC1	        	0x7017;        	// Data Port for DAC1
                            	.DEFINE P_DAC_Ctrl			0x702A;			// Control Port for two DAC and audio output mode
                            	//............................................
                            	
                            	.DEFINE P_IR_Ctrl			0x7018;			// Control Port for IR
                            	.DEFINE P_LVD_Ctrl          0x7019;        	// Control Port for LVD
                            	
                            	.DEFINE P_SIO_Addr_Low		0x701B;			// Address Port low
                            	.DEFINE P_SIO_Addr_Mid		0x701C;			// Address Port middle
                            	.DEFINE P_SIO_Addr_High	 	0x701D;			// Address Port high
                            	.DEFINE P_SIO_Ctrl			0x701E;			// Control Port
                            	.DEFINE P_SIO_Start			0x701F;			// Start port for serial interface
                            	.DEFINE P_SIO_Stop			0x7020;			// Stop port for serial interface
                            	
                            	.DEFINE P_UART_Command1		 0x7021;		// Command1 Port for UART
                            	.DEFINE P_UART_Command2		 0x7022;		// Command2 Port for UART
                            	.DEFINE P_UART_Data			 0x7023; 		// Data Port for UART
                            	.DEFINE	P_UART_BaudScalarLow 0x7024;		// Set Baud Rate scalar low
                            	.DEFINE	P_UART_BaudScalarHigh 0x7025;		// Set Baud Rate scalar high
                            	
                            	
                            	// Define for P_INT_Ctrl 
                            	.DEFINE C_IRQ_TMB2              0x0001;        //Timer B IRQ6
                            	.DEFINE C_IRQ_TMB1              0x0002;        //Timer A IRQ6
                            	.DEFINE C_IRQ_2Hz               0x0004;        //2Hz IRQ5
                            	.DEFINE C_IRQ_4Hz               0x0008;        //4Hz IRQ5
                            	.DEFINE C_IRQ_1024Hz            0x0010;        //1024Hz IRQ4
                            	.DEFINE C_IRQ_2048Hz            0x0020;        //2048 IRQ4
                            	.DEFINE C_IRQ_4096Hz            0x0040;        //4096 IRQ4
                            	.DEFINE C_IRQ_KeyChange         0x0080;        //Key Change IRQ3
                            	.DEFINE C_IRQ_Ext1              0x0100;        //Ext1 IRQ3
                            	.DEFINE C_IRQ_Ext2              0x0200;        //Ext2 IRQ3
                            	.DEFINE C_IRQ_TimerB            0x0400;        //Timer B IRQ2
                            	.DEFINE C_FIQ_TimerB            0x0800;        //Timer B FIQ
                            	.DEFINE C_IRQ_TimerA            0x1000;        //Timer A IRQ1
                            	.DEFINE C_FIQ_TimerA            0x2000;        //Timer A FIQ
                            	.DEFINE C_IRQ_PWM               0x4000;        //PWM IRQ0
                            	.DEFINE C_FIQ_PWM               0x8000;        //PWM FIQ
                            	
                            	// Define for P_TimerA_Ctrl, P_TimerB_Ctrl                               
                            	.DEFINE	C_Fosc_2				0x0000;			// Timer A
                            	.DEFINE	C_Fosc_256		   	 	0x0001;			//
                            	.DEFINE	C_32768Hz				0x0002;			//
                            	.DEFINE	C_8192Hz				0x0003;			//
                            	.DEFINE	C_4096Hz				0x0004;			//
                            	.DEFINE	C_A1					0x0005;			//
                            	.DEFINE C_A0					0x0006;			//
                            	.DEFINE C_Ext1					0x0007;			//
                            	
                            	.DEFINE	C_2048Hz				0x0000;			//
                            	.DEFINE	C_1024Hz				0x0008;			//
                            	.DEFINE	C_256Hz					0x0010;			//
                            	.DEFINE	C_TMB1Hz				0x0018;			//
                            	.DEFINE	C_4Hz					0x0020;			//
                            	.DEFINE	C_2Hz					0x0028;			//
                            	.DEFINE	C_B1					0x0030;			//
                            	.DEFINE	C_Ext2					0x0038;			//
                            	
                            	.DEFINE	C_Off					0x0000;			//
                            	.DEFINE C_D1					0x0040;			//
                            	.DEFINE C_D2					0x0080;			//
                            	.DEFINE C_D3					0x00C0;			//
                            	.DEFINE C_D4					0x0100;			//
                            	.DEFINE C_D5					0x0140;			//
                            	.DEFINE C_D6					0x0180;			//
                            	.DEFINE C_D7					0x01C0;			//
                            	.DEFINE C_D8					0x0200;			//
                            	.DEFINE C_D9					0x0240;			//
                            	.DEFINE C_D10					0x0280;			//
                            	.DEFINE C_D11					0x02C0;			//
                            	.DEFINE C_D12					0x0300;			//
                            	.DEFINE C_D13					0x0340;			//
                            	.DEFINE C_D14					0x0380;			//
                            	.DEFINE C_TA_Div_2				0x03C0;			// Timer A
                            	
                            	.DEFINE C_TB_Div_2				0x03C0;			// Timer B
                            	
                            	// Define for P_SystemClock
                            	.DEFINE C_Fosc					0x0000;			// b3..b0
                            	.DEFINE C_Fosc_Div_2			0x0001;			//
                            	.DEFINE C_Fosc_Div_4			0x0002;			//
                            	.DEFINE C_Fosc_Div_8			0x0003;			// (default)
                            	.DEFINE C_Fosc_Div_16			0x0004;			//
                            	.DEFINE C_Fosc_Div_32			0x0005;			//
                            	.DEFINE C_Fosc_Div_64			0x0006;			//
                            	.DEFINE C_Sleep					0x0007;		 	//
                            	
                            	.DEFINE	C_32K_Work				0x0000;			// b4
                            	.DEFINE C_32K_Off				0x0000;			// 
                            	.DEFINE C_StrongMode			0x0000;			// b5
                            	.DEFINE C_AutoMode				0x0000;			//
                            	
                            	// Define for P_AD_Ctrl
                            	.DEFINE	C_AD					0x0001;			//
                            	.DEFINE C_DA					0x0000;			//
                            	.DEFINE C_MIC					0x0000;			//
                            	.DEFINE C_LINE					0x0002;			//
                            	
                            	// Define for P_DA_Ctrl
                            	.DEFINE C_PushPull				0x0000;			// b0, (default) 
                            	.DEFINE C_DoubleEnd				0x0001;			// b0
                            	.DEFINE	C_DAC_Mode				0x0000;			// b1, (default)
                            	.DEFINE C_PWM_Mode				0x0002;			// b1
                            	
                            	.DEFINE	C_D1_Direct				0x0000;			// DAC1 latch
                            	.DEFINE C_D1_LatchA				0x0008;			// 
                            	.DEFINE C_D1_LatchB				0x0010;			//
                            	.DEFINE C_D1_LatchAB			0x0018;			//
                            	
                            	.DEFINE	C_D2_Direct				0x0000;			// DAC2 latch
                            	.DEFINE C_D2_LatchA				0x0020;			// 
                            	.DEFINE C_D2_LatchB				0x0040;			//
                            	.DEFINE C_D2_LatchAB			0x00C0;			//
                            	
                            	// Define for P_LVD_Ctrl
                            	.DEFINE C_LVD24V				0x0000;			// LVD = 2.4V 
                            	.DEFINE C_LVD28V				0x0001;			// LVD = 2.8V
                            	.DEFINE C_LVD32V				0x0002;			// LVD = 3.2V
                            	.DEFINE C_LVD36V				0x0003;			// LVD = 3.6V
                            	
                            	
000002F8                    	.IRAM
                            	.public	R_InterruptStatus;					//
000002F8 00 00              	.VAR	R_InterruptStatus = 0;					// for feature using
                            	.public R_FIQTemp;
000002F9 00 00              	.VAR	R_FIQTemp;							// for temparity used in FIQ interrupt routine
                            	
                            	
                            	.define C_QueueSize 50						// update hardware.inc synchoroneously
000002FA 00 00              	.VAR 	R_Queue;
000002FB 00 00 00 00        	.DW		C_QueueSize-1	DUP(0);
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00 00 00
         00 00      
0000032C 00 00              	.VAR	R_ReadIndex;
0000032D 00 00              	.VAR	R_WriteIndex;
                            	
00008D07                    	.CODE
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Function: Send data to speech driver(PWM/DAC)                                   
                            	// Destory register: r4                                            
                            	//////////////////////////////////////////////////////////////////        
                            	
                            	F_SP_Send_PWM:    							//
00008D07 1C D9 16 70        	       [P_PWM] = r4;						//
00008D09 90 9A              	       retf;           						//
                            	
                            	F_SP_Send_DAC1:								//
00008D0A 1C D9 17 70        			[P_DAC1] = r4;						//
00008D0C 90 9A              			retf;        						//
                            	F_SP_Send_DAC2:								//
00008D0D 1C D9 16 70        			[P_DAC2] = r4;						//
00008D0F 90 9A              			retf;        						//
                            	F_SP_Send_Two_DAC:
00008D10 1C D9 17 70        			[P_DAC1] = r4;						//
00008D12 1C D9 16 70        			[P_DAC2] = r4;						//
00008D14 90 9A              			retf;
                            	
                            	//.DEFINE	F_SP_Send_Out  F_SP_Send_PWM;
                            	//.DEFINE	F_SP_Send_Out  F_SP_Send_DAC1;
                            	//.DEFINE	F_SP_Send_Out  F_SP_Send_DAC2;
                            	.DEFINE	F_SP_Send_Out  F_SP_Send_Two_DAC;		// Send to both DAC1 and DAC2
                            	
                            	
                            	F_SP_Get_ADC:
00008D15 14 99 14 70        			R4 = [P_ADC]
00008D17 90 9A              			retf
                            	
                            	
                            	F_SP_Set_P_TimerA_Ctrl:
00008D18 19 D3 0B 70        		[P_TimerA_Ctrl] = R1
00008D1A 90 9A              		RETF
                            	F_SP_Set_P_TimerA_Data:
00008D1B 19 D3 0A 70        		[P_TimerA_Data] = R1
00008D1D 90 9A              		RETF
                            	F_SP_Set_P_TimerB_Ctrl:
00008D1E 19 D3 0D 70        		[P_TimerB_Ctrl] = R1
00008D20 90 9A              		RETF
                            	F_SP_Set_P_TimerB_Data:
00008D21 19 D3 0C 70        		[P_TimerB_Data] = R1
00008D23 90 9A              		RETF
                            	
                            	F_SP_Set_P_INT_Ctrl:
00008D24 19 D3 10 70        		[P_INT_Ctrl] = R1
00008D26 90 9A              		RETF
                            	F_SP_Set_P_INT_Clear:
00008D27 19 D3 11 70        		[P_INT_Clear] = R1
00008D29 90 9A              		RETF
                            	
                            	F_SP_Set_P_SystemClock:
00008D2A 19 D3 13 70        		[P_SystemClock] = R1
00008D2C 90 9A              		RETF
                            	
                            	F_SP_Set_P_DAC_Ctrl:
00008D2D 19 D3 2A 70        		[P_DAC_Ctrl] = R1
00008D2F 90 9A              		RETF	
                            	
                            	F_SP_Set_P_ADC_Ctrl:
00008D30 19 D3 15 70        		[P_ADC_Ctrl] = R1
00008D32 90 9A              		RETF
                            	
                            	//////////////////////////////////////////////////////////////////
                            	// Function: Interrupt vector setting
                            	// Used register: R1                                                                                    
                            	////////////////////////////////////////////////////////////////// 
                            	
                            	F_SP_Write_INT_Status:						//write interrupt status
00008D33 19 D3 F8 02        	        [R_InterruptStatus] = R1;       	//
00008D35 90 9A              	        retf;								
                            	        
                            	F_SP_Read_INT_Status:						//read interrupt status
00008D36 11 93 F8 02        	        R1 = [R_InterruptStatus];       	//
00008D38 90 9A              	        retf;
                            	
                            	
                            	
                            	////////////////////////////////////////////////////////////////// 
                            	//
                            	//////////////////////////////////////////////////////////////////    
                            	_SP_Init_IOA: .PROC
00008D39 88 DA              			PUSH BP,BP TO [SP];
00008D3A 08 0B 01 00        	        BP = SP + 1;
00008D3C 88 D2              			PUSH R1,R1 TO [SP];
00008D3D 03 92              			R1 = [BP+3];						// Port direction
00008D3E 19 D3 02 70        			[P_IOA_Dir] = R1;
00008D40 04 92              			R1 = [BP+4];
00008D41 19 D3 00 70        			[P_IOA_Data] = R1;
00008D43 05 92              			R1 = [BP+5];
00008D44 19 D3 03 70        			[P_IOA_Attrib] = R1;
                            			
00008D46 88 90              			POP R1,R1 FROM [SP];
00008D47 88 98              	        POP BP,BP FROM [SP];
00008D48 90 9A              	        RETF;
                            			.ENDP
                            	
                            	////////////////////////////////////////////////////////////////// 
                            	// SP_Inti_IOB
                            	//////////////////////////////////////////////////////////////////    
                            	
                            	_SP_Init_IOB: .PROC
00008D49 88 DA              			PUSH BP,BP TO [SP];
00008D4A 08 0B 01 00        	        BP = SP + 1;
00008D4C 88 D2              			PUSH R1,R1 TO [SP];
00008D4D 03 92              			R1 = [BP+3];						// Port direction
00008D4E 19 D3 07 70        			[P_IOB_Dir] = R1;
00008D50 04 92              			R1 = [BP+4];
00008D51 19 D3 05 70        			[P_IOB_Data] = R1;
00008D53 05 92              			R1 = [BP+5];
00008D54 19 D3 08 70        			[P_IOB_Attrib] = R1;
                            			
00008D56 88 90              			POP R1,R1 FROM [SP];
00008D57 88 98              	        POP BP,BP FROM [SP];
00008D58 90 9A              	        RETF;
                            			.ENDP
                            	
                            	
                            	
                            	_SP_Import: .PROC
00008D59 88 DA              	        PUSH BP,BP TO [SP];
00008D5A 08 0B 01 00        	        BP = SP + 1;
00008D5C 90 D4              			PUSH R1,R2 TO [SP];
00008D5D 03 92              			R1 = [BP+3]; 						// Port Number
00008D5E 04 94              			R2 = [BP+4]; 						// Data Buffer Pointer
00008D5F C1 92              			R1 = [R1] ;
00008D60 C2 D2              			[R2] = R1 ;
00008D61 90 90              			POP R1,R2 FROM [SP];
00008D62 88 98              	        POP BP,BP FROM [SP];
00008D63 90 9A              	        RETF;
                            			.ENDP
                            	
                            	_SP_Export: .PROC
00008D64 88 DA              	        PUSH BP,BP TO [SP];
00008D65 08 0B 01 00        	        BP = SP + 1;
00008D67 90 D4              			PUSH R1,R2 TO [SP];
00008D68 03 92              			R1 = [BP+3]; 						// Port Number
00008D69 04 94              			R2 = [BP+4]; 						// Value
00008D6A C1 D4              			[R1] = R2 ;
00008D6B 90 90              			POP R1,R2 FROM [SP];
00008D6C 88 98              	        POP BP,BP FROM [SP];
00008D6D 90 9A              	        RETF;        
                            	 		.ENDP
                            			 
                            	
                            	
                            		 
                            	///////////////////////////////////////
                            	_SP_RampUpDAC1:	.PROC
                            	F_SP_RampUpDAC1:
00008D6E 90 D4              	                push r1,r2 to [sp];
00008D6F 11 93 17 70        	                r1=[P_DAC1];
00008D71 09 B3 C0 FF        	                r1 &= ~0x003f;
00008D73 09 43 00 80        	                cmp     r1,0x8000
00008D75 0E 0E              	                jb     	L_RU_NormalUp;  
00008D76 19 5E              	                je      L_RU_End;
                            	                
                            	L_RU_DownLoop:
00008D77 40 F0 DA 8D        	                call    F_Delay;        
00008D79 41 94              	                r2 = 0x0001;
00008D7A 1A D5 12 70        	                [P_Watchdog_Clear] = r2;
00008D7C 09 23 40 00        	                r1 -= 0x40;
00008D7E 19 D3 17 70        	                [P_DAC1] = r1;
00008D80 09 43 00 80        	                cmp     r1,0x8000;
00008D82 4C 4E              	                jne     L_RU_DownLoop;  
                            	L_RD_DownEnd:
00008D83 0C EE              	                jmp     L_RU_End;
                            	
                            	L_RU_NormalUp:
                            	L_RU_Loop:
00008D84 40 F0 DA 8D        	                call    F_Delay;
00008D86 41 94              	                r2 = 0x0001;
00008D87 1A D5 12 70        	                [P_Watchdog_Clear] = r2;
00008D89 09 03 40 00        	                r1 += 0x40;
00008D8B 19 D3 17 70        	                [P_DAC1] = r1;
00008D8D 09 43 00 80        	                cmp     r1, 0x8000;
00008D8F 4C 4E              	                jne     L_RU_Loop;
                            	                
                            	
                            	L_RU_End:
00008D90 90 90              	                pop     r1,r2 from [sp];
00008D91 90 9A              	                retf;
                            	                .ENDP
                            	/////////////////////////////////////// 
                            	_SP_RampDnDAC1:	.PROC
                            	F_SP_RampDnDAC1:
00008D92 90 D4              					push r1,r2 to [sp];
                            	                //int off;
00008D93 11 93 17 70        	                r1 = [P_DAC1];
00008D95 09 B3 C0 FF        	                r1 &= ~0x003F;
00008D97 0A 5E              	                jz      L_RD_End;
                            	L_RD_Loop:                
00008D98 40 F0 DA 8D        	                call    F_Delay;        
00008D9A 41 94              	                r2 = 0x0001;
00008D9B 1A D5 12 70        	                [P_Watchdog_Clear] = r2;
00008D9D 09 23 40 00        	                r1 -= 0x40;
00008D9F 19 D3 17 70        	                [P_DAC1] = r1;  
00008DA1 4A 4E              	                jnz     L_RD_Loop;
                            	L_RD_End:       
                            	                
00008DA2 90 90              	                pop     r1,r2 from [sp];
00008DA3 90 9A              	                retf;
                            					.ENDP
                            	
                            	///////////////////////////////////////
                            	_SP_RampUpDAC2:	.PROC
                            	F_SP_RampUpDAC2:
00008DA4 90 D4              	                push r1,r2 to [sp];
00008DA5 11 93 16 70        	                r1=[P_DAC2];
00008DA7 09 B3 C0 FF        	                r1 &= ~0x003f;
00008DA9 09 43 00 80        	                cmp     r1,0x8000
00008DAB 0E 0E              	                jb     	L_RU_NormalUp_;  
00008DAC 5D 5E              	                je      L_RU_End;
                            	                
                            	L_RU_DownLoop_:
00008DAD 40 F0 DA 8D        	                call    F_Delay;        
00008DAF 41 94              	                r2 = 0x0001;
00008DB0 1A D5 12 70        	                [P_Watchdog_Clear] = r2;
00008DB2 09 23 40 00        	                r1 -= 0x40;
00008DB4 19 D3 16 70        	                [P_DAC2] = r1;
00008DB6 09 43 00 80        	                cmp     r1,0x8000;
00008DB8 4C 4E              	                jne     L_RU_DownLoop_;  
                            	L_RD_DownEnd_:
00008DB9 0C EE              	                jmp     L_RU_End_;
                            	
                            	L_RU_NormalUp_:
                            	L_RU_Loop_:
00008DBA 40 F0 DA 8D        	                call    F_Delay;
00008DBC 41 94              	                r2 = 0x0001;
00008DBD 1A D5 12 70        	                [P_Watchdog_Clear] = r2;
00008DBF 09 03 40 00        	                r1 += 0x40;
00008DC1 19 D3 16 70        	                [P_DAC2] = r1;
00008DC3 09 43 00 80        	                cmp     r1, 0x8000;
00008DC5 4C 4E              	                jne     L_RU_Loop_;
                            	                
                            	
                            	L_RU_End_:
00008DC6 90 90              	                pop     r1,r2 from [sp];
00008DC7 90 9A              	                retf;
                            	                .ENDP
                            	/////////////////////////////////////// 
                            	_SP_RampDnDAC2:	.PROC
                            	F_SP_RampDnDAC2:
                            					//int off;
00008DC8 90 D4              					push r1,r2 to [sp];
                            	                
00008DC9 11 93 16 70        	                r1 = [P_DAC2];
00008DCB 09 B3 C0 FF        	                r1 &= ~0x003F;
00008DCD 0A 5E              	                jz      L_RD_End_;
                            	L_RD_Loop_:                
00008DCE 40 F0 DA 8D        	                call    F_Delay;        
00008DD0 41 94              	                r2 = 0x0001;
00008DD1 1A D5 12 70        	                [P_Watchdog_Clear] = r2;
00008DD3 09 23 40 00        	                r1 -= 0x40;
00008DD5 19 D3 16 70        	                [P_DAC2] = r1;  
00008DD7 4A 4E              	                jnz     L_RD_Loop_;
                            	L_RD_End_:       
                            	                
00008DD8 90 90              	                pop     r1,r2 from [sp];
00008DD9 90 9A              	                retf;
                            					.ENDP
                            	////////////////////////////////////////
                            	
                            	F_Delay:
00008DDA 88 D2              	                push r1 to [sp];
00008DDB 48 92              	                r1 = 8;
                            	L_D_Loop:
00008DDC 41 22              	                r1 -= 1;
00008DDD 42 4E              	                jnz     L_D_Loop; 
00008DDE 88 90              	                pop     r1 from [sp];
00008DDF 90 9A              	                retf;	 
                            	                
                            	                
                            	///////////////////////////////////////////
                            	// Function: Initial Queue
                            	// Destory: R1,R2
                            	///////////////////////////////////////////	
                            	
                            	F_SP_InitQueue:
00008DE0 09 93 FA 02        			R1 = R_Queue;
00008DE2 40 94              			R2 = 0;
                            	L_ClearQueueLoop:		
00008DE3 D1 D4              			[R1++] = R2;
00008DE4 09 43 2C 03        			cmp	R1, R_Queue+C_QueueSize;
00008DE6 44 4E              			jne	L_ClearQueueLoop;
                            				
00008DE7 40 92              			R1 = 0;
00008DE8 19 D3 2C 03        			[R_ReadIndex] = R1;
00008DEA 19 D3 2D 03        			[R_WriteIndex] = R1;
                            					
00008DEC 90 9A              			retf;
                            			
                            	///////////////////////////////////////////
                            	// Function: Get a data form Queue
                            	// Output:  R1: Data
                            	//			R2: return value
                            	// Destory: R1,R2
                            	///////////////////////////////////////////		
                            	F_SP_ReadQueue:
                            	
00008DED 12 95 2C 03        			R2 = [R_ReadIndex];
00008DEF 12 45 2D 03        			cmp R2,[R_WriteIndex];
00008DF1 0C 5E              			je	L_RQ_QueueEmpty;
                            	
00008DF2 0A 05 FA 02        			R2 += R_Queue;				// get queue data address
00008DF4 C2 92              			R1 = [R2];
                            			
00008DF5 12 95 2C 03        			R2 = [R_ReadIndex];
00008DF7 41 04              			R2 += 1;
00008DF8 72 44              			cmp	R2, C_QueueSize;
00008DF9 01 4E              			jne	L_RQ_NotQueueBottom;
00008DFA 40 94              			R2 = 0;
                            	L_RQ_NotQueueBottom:	
00008DFB 1A D5 2C 03        			[R_ReadIndex] = R2;			
                            			//r2 = 0x0000;						// get queue data
00008DFD 90 9A              			retf;
                            	
                            	L_RQ_QueueEmpty:
                            			//r2 = 0x8000;						// queue empty
00008DFE 90 9A              			retf;
                            	///////////////////////////////////////////
                            	// Function: Put a data to Queue
                            	// R1: Input
                            	// Destory: R1,R2,R3
                            	///////////////////////////////////////////	
                            				
                            	F_SP_WriteQueue:
00008DFF 12 95 2D 03        			R2 = [R_WriteIndex];			// put data to queue
00008E01 0A 05 FA 02        			R2 += R_Queue;
00008E03 C2 D2              			[R2] = R1;
                            	
00008E04 12 95 2D 03        			R2 = [R_WriteIndex];
00008E06 41 04              			R2 += 1;
00008E07 72 44              			cmp	R2, C_QueueSize;
00008E08 01 4E              			jne	L_WQ_NotQueueBottom;
00008E09 40 94              			R2 = 0;
                            	L_WQ_NotQueueBottom:
00008E0A 1A D5 2D 03        			[R_WriteIndex] = R2;
00008E0C 90 9A              			retf;
                            			
                            	//..........................................
                            	F_SP_TestQueue:
                            			//... Test Queue Empty ...
00008E0D 11 93 2C 03        			R1 = [R_ReadIndex];
00008E0F 11 43 2D 03        			cmp R1,[R_WriteIndex];
00008E11 11 5E              			je	L_TQ_QueueEmpty;
                            	
                            			//... Test Queue Full ...
00008E12 11 93 2C 03        			R1 = [R_ReadIndex];				// For N Queue Full: 1. W=R-1 2.R=0/W=N-1
00008E14 04 4E              			jnz	L_TQ_JudgeCond2;
00008E15 11 93 2D 03        			R1 = [R_WriteIndex];
00008E17 71 42              			cmp	R1, C_QueueSize-1;			// Cond1
00008E18 08 5E              			je	L_TQ_QueueFull;			
                            	L_TQ_JudgeCond2:		
00008E19 11 93 2C 03        			R1 = [R_ReadIndex];
00008E1B 41 22              			R1 -=1;
00008E1C 11 43 2D 03        			cmp R1,[R_WriteIndex];
00008E1E 02 5E              			je	L_TQ_QueueFull;	
                            	
00008E1F 40 92              			r1 = 0;							// not Full, not empty
00008E20 90 9A              			retf;
                            	L_TQ_QueueFull:
00008E21 41 92              			r1 = 1;							// full
00008E22 90 9A              			retf;
                            	L_TQ_QueueEmpty:
00008E23 42 92              			r1 = 2;							// empty
00008E24 90 9A              			retf;
                            	//.........................................                
                            	
                            	//////////////////////////////////////////////////////
                            	// SACM_GetResource(Address,Page,offset);
                            	//////////////////////////////////////////////////////
                            	
                            	_SP_GetResource:	.PROC
00008E25 88 DA              			push bp to [sp];
00008E26 08 0B 01 00        			bp = sp + 1;
                            			//push r2 to [sp];
00008E28 03 92              			r1 = [bp+3];					// address
00008E29 04 94              			r2 = [bp+4];					// bank
                            			
00008E2A 5A 95              			r2 = r2 lsl 4;
00008E2B 5A 95              			r2 = r2 lsl 4;
00008E2C 4A 95              			r2 = r2 lsl 2;
                            			
00008E2D 7F BC              			sr &= 0x03f;
00008E2E 06 A5              	        r2 |=sr;
00008E2F 02 9D              	        sr = r2;
                            	  
00008E30 E1 92              	  		r1 = D:[r1];
                            	       
                            			//pop	r2 from [sp];
00008E31 88 98              			pop	 bp from [sp];
00008E32 90 9A              			retf;
                            			.ENDP 
                            	
                            	_SP_Delay:	.PROC
                            	F_SP_Delay:
                            	
                            	
00008E33 90 9A              			retf;
                            			.ENDP
                            	                
                            	//========================================================================================        
                            	// End of hardware.asm
                            	//========================================================================================
                            	
                            	
                            	
                            	        
                            	        
                            	        
0 error(s), 0 warning(s).

