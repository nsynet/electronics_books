__start:
__text_start:
    001B E5CF      LDI	R28,0x5F
    001C E0D4      LDI	R29,4
    001D BFCD      OUT	0x3D,R28
    001E BFDE      OUT	0x3E,R29
    001F 51C0      SUBI	R28,0x10
    0020 40D0      SBCI	R29,0
    0021 EA0A      LDI	R16,0xAA
    0022 8308      STD	Y+0,R16
    0023 2400      CLR	R0
    0024 E6EF      LDI	R30,0x6F
    0025 E0F0      LDI	R31,0
    0026 E010      LDI	R17,0
    0027 37E9      CPI	R30,0x79
    0028 07F1      CPC	R31,R17
    0029 F011      BEQ	0x002C
    002A 9201      ST	R0,Z+
    002B CFFB      RJMP	0x0027
    002C 8300      STD	Z+0,R16
    002D E2E6      LDI	R30,0x26
    002E E0F0      LDI	R31,0
    002F E6A0      LDI	R26,0x60
    0030 E0B0      LDI	R27,0
    0031 E010      LDI	R17,0
    0032 33E5      CPI	R30,0x35
    0033 07F1      CPC	R31,R17
    0034 F021      BEQ	0x0039
    0035 95C8      LPM
    0036 9631      ADIW	R30,1
    0037 920D      ST	R0,X+
    0038 CFF9      RJMP	0x0032
    0039 D087      RCALL	_main
_exit:
    003A CFFF      RJMP	_exit
_delay:
  i                    --> R20
  j                    --> R22
  t                    --> R16
    003B D0D3      RCALL	push_gset2
FILE: D:\Proteus仿真实例\ATMEGA8\数码管计数器设计\icc\chengxu.c
(0001) #include <iom8v.h>
(0002) #define uchar unsigned char 
(0003) #define uint unsigned int
(0004) uchar duan[10]={0xc0,0Xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};	 //所需的段的位码
(0005) //uchar wei[4]={0XFE,0XFD,0XFB,0XF7};                                 //位的控制端	(开发板)
(0006) uchar wei[4]={0X08,0X04,0X02,0X01};                                 //位的控制端	(仿真)
(0007) uint z,x,c,v, date;	//定义数据类型
(0008) uchar CNT=0;//计数初值
(0009) /******************************************************************
(0010) 
(0011) 延时函数
(0012) 
(0013) ******************************************************************/
(0014) void delay(uchar t)
(0015) {
(0016)   uchar i,j;
(0017)    for(i=0;i<t;i++)
    003C 2744      CLR	R20
    003D C007      RJMP	0x0045
(0018)    {
(0019)    	 for(j=13;j>0;j--);
    003E E06D      LDI	R22,0xD
    003F C001      RJMP	0x0041
    0040 956A      DEC	R22
    0041 2422      CLR	R2
    0042 1626      CP	R2,R22
    0043 F3E0      BCS	0x0040
    0044 9543      INC	R20
    0045 1740      CP	R20,R16
    0046 F3B8      BCS	0x003E
    0047 D0AE      RCALL	pop_gset2
    0048 9508      RET
(0020) 	 { ;
(0021) 	 }
(0022)    }
(0023) }
(0024) 
(0025) /**********************************************************************
(0026)                 数码管动态扫描
(0027) *********************************************************************/
(0028) void xianshi()
(0029)  { 
(0030)  /*****************数据转换*****************************/ 
(0031)   z=date/1000;			 //求千位
_xianshi:
    0049 EE28      LDI	R18,0xE8
    004A E033      LDI	R19,3
    004B 9100006F  LDS	R16,_date
    004D 91100070  LDS	R17,_date+1
    004F D08C      RCALL	div16u
    0050 93100078  STS	_z+1,R17
    0052 93000077  STS	_z,R16
(0032)   x=date%1000/100;		 //求百位
    0054 EE28      LDI	R18,0xE8
    0055 E033      LDI	R19,3
    0056 9100006F  LDS	R16,_date
    0058 91100070  LDS	R17,_date+1
    005A D07F      RCALL	mod16u
    005B E624      LDI	R18,0x64
    005C E030      LDI	R19,0
    005D D07E      RCALL	div16u
    005E 93100076  STS	_x+1,R17
    0060 93000075  STS	_x,R16
(0033)   c=date%100/10;		 //求十位
    0062 E624      LDI	R18,0x64
    0063 E030      LDI	R19,0
    0064 9100006F  LDS	R16,_date
    0066 91100070  LDS	R17,_date+1
    0068 D071      RCALL	mod16u
    0069 E02A      LDI	R18,0xA
    006A E030      LDI	R19,0
    006B D070      RCALL	div16u
    006C 93100074  STS	_c+1,R17
    006E 93000073  STS	_c,R16
(0034)   v=date%10;			 //求个位
    0070 E02A      LDI	R18,0xA
    0071 E030      LDI	R19,0
    0072 9100006F  LDS	R16,_date
    0074 91100070  LDS	R17,_date+1
    0076 D063      RCALL	mod16u
    0077 93100072  STS	_v+1,R17
    0079 93000071  STS	_v,R16
(0035) 
(0036)       PORTC=wei[0];
    007B 9020006A  LDS	R2,0x6A
    007D BA25      OUT	0x15,R2
(0037) 	  PORTB=duan[z];
    007E E680      LDI	R24,0x60
    007F E090      LDI	R25,0
    0080 91E00077  LDS	R30,_z
    0082 91F00078  LDS	R31,_z+1
    0084 0FE8      ADD	R30,R24
    0085 1FF9      ADC	R31,R25
    0086 8020      LDD	R2,Z+0
    0087 BA28      OUT	0x18,R2
(0038) 	  delay(50);  
    0088 E302      LDI	R16,0x32
    0089 DFB1      RCALL	_delay
(0039)   	  PORTC=wei[1];
    008A 9020006B  LDS	R2,0x6B
    008C BA25      OUT	0x15,R2
(0040)       PORTB=duan[x];
    008D E680      LDI	R24,0x60
    008E E090      LDI	R25,0
    008F 91E00075  LDS	R30,_x
    0091 91F00076  LDS	R31,_x+1
    0093 0FE8      ADD	R30,R24
    0094 1FF9      ADC	R31,R25
    0095 8020      LDD	R2,Z+0
    0096 BA28      OUT	0x18,R2
(0041) 	  delay(50);  
    0097 E302      LDI	R16,0x32
    0098 DFA2      RCALL	_delay
(0042)    	  PORTC=wei[2];
    0099 9020006C  LDS	R2,0x6C
    009B BA25      OUT	0x15,R2
(0043)       PORTB=duan[c];
    009C E680      LDI	R24,0x60
    009D E090      LDI	R25,0
    009E 91E00073  LDS	R30,_c
    00A0 91F00074  LDS	R31,_c+1
    00A2 0FE8      ADD	R30,R24
    00A3 1FF9      ADC	R31,R25
    00A4 8020      LDD	R2,Z+0
    00A5 BA28      OUT	0x18,R2
(0044) 	  delay(50);  
    00A6 E302      LDI	R16,0x32
    00A7 DF93      RCALL	_delay
(0045)       PORTC=wei[3];
    00A8 9020006D  LDS	R2,0x6D
    00AA BA25      OUT	0x15,R2
(0046)       PORTB=duan[v];
    00AB E680      LDI	R24,0x60
    00AC E090      LDI	R25,0
    00AD 91E00071  LDS	R30,_v
    00AF 91F00072  LDS	R31,_v+1
    00B1 0FE8      ADD	R30,R24
    00B2 1FF9      ADC	R31,R25
    00B3 8020      LDD	R2,Z+0
    00B4 BA28      OUT	0x18,R2
(0047) 	  delay(50);  
    00B5 E302      LDI	R16,0x32
    00B6 DF84      RCALL	_delay
    00B7 9508      RET
(0048)  			               
(0049) 
(0050)  }
(0051) //////////////////////////////初始化////////////////////////////////////
(0052) void Init_IO(void)//初始化I/O
(0053) {
(0054) //设置B口为输入
(0055) DDRB=0xFF;
_Init_IO:
    00B8 EF8F      LDI	R24,0xFF
    00B9 BB87      OUT	0x17,R24
(0056) PORTB=0xFF;
    00BA BB88      OUT	0x18,R24
(0057) //设置C口为输出
(0058) DDRC=0xFF;
    00BB BB84      OUT	0x14,R24
(0059) PORTC=0xFF;
    00BC BB85      OUT	0x15,R24
(0060) //设置D口为输出
(0061) DDRD=0X00;
    00BD 2422      CLR	R2
    00BE BA21      OUT	0x11,R2
(0062) PORTD=0x00;
    00BF BA22      OUT	0x12,R2
    00C0 9508      RET
(0063) }
(0064) /////////////////////////////主函数/////////////////////////////////////
(0065) void main(void)
(0066) {
(0067) uchar Load;
(0068) Init_IO();  //初始化I/O
_main:
  Load                 --> R20
    00C1 DFF6      RCALL	_Init_IO
(0069) PORTC=0XFF; //点亮数码管
    00C2 EF8F      LDI	R24,0xFF
    00C3 BB85      OUT	0x15,R24
(0070) PORTB=0X00; //点亮数码管
    00C4 2422      CLR	R2
    00C5 BA28      OUT	0x18,R2
(0071) delay(30);//延时
    00C6 E10E      LDI	R16,0x1E
    00C7 DF73      RCALL	_delay
(0072) PORTB=0xff; //关闭数码管
    00C8 EF8F      LDI	R24,0xFF
    00C9 BB88      OUT	0x18,R24
(0073) TCCR0=0x06; //T/C0工作方式选择，系统时钟256分频
    00CA E086      LDI	R24,6
    00CB BF83      OUT	0x33,R24
(0074) TCNT0=CNT; //计数初始值
    00CC 9020006E  LDS	R2,0x6E
    00CE BE22      OUT	0x32,R2
    00CF C008      RJMP	0x00D8
(0075) //TIMSK=0x01;  //使能T0溢出中断
(0076) //(上一句可以改为)TIMSK |= (1<<TOIE0);  //使能T0溢出中断
(0077) //SREG=0x80;  //使能全局中断
(0078) //(上一句可以改为)SREG |= (1<<7);  //使能全局中断
(0079) while(1)
(0080) {
(0081)  Load=TCNT0;
    00D0 B742      IN	R20,0x32
(0082)  date=Load;
    00D1 2E24      MOV	R2,R20
    00D2 2433      CLR	R3
    00D3 92300070  STS	_date+1,R3
    00D5 9220006F  STS	_date,R2
(0083)  xianshi();
FILE: <library>
    00D7 DF71      RCALL	_xianshi
    00D8 CFF7      RJMP	0x00D0
    00D9 9508      RET
mod16u:
    00DA 9468      BSET	6
    00DB C001      RJMP	xdiv16u
div16u:
    00DC 94E8      BCLR	6
xdiv16u:
    00DD 92EA      ST	R14,-Y
    00DE 92FA      ST	R15,-Y
    00DF 938A      ST	R24,-Y
    00E0 24EE      CLR	R14
    00E1 24FF      CLR	R15
    00E2 E180      LDI	R24,0x10
    00E3 0F00      LSL	R16
    00E4 1F11      ROL	R17
    00E5 1CEE      ROL	R14
    00E6 1CFF      ROL	R15
    00E7 16E2      CP	R14,R18
    00E8 06F3      CPC	R15,R19
    00E9 F018      BCS	0x00ED
    00EA 1AE2      SUB	R14,R18
    00EB 0AF3      SBC	R15,R19
    00EC 9503      INC	R16
    00ED 958A      DEC	R24
    00EE F7A1      BNE	0x00E3
    00EF F416      BRTC	0x00F2
    00F0 2D0E      MOV	R16,R14
    00F1 2D1F      MOV	R17,R15
    00F2 9189      LD	R24,Y+
    00F3 90F9      LD	R15,Y+
    00F4 90E9      LD	R14,Y+
    00F5 9508      RET
pop_gset2:
    00F6 E0E2      LDI	R30,2
    00F7 C004      RJMP	pop
push_gset1:
    00F8 935A      ST	R21,-Y
    00F9 934A      ST	R20,-Y
    00FA 9508      RET
pop_gset1:
    00FB E0E1      LDI	R30,1
pop:
    00FC 9149      LD	R20,Y+
    00FD 9159      LD	R21,Y+
    00FE FDE0      SBRC	R30,0
    00FF 9508      RET
    0100 9169      LD	R22,Y+
    0101 9179      LD	R23,Y+
    0102 FDE1      SBRC	R30,1
    0103 9508      RET
    0104 90A9      LD	R10,Y+
    0105 90B9      LD	R11,Y+
    0106 FDE2      SBRC	R30,2
    0107 9508      RET
    0108 90C9      LD	R12,Y+
    0109 90D9      LD	R13,Y+
    010A FDE3      SBRC	R30,3
    010B 9508      RET
    010C 90E9      LD	R14,Y+
    010D 90F9      LD	R15,Y+
    010E 9508      RET
push_gset2:
    010F 937A      ST	R23,-Y
    0110 936A      ST	R22,-Y
    0111 CFE6      RJMP	push_gset1
