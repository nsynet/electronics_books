__start:
__text_start:
    0032 E5CF      LDI	R28,0x5F
    0033 E0D4      LDI	R29,4
    0034 BFCD      OUT	0x3D,R28
    0035 BFDE      OUT	0x3E,R29
    0036 51C0      SUBI	R28,0x10
    0037 40D0      SBCI	R29,0
    0038 EA0A      LDI	R16,0xAA
    0039 8308      STD	Y+0,R16
    003A 2400      CLR	R0
    003B E7E0      LDI	R30,0x70
    003C E0F0      LDI	R31,0
    003D E010      LDI	R17,0
    003E 37E5      CPI	R30,0x75
    003F 07F1      CPC	R31,R17
    0040 F011      BEQ	0x0043
    0041 9201      ST	R0,Z+
    0042 CFFB      RJMP	0x003E
    0043 8300      STD	Z+0,R16
    0044 E5E4      LDI	R30,0x54
    0045 E0F0      LDI	R31,0
    0046 E6A0      LDI	R26,0x60
    0047 E0B0      LDI	R27,0
    0048 E010      LDI	R17,0
    0049 36E4      CPI	R30,0x64
    004A 07F1      CPC	R31,R17
    004B F021      BEQ	0x0050
    004C 95C8      LPM
    004D 9631      ADIW	R30,1
    004E 920D      ST	R0,X+
    004F CFF9      RJMP	0x0049
    0050 940E00BE  CALL	_main
_exit:
    0052 CFFF      RJMP	_exit
_DelayMs:
  j                    --> R20
  i                    --> R16
    0053 940E00F9  CALL	push_gset1
FILE: D:\整理\个人总结的M8程序\014、Eeprom的c语言编程\icc\chengxu.c
(0001) #include <iom16v.h>
(0002) #include <macros.h> 
(0003) #define uchar unsigned char
(0004) #define uint  unsigned int
(0005) /**********************************************************************
(0006) 								定义数组								   	
(0007) **********************************************************************/
(0008) //数码管字型表，对应0，1，2，3，4，5，6，7，8，9，A,B,C,D,E,F//
(0009) uchar Table[16]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
(0010)                  0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0011) uchar Read_Data[4];            //定义读出4字节数据
(0012) 
(0013)  uchar i;
(0014) /**********************************************************************
(0015) 								延时函数								   	
(0016) **********************************************************************/
(0017) void DelayMs(uint i)           //Ms级延时，参数i为延时时间
(0018) {uint j;
(0019)  for(;i!=0;i--)
    0055 C00A      RJMP	0x0060
(0020)   {for(j=8000;j!=0;j--) {;}}
    0056 E440      LDI	R20,0x40
    0057 E15F      LDI	R21,0x1F
    0058 C002      RJMP	0x005B
    0059 5041      SUBI	R20,1
    005A 4050      SBCI	R21,0
    005B 3040      CPI	R20,0
    005C 0745      CPC	R20,R21
    005D F7D9      BNE	0x0059
    005E 5001      SUBI	R16,1
    005F 4010      SBCI	R17,0
    0060 3000      CPI	R16,0
    0061 0701      CPC	R16,R17
    0062 F799      BNE	0x0056
    0063 940E00FC  CALL	pop_gset1
    0065 9508      RET
_Display:
  sel                  --> R20
  i                    --> R22
  p                    --> R10
    0066 940E0114  CALL	push_gset3
    0068 0158      MOVW	R10,R16
(0021) }
(0022) /**********************************************************************
(0023) 				            显示函数		
(0024) 注意：使用开发板时sel=0xef;
(0025) **********************************************************************/
(0026) void Display(uchar *p)         //动态显示函数，参数p为待显示的数组名
(0027) {uchar i,sel=0x01;           
    0069 E041      LDI	R20,1
(0028)  for(i=0;i<4;i++)
    006A 2766      CLR	R22
    006B C013      RJMP	0x007F
(0029)   {PORTC=sel;                  //选通最右边的数码管
    006C BB45      OUT	0x15,R20
(0030)    PORTB=~Table[p[i]];          //送字型码
    006D 2FE6      MOV	R30,R22
    006E 27FF      CLR	R31
    006F 0DEA      ADD	R30,R10
    0070 1DFB      ADC	R31,R11
    0071 81E0      LDD	R30,Z+0
    0072 27FF      CLR	R31
    0073 E680      LDI	R24,0x60
    0074 E090      LDI	R25,0
    0075 0FE8      ADD	R30,R24
    0076 1FF9      ADC	R31,R25
    0077 8020      LDD	R2,Z+0
    0078 9420      COM	R2
    0079 BA28      OUT	0x18,R2
(0031)    DelayMs(1);                 //显示延时    
    007A E001      LDI	R16,1
    007B E010      LDI	R17,0
    007C DFD6      RCALL	_DelayMs
(0032)    sel=sel<<1;                 //移位以显示前一位
    007D 0F44      LSL	R20
    007E 9563      INC	R22
    007F 3064      CPI	R22,4
    0080 F358      BCS	0x006C
    0081 940E00F6  CALL	pop_gset3
    0083 9508      RET
(0033)   }
(0034) }
(0035) /**********************************************************************
(0036) 								初始化I/O口								   	
(0037) **********************************************************************/
(0038) void Init_IO(void)             //初始化I/O口
(0039) {DDRB=0xff;                    //设置B口为推挽1输出
_Init_IO:
    0084 EF8F      LDI	R24,0xFF
    0085 BB87      OUT	0x17,R24
(0040)  PORTB=0xff;
    0086 BB88      OUT	0x18,R24
(0041)  DDRC=0xff;                    //设置C口为推挽1输出             
    0087 BB84      OUT	0x14,R24
(0042)  PORTC=0xff;
    0088 BB85      OUT	0x15,R24
(0043)  DDRD=0x00;                    //设置C口为推挽1输出             
    0089 2422      CLR	R2
    008A BA21      OUT	0x11,R2
(0044)  PORTD=0x00;
    008B BA22      OUT	0x12,R2
    008C 9508      RET
_Write_EEPROM:
  Address              --> R22
  Data                 --> R20
    008D 940E0110  CALL	push_gset2
    008F 01B9      MOVW	R22,R18
    0090 2F40      MOV	R20,R16
(0045) }
(0046) /**********************************************************************
(0047) 		  写一字节到EEPROM数据	
(0048) 		参数：Date：写入的数据；  
(0049) 		    Address:写入的地址					   	
(0050) **********************************************************************/
(0051) void Write_EEPROM(uchar Data,uint Address)
(0052) {if(EECR&0x20) DelayMs(4);//判断写使能是否为0
    0091 9BE5      SBIS	0x1C,5
    0092 C003      RJMP	0x0096
    0093 E004      LDI	R16,4
    0094 E010      LDI	R17,0
    0095 DFBD      RCALL	_DelayMs
(0053)  EEARH=Address>>8;        //送高地址
    0096 011B      MOVW	R2,R22
    0097 2C23      MOV	R2,R3
    0098 2433      CLR	R3
    0099 BA2F      OUT	0x1F,R2
(0054)  EEARL=Address&0x00ff;    //送低地址
    009A 01CB      MOVW	R24,R22
    009B 7090      ANDI	R25,0
    009C BB8E      OUT	0x1E,R24
(0055)  EEDR=Data;               //送数据
    009D BB4D      OUT	0x1D,R20
(0056)  EECR=EECR|0x04;          //主写使能置位
    009E 9AE2      SBI	0x1C,2
(0057)  EECR=EECR|0x02;          //写使能置位
    009F 9AE1      SBI	0x1C,1
(0058)  DelayMs(4);              //延时（写入时间约在2.5ms~4ms）
    00A0 E004      LDI	R16,4
    00A1 E010      LDI	R17,0
    00A2 DFB0      RCALL	_DelayMs
    00A3 940E00F3  CALL	pop_gset2
    00A5 9508      RET
_Read_EEPROM:
  i                    --> R20
  Address              --> R20
    00A6 940E00F9  CALL	push_gset1
    00A8 01A8      MOVW	R20,R16
(0059) }
(0060) /**********************************************************************
(0061) 			读一字节到EEPROM数据	
(0062) 		参数:Address：写入的地址；返回值：读取的内容							   	
(0063) **********************************************************************/
(0064) uchar Read_EEPROM(uint Address)
(0065) {uchar i;
(0066)  if(EECR&0x01) DelayMs(4);//判断读使能是否为0
    00A9 9BE0      SBIS	0x1C,0
    00AA C003      RJMP	0x00AE
    00AB E004      LDI	R16,4
    00AC E010      LDI	R17,0
    00AD DFA5      RCALL	_DelayMs
(0067)  EEARH=Address>>8;        //送高地址
    00AE 011A      MOVW	R2,R20
    00AF 2C23      MOV	R2,R3
    00B0 2433      CLR	R3
    00B1 BA2F      OUT	0x1F,R2
(0068)  EEARL=Address&0x00ff;    //送低地址
    00B2 01CA      MOVW	R24,R20
    00B3 7090      ANDI	R25,0
    00B4 BB8E      OUT	0x1E,R24
(0069)  EECR=EECR|0x01;          //读使能置位
    00B5 9AE0      SBI	0x1C,0
(0070)  DelayMs(5);              //延时
    00B6 E005      LDI	R16,5
    00B7 E010      LDI	R17,0
    00B8 DF9A      RCALL	_DelayMs
(0071)  i=EEDR;                  //读数据
    00B9 B34D      IN	R20,0x1D
(0072)  return(i);
    00BA 2F04      MOV	R16,R20
    00BB 940E00FC  CALL	pop_gset1
    00BD 9508      RET
(0073) }
(0074) /**********************************************************************
(0075) 								主函数								   	
(0076) **********************************************************************/
(0077) void main(void)
(0078) {
(0079) 
(0080)  Init_IO();                    //初始化I/O口
_main:
    00BE DFC5      RCALL	_Init_IO
(0081) /**********************************************************************
(0082) 读写多个数据 开始
(0083) **********************************************************************/
(0084)  for(i=0;i<4;i++)              //写四位数据：0x00、0x04、0x08、0x0c
    00BF 2422      CLR	R2
    00C0 92200070  STS	_i,R2
    00C2 C00D      RJMP	0x00D0
(0085)     Write_EEPROM(3*i,i);       //写四位数据：0x00、0x04、0x08、0x0c
    00C3 91200070  LDS	R18,_i
    00C5 2733      CLR	R19
    00C6 2E22      MOV	R2,R18
    00C7 E083      LDI	R24,3
    00C8 9D82      MUL	R24,R2
    00C9 2D00      MOV	R16,R0
    00CA DFC2      RCALL	_Write_EEPROM
    00CB 91800070  LDS	R24,_i
    00CD 5F8F      SUBI	R24,0xFF
    00CE 93800070  STS	_i,R24
    00D0 91800070  LDS	R24,_i
    00D2 3084      CPI	R24,4
    00D3 F378      BCS	0x00C3
(0086)  for(i=0;i<4;i++)
    00D4 2422      CLR	R2
    00D5 92200070  STS	_i,R2
    00D7 C011      RJMP	0x00E9
(0087)    Read_Data[i]=Read_EEPROM(i);//读出四位数据
    00D8 91000070  LDS	R16,_i
    00DA 2711      CLR	R17
    00DB DFCA      RCALL	_Read_EEPROM
    00DC E781      LDI	R24,0x71
    00DD E090      LDI	R25,0
    00DE 91E00070  LDS	R30,_i
    00E0 27FF      CLR	R31
    00E1 0FE8      ADD	R30,R24
    00E2 1FF9      ADC	R31,R25
    00E3 8300      STD	Z+0,R16
    00E4 91800070  LDS	R24,_i
    00E6 5F8F      SUBI	R24,0xFF
    00E7 93800070  STS	_i,R24
    00E9 91800070  LDS	R24,_i
    00EB 3084      CPI	R24,4
    00EC F358      BCS	0x00D8
    00ED C003      RJMP	0x00F1
(0088)  while(1)
(0089)  Display(Read_Data);            //显示四位数据 048c*/
FILE: <library>
    00EE E701      LDI	R16,0x71
    00EF E010      LDI	R17,0
    00F0 DF75      RCALL	_Display
    00F1 CFFC      RJMP	0x00EE
    00F2 9508      RET
pop_gset2:
    00F3 E0E2      LDI	R30,2
    00F4 940C00FD  JMP	pop
pop_gset3:
    00F6 E0E4      LDI	R30,4
    00F7 940C00FD  JMP	pop
push_gset1:
    00F9 935A      ST	R21,-Y
    00FA 934A      ST	R20,-Y
    00FB 9508      RET
pop_gset1:
    00FC E0E1      LDI	R30,1
pop:
    00FD 9149      LD	R20,Y+
    00FE 9159      LD	R21,Y+
    00FF FDE0      SBRC	R30,0
    0100 9508      RET
    0101 9169      LD	R22,Y+
    0102 9179      LD	R23,Y+
    0103 FDE1      SBRC	R30,1
    0104 9508      RET
    0105 90A9      LD	R10,Y+
    0106 90B9      LD	R11,Y+
    0107 FDE2      SBRC	R30,2
    0108 9508      RET
    0109 90C9      LD	R12,Y+
    010A 90D9      LD	R13,Y+
    010B FDE3      SBRC	R30,3
    010C 9508      RET
    010D 90E9      LD	R14,Y+
    010E 90F9      LD	R15,Y+
    010F 9508      RET
push_gset2:
    0110 937A      ST	R23,-Y
    0111 936A      ST	R22,-Y
    0112 940C00F9  JMP	push_gset1
push_gset3:
    0114 92BA      ST	R11,-Y
    0115 92AA      ST	R10,-Y
    0116 940C0110  JMP	push_gset2
