__start:
__text_start:
    002A E5CF      LDI	R28,0x5F
    002B E0D4      LDI	R29,4
    002C BFCD      OUT	0x3D,R28
    002D BFDE      OUT	0x3E,R29
    002E 51C0      SUBI	R28,0x10
    002F 40D0      SBCI	R29,0
    0030 EA0A      LDI	R16,0xAA
    0031 8308      STD	Y+0,R16
    0032 2400      CLR	R0
    0033 E6E0      LDI	R30,0x60
    0034 E0F0      LDI	R31,0
    0035 E010      LDI	R17,0
    0036 36E0      CPI	R30,0x60
    0037 07F1      CPC	R31,R17
    0038 F011      BEQ	0x003B
    0039 9201      ST	R0,Z+
    003A CFFB      RJMP	0x0036
    003B 8300      STD	Z+0,R16
    003C E5E4      LDI	R30,0x54
    003D E0F0      LDI	R31,0
    003E E6A0      LDI	R26,0x60
    003F E0B0      LDI	R27,0
    0040 E010      LDI	R17,0
    0041 35E4      CPI	R30,0x54
    0042 07F1      CPC	R31,R17
    0043 F021      BEQ	0x0048
    0044 95C8      LPM
    0045 9631      ADIW	R30,1
    0046 920D      ST	R0,X+
    0047 CFF9      RJMP	0x0041
    0048 940E0061  CALL	_main
_exit:
    004A CFFF      RJMP	_exit
_delay:
  i                    --> R20
  j                    --> R22
  MS                   --> R16
    004B 940E008B  CALL	push_gset2
FILE: C:\DOCUME~1\Administrator\桌面\icc参考程序-延时方式\chengxu.c
(0001) ////////////////////////汇诚科技////////////////////
(0002) //////////////////http://www.ourhc.cn///////////////
(0003) ///////////////////步进电机调试程序/////////////////
(0004) #include <iom16v.h>
(0005) #include <macros.h>
(0006) /**********************************************************************
(0007) 				  函数数据类型说明							   	
(0008) **********************************************************************/
(0009) #define uchar unsigned char 
(0010) #define uint unsigned int
(0011) 
(0012) /**********************************************************************
(0013) 				   延时函数						   	
(0014) **********************************************************************/
(0015) void delay(uint MS)		  
(0016) {
(0017)  uint i,j;
(0018)  for( i=0;i<MS;i++)
    004D 2744      CLR	R20
    004E 2755      CLR	R21
    004F C00B      RJMP	0x005B
(0019)  for(j=0;j<80;j++);	//1141是在8MHz晶振下，通过软件仿真反复实验得到的数值
    0050 2766      CLR	R22
    0051 2777      CLR	R23
    0052 C002      RJMP	0x0055
    0053 5F6F      SUBI	R22,0xFF
    0054 4F7F      SBCI	R23,0xFF
    0055 3560      CPI	R22,0x50
    0056 E0E0      LDI	R30,0
    0057 077E      CPC	R23,R30
    0058 F3D0      BCS	0x0053
    0059 5F4F      SUBI	R20,0xFF
    005A 4F5F      SBCI	R21,0xFF
    005B 1740      CP	R20,R16
    005C 0751      CPC	R21,R17
    005D F390      BCS	0x0050
    005E 940E0071  CALL	pop_gset2
    0060 9508      RET
(0020) }
(0021) /**********************************************************************
(0022) 				主函数						   	
(0023) **********************************************************************/
(0024) void main()
(0025) {	 uint i;
(0026) 	 i=10;//改变变量 i 的大小可以改变速度，i越大速度越慢
_main:
  i                    --> R20
    0061 E04A      LDI	R20,0xA
    0062 E050      LDI	R21,0
(0027)      DDRB=0XFF;
    0063 EF8F      LDI	R24,0xFF
    0064 BB87      OUT	0x17,R24
(0028) 	 //PORTC=0XFF;
(0029) 	 PORTB|=BIT(0);//00000001  使能控制开
    0065 9AC0      SBI	0x18,0
(0030) 	 PORTB|=BIT(1);//00000010  四拍工作方式
    0066 9AC1      SBI	0x18,1
(0031) 	 PORTB|=BIT(2);//00000100  正方向旋转
    0067 9AC2      SBI	0x18,2
    0068 C006      RJMP	0x006F
(0032)      while(1)
(0033)      {
(0034) 	    PORTB|=BIT(3);//00001000 脉冲输出
    0069 9AC3      SBI	0x18,3
(0035)      	delay(i);
    006A 018A      MOVW	R16,R20
    006B DFDF      RCALL	_delay
(0036) 		PORTB&=~BIT(3);
    006C 98C3      CBI	0x18,3
(0037) 		delay(i);
FILE: <library>
    006D 018A      MOVW	R16,R20
    006E DFDC      RCALL	_delay
    006F CFF9      RJMP	0x0069
    0070 9508      RET
pop_gset2:
    0071 E0E2      LDI	R30,2
    0072 940C0078  JMP	pop
push_gset1:
    0074 935A      ST	R21,-Y
    0075 934A      ST	R20,-Y
    0076 9508      RET
pop_gset1:
    0077 E0E1      LDI	R30,1
pop:
    0078 9149      LD	R20,Y+
    0079 9159      LD	R21,Y+
    007A FDE0      SBRC	R30,0
    007B 9508      RET
    007C 9169      LD	R22,Y+
    007D 9179      LD	R23,Y+
    007E FDE1      SBRC	R30,1
    007F 9508      RET
    0080 90A9      LD	R10,Y+
    0081 90B9      LD	R11,Y+
    0082 FDE2      SBRC	R30,2
    0083 9508      RET
    0084 90C9      LD	R12,Y+
    0085 90D9      LD	R13,Y+
    0086 FDE3      SBRC	R30,3
    0087 9508      RET
    0088 90E9      LD	R14,Y+
    0089 90F9      LD	R15,Y+
    008A 9508      RET
push_gset2:
    008B 937A      ST	R23,-Y
    008C 936A      ST	R22,-Y
    008D 940C0074  JMP	push_gset1
