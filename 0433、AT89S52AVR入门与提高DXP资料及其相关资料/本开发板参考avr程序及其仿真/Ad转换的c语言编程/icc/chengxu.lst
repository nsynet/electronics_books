__text_start:
__start:
    0031 E5CF      LDI	R28,0x5F
    0032 E0D4      LDI	R29,4
    0033 BFCD      OUT	0x3D,R28
    0034 BFDE      OUT	0x3E,R29
    0035 51C0      SUBI	R28,0x10
    0036 40D0      SBCI	R29,0
    0037 EA0A      LDI	R16,0xAA
    0038 8308      STD	Y+0,R16
    0039 2400      CLR	R0
    003A E6EE      LDI	R30,0x6E
    003B E0F0      LDI	R31,0
    003C E010      LDI	R17,0
    003D 36EE      CPI	R30,0x6E
    003E 07F1      CPC	R31,R17
    003F F011      BEQ	0x0042
    0040 9201      ST	R0,Z+
    0041 CFFB      RJMP	0x003D
    0042 8300      STD	Z+0,R16
    0043 E5E4      LDI	R30,0x54
    0044 E0F0      LDI	R31,0
    0045 E6A0      LDI	R26,0x60
    0046 E0B0      LDI	R27,0
    0047 E010      LDI	R17,0
    0048 36E2      CPI	R30,0x62
    0049 07F1      CPC	R31,R17
    004A F021      BEQ	0x004F
    004B 95C8      LPM
    004C 9631      ADIW	R30,1
    004D 920D      ST	R0,X+
    004E CFF9      RJMP	0x0048
    004F 940E00C6  CALL	_main
_exit:
    0051 CFFF      RJMP	_exit
_DelayMs:
  j                    --> R20
  i                    --> R16
    0052 940E0113  CALL	push_gset1
FILE: D:\Proteus\ATMEGA16\Ad转换的c语言编程\icc\chengxu.c
(0001) #include <iom16v.h>
(0002) #include <macros.h> 
(0003) #define uchar unsigned char
(0004) #define uint  unsigned int
(0005) /**********************************************************************
(0006) 								定义数组								   	
(0007) **********************************************************************/
(0008) uchar Table[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
(0009) uchar Data[4]={0,0,0,0};
(0010) /**********************************************************************
(0011) 								延时函数								   	
(0012) **********************************************************************/
(0013) void DelayMs(uint i)  //0.25ms
(0014) {uchar j;
(0015)  for(;i!=0;i--)
    0054 C007      RJMP	0x005C
(0016)   {for(j=250;j!=0;j--) {;}}
    0055 EF4A      LDI	R20,0xFA
    0056 C001      RJMP	0x0058
    0057 954A      DEC	R20
    0058 2344      TST	R20
    0059 F7E9      BNE	0x0057
    005A 5001      SUBI	R16,1
    005B 4010      SBCI	R17,0
    005C 3000      CPI	R16,0
    005D 0701      CPC	R16,R17
    005E F7B1      BNE	0x0055
    005F 940E0116  CALL	pop_gset1
    0061 9508      RET
_Display:
  sel                  --> R20
  i                    --> R22
  p                    --> R10
    0062 940E012E  CALL	push_gset3
    0064 0158      MOVW	R10,R16
(0017) }
(0018) /**********************************************************************
(0019) 								显示函数								   	
(0020) **********************************************************************/
(0021) void Display(uchar *p) //间隔5ms显示
(0022) {uchar i,sel=0x01;
    0065 E041      LDI	R20,1
(0023)  for(i=0;i<4;i++)
    0066 2766      CLR	R22
    0067 C017      RJMP	0x007F
(0024)   {PORTD=sel;
    0068 BB42      OUT	0x12,R20
(0025)    PORTB=0xff-Table[p[i]];
    0069 2FE6      MOV	R30,R22
    006A 27FF      CLR	R31
    006B 0DEA      ADD	R30,R10
    006C 1DFB      ADC	R31,R11
    006D 81E0      LDD	R30,Z+0
    006E 27FF      CLR	R31
    006F E680      LDI	R24,0x60
    0070 E090      LDI	R25,0
    0071 0FE8      ADD	R30,R24
    0072 1FF9      ADC	R31,R25
    0073 8020      LDD	R2,Z+0
    0074 2433      CLR	R3
    0075 EF8F      LDI	R24,0xFF
    0076 E090      LDI	R25,0
    0077 1982      SUB	R24,R2
    0078 0993      SBC	R25,R3
    0079 BB88      OUT	0x18,R24
(0026)    DelayMs(20);
    007A E104      LDI	R16,0x14
    007B E010      LDI	R17,0
    007C DFD5      RCALL	_DelayMs
(0027)    sel=sel<<1;
    007D 0F44      LSL	R20
    007E 9563      INC	R22
    007F 3064      CPI	R22,4
    0080 F338      BCS	0x0068
    0081 940E0110  CALL	pop_gset3
    0083 9508      RET
_ADC_Convert:
  temp1                --> R22
  temp2                --> R20
    0084 940E012A  CALL	push_gset2
(0028)   }
(0029) }
(0030) /**********************************************************************
(0031) 								电压值处理								   	
(0032) **********************************************************************/
(0033) uint ADC_Convert(void)
(0034) {uint temp1,temp2;
(0035)  temp1=(uint)ADCL;
    0086 B164      IN	R22,0x04
    0087 2777      CLR	R23
(0036)  temp2=(uint)ADCH;
    0088 B145      IN	R20,0x05
    0089 2755      CLR	R21
(0037)  //temp1=2;
(0038)  //temp2=1;
(0039)  //temp2=2356;
(0040)  temp2=(temp2<<8)+temp1;
    008A 011A      MOVW	R2,R20
    008B 2C32      MOV	R3,R2
    008C 2422      CLR	R2
    008D 0E26      ADD	R2,R22
    008E 1E37      ADC	R3,R23
(0041)  temp2=temp2*4;
    008F E004      LDI	R16,4
    0090 E010      LDI	R17,0
    0091 0191      MOVW	R18,R2
    0092 940E00FD  CALL	empy16s
    0094 01A8      MOVW	R20,R16
(0042)  return(temp2);
    0095 940E010D  CALL	pop_gset2
    0097 9508      RET
_Process:
  p                    --> R20
  i                    --> R22
    0098 940E012A  CALL	push_gset2
    009A 01A9      MOVW	R20,R18
    009B 01B8      MOVW	R22,R16
(0043) }
(0044) /**********************************************************************
(0045) 								显示处理								   	
(0046) **********************************************************************/
(0047) void Process(uint i,uchar *p)
(0048) {p[0]=i/1000;
    009C EE28      LDI	R18,0xE8
    009D E033      LDI	R19,3
    009E 018B      MOVW	R16,R22
    009F 940E00E3  CALL	div16u
    00A1 01FA      MOVW	R30,R20
    00A2 8300      STD	Z+0,R16
(0049)  i=i%1000;
    00A3 EE28      LDI	R18,0xE8
    00A4 E033      LDI	R19,3
    00A5 018B      MOVW	R16,R22
    00A6 940E00E1  CALL	mod16u
    00A8 01B8      MOVW	R22,R16
(0050)  p[1]=i/100;
    00A9 E624      LDI	R18,0x64
    00AA E030      LDI	R19,0
    00AB 940E00E3  CALL	div16u
    00AD 01FA      MOVW	R30,R20
    00AE 8301      STD	Z+1,R16
(0051)  i=i%100;
    00AF E624      LDI	R18,0x64
    00B0 E030      LDI	R19,0
    00B1 018B      MOVW	R16,R22
    00B2 940E00E1  CALL	mod16u
    00B4 01B8      MOVW	R22,R16
(0052)  p[2]=i/10;
    00B5 E02A      LDI	R18,0xA
    00B6 E030      LDI	R19,0
    00B7 940E00E3  CALL	div16u
    00B9 01FA      MOVW	R30,R20
    00BA 8302      STD	Z+2,R16
(0053)  i=i%10;
    00BB E02A      LDI	R18,0xA
    00BC E030      LDI	R19,0
    00BD 018B      MOVW	R16,R22
    00BE 940E00E1  CALL	mod16u
    00C0 01B8      MOVW	R22,R16
(0054)  p[3]=i;
    00C1 01FA      MOVW	R30,R20
    00C2 8363      STD	Z+3,R22
    00C3 940E010D  CALL	pop_gset2
    00C5 9508      RET
(0055) }
(0056) /**********************************************************************
(0057) 								主函数								   	
(0058) **********************************************************************/
(0059) void main(void)
(0060) {uint i;
(0061)  DDRA=0x00;                    //设置A口为不带上拉输入；
_main:
  i                    --> R20
    00C6 2422      CLR	R2
    00C7 BA2A      OUT	0x1A,R2
(0062)  PORTA=0x00;
    00C8 BA2B      OUT	0x1B,R2
(0063)  DDRB=0xff;                    //设置B口为推挽1输出；
    00C9 EF8F      LDI	R24,0xFF
    00CA BB87      OUT	0x17,R24
(0064)  PORTB=0xff;
    00CB BB88      OUT	0x18,R24
(0065)  DDRD=0xff;                    //设置C口为推挽1输出；
    00CC BB81      OUT	0x11,R24
(0066)  PORTD=0xff;
    00CD BB82      OUT	0x12,R24
(0067)  PORTB=0x00;                   //B口初始化输出1；C口初始化输出0；点亮全部数码管；
    00CE BA28      OUT	0x18,R2
(0068)  PORTD=0xff;
    00CF BB82      OUT	0x12,R24
(0069)  ADMUX=0x00;                   //选择第一通道；
    00D0 B827      OUT	0x07,R2
(0070)  ADCSR=0xe6;                   //125K转换速率，自由转换模式；启动AD转换器；
    00D1 EE86      LDI	R24,0xE6
    00D2 B986      OUT	0x06,R24
(0071)  DelayMs(3000);                //延时待系统稳定；
    00D3 EB08      LDI	R16,0xB8
    00D4 E01B      LDI	R17,0xB
    00D5 DF7C      RCALL	_DelayMs
    00D6 C008      RJMP	0x00DF
(0072)  while(1)
(0073)  {
(0074)   i=ADC_Convert();             //显示电压值(0~1024)
    00D7 DFAC      RCALL	_ADC_Convert
    00D8 01A8      MOVW	R20,R16
(0075)   //i=5678;
(0076)   Process(i,Data);
    00D9 E62A      LDI	R18,0x6A
    00DA E030      LDI	R19,0
    00DB DFBC      RCALL	_Process
(0077)   Display(Data);
FILE: <library>
    00DC E60A      LDI	R16,0x6A
    00DD E010      LDI	R17,0
    00DE DF83      RCALL	_Display
    00DF CFF7      RJMP	0x00D7
    00E0 9508      RET
mod16u:
    00E1 9468      BSET	6
    00E2 C001      RJMP	xdiv16u
div16u:
    00E3 94E8      BCLR	6
xdiv16u:
    00E4 92EA      ST	R14,-Y
    00E5 92FA      ST	R15,-Y
    00E6 938A      ST	R24,-Y
    00E7 24EE      CLR	R14
    00E8 24FF      CLR	R15
    00E9 E180      LDI	R24,0x10
    00EA 0F00      LSL	R16
    00EB 1F11      ROL	R17
    00EC 1CEE      ROL	R14
    00ED 1CFF      ROL	R15
    00EE 16E2      CP	R14,R18
    00EF 06F3      CPC	R15,R19
    00F0 F018      BCS	0x00F4
    00F1 1AE2      SUB	R14,R18
    00F2 0AF3      SBC	R15,R19
    00F3 9503      INC	R16
    00F4 958A      DEC	R24
    00F5 F7A1      BNE	0x00EA
    00F6 F416      BRTC	0x00F9
    00F7 2D0E      MOV	R16,R14
    00F8 2D1F      MOV	R17,R15
    00F9 9189      LD	R24,Y+
    00FA 90F9      LD	R15,Y+
    00FB 90E9      LD	R14,Y+
    00FC 9508      RET
empy16s:
    00FD 920A      ST	R0,-Y
    00FE 921A      ST	R1,-Y
    00FF 938A      ST	R24,-Y
    0100 939A      ST	R25,-Y
    0101 9F02      MUL	R16,R18
    0102 01C0      MOVW	R24,R0
    0103 9F12      MUL	R17,R18
    0104 0D90      ADD	R25,R0
    0105 9F03      MUL	R16,R19
    0106 0D90      ADD	R25,R0
    0107 018C      MOVW	R16,R24
    0108 9199      LD	R25,Y+
    0109 9189      LD	R24,Y+
    010A 9019      LD	R1,Y+
    010B 9009      LD	R0,Y+
    010C 9508      RET
pop_gset2:
    010D E0E2      LDI	R30,2
    010E 940C0117  JMP	pop
pop_gset3:
    0110 E0E4      LDI	R30,4
    0111 940C0117  JMP	pop
push_gset1:
    0113 935A      ST	R21,-Y
    0114 934A      ST	R20,-Y
    0115 9508      RET
pop_gset1:
    0116 E0E1      LDI	R30,1
pop:
    0117 9149      LD	R20,Y+
    0118 9159      LD	R21,Y+
    0119 FDE0      SBRC	R30,0
    011A 9508      RET
    011B 9169      LD	R22,Y+
    011C 9179      LD	R23,Y+
    011D FDE1      SBRC	R30,1
    011E 9508      RET
    011F 90A9      LD	R10,Y+
    0120 90B9      LD	R11,Y+
    0121 FDE2      SBRC	R30,2
    0122 9508      RET
    0123 90C9      LD	R12,Y+
    0124 90D9      LD	R13,Y+
    0125 FDE3      SBRC	R30,3
    0126 9508      RET
    0127 90E9      LD	R14,Y+
    0128 90F9      LD	R15,Y+
    0129 9508      RET
push_gset2:
    012A 937A      ST	R23,-Y
    012B 936A      ST	R22,-Y
    012C 940C0113  JMP	push_gset1
push_gset3:
    012E 92BA      ST	R11,-Y
    012F 92AA      ST	R10,-Y
    0130 940C012A  JMP	push_gset2
