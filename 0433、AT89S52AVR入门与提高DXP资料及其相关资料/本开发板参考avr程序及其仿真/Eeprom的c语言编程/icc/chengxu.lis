                        .module chengxu.c
                        .area data(ram, con, rel)
 0000           _Table::
 0000                   .blkb 2
                        .area idata
 0000 3F06              .byte 63,6
                        .area data(ram, con, rel)
 0002                   .blkb 2
                        .area idata
 0002 5B4F              .byte 91,'O
                        .area data(ram, con, rel)
 0004                   .blkb 2
                        .area idata
 0004 666D              .byte 'f,'m
                        .area data(ram, con, rel)
 0006                   .blkb 2
                        .area idata
 0006 7D07              .byte 125,7
                        .area data(ram, con, rel)
 0008                   .blkb 2
                        .area idata
 0008 7F6F              .byte 127,'o
                        .area data(ram, con, rel)
 000A                   .blkb 2
                        .area idata
 000A 777C              .byte 'w,124
                        .area data(ram, con, rel)
 000C                   .blkb 2
                        .area idata
 000C 395E              .byte 57,94
                        .area data(ram, con, rel)
 000E                   .blkb 2
                        .area idata
 000E 7971              .byte 'y,'q
                        .area data(ram, con, rel)
 0010                   .dbfile D:\Proteus\ATMEGA16\Eeprom的c语言编程\icc\chengxu.c
 0010                   .dbsym e Table _Table A[16:16]c
                        .area text(rom, con, rel)
 0000                   .dbfile D:\Proteus\ATMEGA16\Eeprom的c语言编程\icc\chengxu.c
 0000                   .dbfunc e DelayMs _DelayMs fV
 0000           ;              j -> R20,R21
 0000           ;              i -> R16,R17
                        .even
 0000           _DelayMs::
 0000 0E940000          xcall push_gset1
 0004                   .dbline -1
 0004                   .dbline 16
 0004           ; #include <iom16v.h>
 0004           ; #include <macros.h> 
 0004           ; #define uchar unsigned char
 0004           ; #define uint  unsigned int
 0004           ; /**********************************************************************
 0004           ;                                                               定义数组                                                                        
 0004           ; **********************************************************************/
 0004           ; //数码管字型表，对应0，1，2，3，4，5，6，7，8，9，A,B,C,D,E,F//
 0004           ; uchar Table[16]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
 0004           ;                  0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
 0004           ; uchar Read_Data[4];            //定义读出4字节数据
 0004           ; /**********************************************************************
 0004           ;                                                               延时函数                                                                        
 0004           ; **********************************************************************/
 0004           ; void DelayMs(uint i)           //Ms级延时，参数i为延时时间
 0004           ; {uint j;
 0004                   .dbline 17
 0004           ;  for(;i!=0;i--)
 0004 0AC0              xjmp L5
 0006           L2:
 0006                   .dbline 18
 0006                   .dbline 18
 0006 40E4              ldi R20,8000
 0008 5FE1              ldi R21,31
 000A 02C0              xjmp L9
 000C           L6:
 000C                   .dbline 18
 000C                   .dbline 18
 000C                   .dbline 18
 000C           L7:
 000C                   .dbline 18
 000C 4150              subi R20,1
 000E 5040              sbci R21,0
 0010           L9:
 0010                   .dbline 18
 0010 4030              cpi R20,0
 0012 4507              cpc R20,R21
 0014 D9F7              brne L6
 0016           X0:
 0016                   .dbline 18
 0016           L3:
 0016                   .dbline 17
 0016 0150              subi R16,1
 0018 1040              sbci R17,0
 001A           L5:
 001A                   .dbline 17
 001A 0030              cpi R16,0
 001C 0107              cpc R16,R17
 001E 99F7              brne L2
 0020           X1:
 0020                   .dbline -2
 0020           L1:
 0020 0E940000          xcall pop_gset1
 0024                   .dbline 0 ; func end
 0024 0895              ret
 0026                   .dbsym r j 20 i
 0026                   .dbsym r i 16 i
 0026                   .dbend
 0026                   .dbfunc e Display _Display fV
 0026           ;            sel -> R20
 0026           ;              i -> R22
 0026           ;              p -> R10,R11
                        .even
 0026           _Display::
 0026 0E940000          xcall push_gset3
 002A 5801              movw R10,R16
 002C                   .dbline -1
 002C                   .dbline 24
 002C           ;   {for(j=8000;j!=0;j--) {;}}
 002C           ; }
 002C           ; /**********************************************************************
 002C           ;                                                               动态显示函数                                                                    
 002C           ; **********************************************************************/
 002C           ; void Display(uchar *p)         //动态显示函数，参数p为待显示的数组名
 002C           ; {uchar i,sel=0x01;           
 002C                   .dbline 24
 002C 41E0              ldi R20,1
 002E                   .dbline 25
 002E           ;  for(i=0;i<4;i++)
 002E 6627              clr R22
 0030 17C0              xjmp L14
 0032           L11:
 0032                   .dbline 26
 0032                   .dbline 26
 0032 45BB              out 0x15,R20
 0034                   .dbline 27
 0034 E62F              mov R30,R22
 0036 FF27              clr R31
 0038 EA0D              add R30,R10
 003A FB1D              adc R31,R11
 003C E081              ldd R30,z+0
 003E FF27              clr R31
 0040 80E0              ldi R24,<_Table
 0042 90E0              ldi R25,>_Table
 0044 E80F              add R30,R24
 0046 F91F              adc R31,R25
 0048 2080              ldd R2,z+0
 004A 3324              clr R3
 004C 8FEF              ldi R24,255
 004E 90E0              ldi R25,0
 0050 8219              sub R24,R2
 0052 9309              sbc R25,R3
 0054 8BBB              out 0x1b,R24
 0056                   .dbline 28
 0056 01E0              ldi R16,1
 0058 10E0              ldi R17,0
 005A D2DF              xcall _DelayMs
 005C                   .dbline 29
 005C 440F              lsl R20
 005E                   .dbline 30
 005E           L12:
 005E                   .dbline 25
 005E 6395              inc R22
 0060           L14:
 0060                   .dbline 25
 0060 6430              cpi R22,4
 0062 38F3              brlo L11
 0064                   .dbline -2
 0064           L10:
 0064 0E940000          xcall pop_gset3
 0068                   .dbline 0 ; func end
 0068 0895              ret
 006A                   .dbsym r sel 20 c
 006A                   .dbsym r i 22 c
 006A                   .dbsym r p 10 pc
 006A                   .dbend
 006A                   .dbfunc e Init_IO _Init_IO fV
                        .even
 006A           _Init_IO::
 006A                   .dbline -1
 006A                   .dbline 36
 006A           ;   {PORTC=sel;                  //选通最右边的数码管
 006A           ;    PORTA=0xff-Table[p[i]];     //送字型码
 006A           ;    DelayMs(1);                 //显示延时    
 006A           ;    sel=sel<<1;                 //移位以显示前一位
 006A           ;   }
 006A           ; }
 006A           ; /**********************************************************************
 006A           ;                                                               初始化I/O口                                                                     
 006A           ; **********************************************************************/
 006A           ; void Init_IO(void)             //初始化I/O口
 006A           ; {DDRA=0xff;                    //设置A口为推挽1输出
 006A                   .dbline 36
 006A 8FEF              ldi R24,255
 006C 8ABB              out 0x1a,R24
 006E                   .dbline 37
 006E           ;  PORTA=0xff;
 006E 8BBB              out 0x1b,R24
 0070                   .dbline 38
 0070           ;  DDRC=0xff;                    //设置C口为推挽1输出             
 0070 84BB              out 0x14,R24
 0072                   .dbline 39
 0072           ;  PORTC=0xff;
 0072 85BB              out 0x15,R24
 0074                   .dbline -2
 0074           L15:
 0074                   .dbline 0 ; func end
 0074 0895              ret
 0076                   .dbend
 0076                   .dbfunc e Write_EEPROM _Write_EEPROM fV
 0076           ;        Address -> R22,R23
 0076           ;           Data -> R20
                        .even
 0076           _Write_EEPROM::
 0076 0E940000          xcall push_gset2
 007A B901              movw R22,R18
 007C 402F              mov R20,R16
 007E                   .dbline -1
 007E                   .dbline 47
 007E           ; }
 007E           ; /**********************************************************************
 007E           ;                 写一字节到EEPROM数据  
 007E           ;               参数：Date：写入的数据；  
 007E           ;                   Address:写入的地址                                          
 007E           ; **********************************************************************/
 007E           ; void Write_EEPROM(uchar Data,uint Address)
 007E           ; {if(EECR&0x20) DelayMs(4);//判断写使能是否为0
 007E                   .dbline 47
 007E E59B              sbis 0x1c,5
 0080 03C0              rjmp L17
 0082                   .dbline 47
 0082 04E0              ldi R16,4
 0084 10E0              ldi R17,0
 0086 BCDF              xcall _DelayMs
 0088           L17:
 0088                   .dbline 48
 0088           ;  EEARH=Address>>8;        //送高地址
 0088 1B01              movw R2,R22
 008A 232C              mov R2,R3
 008C 3324              clr R3
 008E 2FBA              out 0x1f,R2
 0090                   .dbline 49
 0090           ;  EEARL=Address&0x00ff;    //送低地址
 0090 CB01              movw R24,R22
 0092 9070              andi R25,0
 0094 8EBB              out 0x1e,R24
 0096                   .dbline 50
 0096           ;  EEDR=Data;               //送数据
 0096 4DBB              out 0x1d,R20
 0098                   .dbline 51
 0098           ;  EECR=EECR|0x04;          //主写使能置位
 0098 E29A              sbi 0x1c,2
 009A                   .dbline 52
 009A           ;  EECR=EECR|0x02;          //写使能置位
 009A E19A              sbi 0x1c,1
 009C                   .dbline 53
 009C           ;  DelayMs(4);              //延时（写入时间约在2.5ms~4ms）
 009C 04E0              ldi R16,4
 009E 10E0              ldi R17,0
 00A0 AFDF              xcall _DelayMs
 00A2                   .dbline -2
 00A2           L16:
 00A2 0E940000          xcall pop_gset2
 00A6                   .dbline 0 ; func end
 00A6 0895              ret
 00A8                   .dbsym r Address 22 i
 00A8                   .dbsym r Data 20 c
 00A8                   .dbend
 00A8                   .dbfunc e Read_EEPROM _Read_EEPROM fc
 00A8           ;              i -> R20
 00A8           ;        Address -> R20,R21
                        .even
 00A8           _Read_EEPROM::
 00A8 0E940000          xcall push_gset1
 00AC A801              movw R20,R16
 00AE                   .dbline -1
 00AE                   .dbline 60
 00AE           ; }
 00AE           ; /**********************************************************************
 00AE           ;                       读一字节到EEPROM数据    
 00AE           ;               参数:Address：写入的地址；返回值：读取的内容                                                            
 00AE           ; **********************************************************************/
 00AE           ; uchar Read_EEPROM(uint Address)
 00AE           ; {uchar i;
 00AE                   .dbline 61
 00AE           ;  if(EECR&0x01) DelayMs(4);//判断读使能是否为0
 00AE E09B              sbis 0x1c,0
 00B0 03C0              rjmp L20
 00B2                   .dbline 61
 00B2 04E0              ldi R16,4
 00B4 10E0              ldi R17,0
 00B6 A4DF              xcall _DelayMs
 00B8           L20:
 00B8                   .dbline 62
 00B8           ;  EEARH=Address>>8;        //送高地址
 00B8 1A01              movw R2,R20
 00BA 232C              mov R2,R3
 00BC 3324              clr R3
 00BE 2FBA              out 0x1f,R2
 00C0                   .dbline 63
 00C0           ;  EEARL=Address&0x00ff;    //送低地址
 00C0 CA01              movw R24,R20
 00C2 9070              andi R25,0
 00C4 8EBB              out 0x1e,R24
 00C6                   .dbline 64
 00C6           ;  EECR=EECR|0x01;          //读使能置位
 00C6 E09A              sbi 0x1c,0
 00C8                   .dbline 65
 00C8           ;  DelayMs(5);              //延时
 00C8 05E0              ldi R16,5
 00CA 10E0              ldi R17,0
 00CC 99DF              xcall _DelayMs
 00CE                   .dbline 66
 00CE           ;  i=EEDR;                  //读数据
 00CE 4DB3              in R20,0x1d
 00D0                   .dbline 67
 00D0           ;  return(i);
 00D0 042F              mov R16,R20
 00D2                   .dbline -2
 00D2           L19:
 00D2 0E940000          xcall pop_gset1
 00D6                   .dbline 0 ; func end
 00D6 0895              ret
 00D8                   .dbsym r i 20 c
 00D8                   .dbsym r Address 20 i
 00D8                   .dbend
 00D8                   .dbfunc e main _main fV
 00D8           ;              i -> R20
                        .even
 00D8           _main::
 00D8                   .dbline -1
 00D8                   .dbline 73
 00D8           ; }
 00D8           ; /**********************************************************************
 00D8           ;                                                               主函数                                                                  
 00D8           ; **********************************************************************/
 00D8           ; void main(void)
 00D8           ; {uchar i;
 00D8                   .dbline 74
 00D8           ;  Init_IO();                    //初始化I/O口
 00D8 C8DF              xcall _Init_IO
 00DA                   .dbline 75
 00DA           ;  PORTA=0x00;                   //点亮以测试所有的数码管
 00DA 2224              clr R2
 00DC 2BBA              out 0x1b,R2
 00DE                   .dbline 76
 00DE           ;  PORTC=0xff;   
 00DE 8FEF              ldi R24,255
 00E0 85BB              out 0x15,R24
 00E2                   .dbline 77
 00E2           ;  DelayMs(300);                 //延时
 00E2 0CE2              ldi R16,300
 00E4 11E0              ldi R17,1
 00E6 8CDF              xcall _DelayMs
 00E8                   .dbline 78
 00E8           ;  PORTC=0xff;                   //熄灭所有的数码管
 00E8 8FEF              ldi R24,255
 00EA 85BB              out 0x15,R24
 00EC                   .dbline 79
 00EC           ;  for(i=0;i<4;i++)              //写四位数据：0x00、0x04、0x08、0x0c
 00EC 4427              clr R20
 00EE 07C0              xjmp L26
 00F0           L23:
 00F0                   .dbline 80
 00F0 242F              mov R18,R20
 00F2 3327              clr R19
 00F4 84E0              ldi R24,4
 00F6 849F              mul R24,R20
 00F8 002D              mov R16,R0
 00FA BDDF              xcall _Write_EEPROM
 00FC           L24:
 00FC                   .dbline 79
 00FC 4395              inc R20
 00FE           L26:
 00FE                   .dbline 79
 00FE 4430              cpi R20,4
 0100 B8F3              brlo L23
 0102                   .dbline 81
 0102           ;     Write_EEPROM(4*i,i);       //写四位数据：0x00、0x04、0x08、0x0c
 0102           ;  for(i=0;i<4;i++)
 0102 4427              clr R20
 0104 0BC0              xjmp L30
 0106           L27:
 0106                   .dbline 82
 0106 042F              mov R16,R20
 0108 1127              clr R17
 010A CEDF              xcall _Read_EEPROM
 010C 80E0              ldi R24,<_Read_Data
 010E 90E0              ldi R25,>_Read_Data
 0110 E42F              mov R30,R20
 0112 FF27              clr R31
 0114 E80F              add R30,R24
 0116 F91F              adc R31,R25
 0118 0083              std z+0,R16
 011A           L28:
 011A                   .dbline 81
 011A 4395              inc R20
 011C           L30:
 011C                   .dbline 81
 011C 4430              cpi R20,4
 011E 98F3              brlo L27
 0120 03C0              xjmp L32
 0122           L31:
 0122                   .dbline 84
 0122 00E0              ldi R16,<_Read_Data
 0124 10E0              ldi R17,>_Read_Data
 0126 7FDF              xcall _Display
 0128           L32:
 0128                   .dbline 83
 0128 FCCF              xjmp L31
 012A           X2:
 012A                   .dbline -2
 012A           L22:
 012A                   .dbline 0 ; func end
 012A 0895              ret
 012C                   .dbsym r i 20 c
 012C                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile D:\Proteus\ATMEGA16\Eeprom的c语言编程\icc\chengxu.c
 0000           _Read_Data::
 0000                   .blkb 4
 0004                   .dbsym e Read_Data _Read_Data A[4:4]c
