C51 COMPILER V7.06   USBAPPLICATION                                                        03/21/2011 11:03:29 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE USBAPPLICATION
OBJECT MODULE PLACED IN USBApplication.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE USBApplication.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          /*
   2           ----------------------------------------------------
   3           *作    者：温子祺
   4           ----------------------------------------------------
   5           */
   6          #include "stc.h"
   7          #include "global.h"
   8          #include "USBDefine.h"
   9          #include "USBInterface.h"
  10          #include "USBProtocol.h"
  11          #include "USBApplication.h"
  12          
  13          
  14          /****************************************************************************************************
  15          *
  16          *                                      变量区
  17          * 
  18          *****************************************************************************************************/
  19          IDATA UINT8 USBMainBuf[EP2_PACKET_SIZE]={0};
  20          
  21          //定义USB 标准设备请求 结构体
  22          static CONST FUNCTION_ARRAY StandardDeviceRequest[16]={
  23                  {USBPcGetStatus,       "[00H]USB 标准设备请求:获取状态\r\n  "},
  24                  {USBPcClearFeature,    "[01H]USB 标准设备请求:清除特性\r\n  "},
  25                  {NULL,                 "NULL                                "},
  26                  {USBPcSetFeature,      "[03H]USB 标准设备请求:设置特性\r\n  "},
  27                  {NULL,                 "NULL                                "},
  28                  {USBPcSetAddress,      "[05H]USB 标准设备请求:设置地址\r\n  "},
  29                  {USBPcGetDescriptor,   "[06H]USB 标准设备请求:获取描述符\r\n"},
  30                  {USBPcSetDescriptor,   "[07H]USB 标准设备请求:设置描述符\r\n"},
  31                  {USBPcGetConfiguration,"[08H]USB 标准设备请求:获取配置\r\n  "},
  32                  {USBPcSetConfiguration,"[09H]USB 标准设备请求:设置配置\r\n  "},
  33                  {USBPcGetInterface,    "[0AH]USB 标准设备请求:获取接口\r\n  "},
  34                  {USBPcSetInterface,    "[0BH]USB 标准设备请求:设置接口\r\n  "},
  35                  {NULL,                 "NULL                                "},
  36                  {NULL,                 "NULL                                "},
  37                  {NULL,                 "NULL                                "},
  38                  {NULL,                 "NULL                                "}
  39          };
  40          //定义USB HID类请求 结构体
  41          static CONST FUNCTION_ARRAY HidClassRequest[16]={
  42                  {USBPcGetReport,           "[00H]USB HID类请求:获取报告\r\n     "},             
  43                  {USBPcGetIdle,         "[01H]USB HID类请求:获取空闲状态\r\n "},                         
  44                  {USBPcGetProtocol,     "[02H]USB HID类请求:获取协议\r\n     "},                 
  45                  {NULL,                 "NULL                                "},
  46                  {NULL,                 "NULL                                "},
  47                  {NULL,                 "NULL                                "},
  48                  {NULL,                 "NULL                                "},
  49                  {NULL,                 "NULL                                "},
  50                  {NULL,                 "NULL                                "},
  51                  {USBPcSetReport,           "[08H]USB HID类请求:设置报告\r\n     "},                     
  52                  {USBPcSetIdle,         "[09H]USB HID类请求:设置空闲状态\r\n "},                         
  53                  {USBPcSetProtocol,     "[0AH]USB HID类请求:设置协议\r\n     "},                 
  54                  {NULL,                 "NULL                                "},
  55                  {NULL,                 "NULL                                "},
C51 COMPILER V7.06   USBAPPLICATION                                                        03/21/2011 11:03:29 PAGE 2   

  56                  {NULL,                 "NULL                                "},
  57                  {NULL,                 "NULL                                "}
  58          };      
  59          /****************************************************************************************************
  60          *
  61          *                                      函数区
  62          * 
  63          *****************************************************************************************************/
  64          /*****************************************************************
  65          * 函数名称      : USBApDisposeData
  66          * 输       入   : 无
  67          * 输       出   : 无
  68          * 功能描述      : USB 处理数据
  69          ******************************************************************/
  70          void USBApDisposeData(void)
  71          {
  72   1              UINT8 ucintStatus;
  73   1              UINT8 ucrecvLen;
  74   1              
  75   1              ENTER_CRITICAL();
  76   1      
  77   1              SYSPostCurMsg(SYS_IDLE);
  78   1      
  79   1              USBCiWriteSingleCmd(CMD_GET_STATUS);                                                            //获取中断状态并取消中断请求 
  80   1              ucintStatus =USBCiReadSingleData();                                                             //获取中断状态,清中断标志,对应于INT0中断 
  81   1              
  82   1              switch(ucintStatus)                                                                                                     //分析中断状态
  83   1              {  
  84   2                      case USB_INT_EP2_OUT: 
  85   2                               {
  86   3                              //这里一定要读取,否则会导致HID系列USB卡死       
  87   3                                        ucrecvLen=USBCiReadPortData(USBMainBuf);
  88   3      
  89   3                                        USBCiEP2Send(USBMainBuf,64);
  90   3      
  91   3                               } 
  92   2                               break;
  93   2      
  94   2                      case USB_INT_EP2_IN:                                                                                //批量端点上传成功,未处理
  95   2                               {
  96   3                                      USBCiWriteSingleCmd (CMD_UNLOCK_USB);                                   //释放缓冲区
  97   3                               }
  98   2                               break;
  99   2      
 100   2                      case USB_INT_EP0_SETUP:                                                 //控制端点建立成功，当收到命令的时候，执行该中
             -断
 101   2                               {
 102   3      
 103   3                                ucrecvLen=USBCiReadPortData((UINT8 *)&USBCtrlPacket.r);   //获取建立请求包的内容
 104   3                                
 105   3                                //USB为小端模式 51为大端模式 需要切换
 106   3                                USBCtrlPacket.r.musRequestValue =SWAP16(USBCtrlPacket.r.musRequestValue);
 107   3                                USBCtrlPacket.r.musRequestIndex =SWAP16(USBCtrlPacket.r.musRequestIndex);
 108   3                                USBCtrlPacket.r.musRequestLength=SWAP16(USBCtrlPacket.r.musRequestLength);
 109   3              
 110   3                                USBCtrlPacket.mpucTxd = NULL;       //重新定位发送指针,防止野指针
 111   3      
 112   3                    USBCtrlPacket.musTxLength=USBCtrlPacket.r.musRequestLength;
 113   3                                USBCtrlPacket.musTxCount =0;
 114   3                      
 115   3                               /*********类请求命令***********/
 116   3                                if(USBCtrlPacket.r.mucRequestType &0x20)              //类请求，未处理
C51 COMPILER V7.06   USBAPPLICATION                                                        03/21/2011 11:03:29 PAGE 3   

 117   3                                {          
 118   4                                      USBMSG(HidClassRequest[USBCtrlPacket.r.mucRequestType & 0x1F].s);       
 119   4                                      (*HidClassRequest[USBCtrlPacket.r.mucRequestType & 0x1F].fun)();
 120   4                                }
 121   3                               /*  标准的请求命令*/
 122   3                                if(!(USBCtrlPacket.r.mucRequestType&0x60))                                                                            
 123   3                                {                                             
 124   4                      //检查当前标准请求是否获取描述符
 125   4                      USBFlags.bits.mbDescriptor=DEF_USB_GET_DESCR   == USBCtrlPacket.r.mucRequestCode?TRUE:FALS
             -E;
 126   4                      //检查当前标准请求是否获取地址
 127   4                                  USBFlags.bits.mbAdrress   =DEF_USB_SET_ADDRESS == USBCtrlPacket.r.mucRequestCode?TRUE:FALSE;
 128   4      
 129   4                                      USBMSG(StandardDeviceRequest[USBCtrlPacket.r.mucRequestCode].s);        
 130   4                                      (*StandardDeviceRequest[USBCtrlPacket.r.mucRequestCode].fun)();
 131   4                                }
 132   3      
 133   3                                USBCtrlPacketTransmit();        //数据上传
 134   3                              }
 135   2                              break;
 136   2      
 137   2                      case USB_INT_EP0_IN:                                                    //控制端点上传成功      
 138   2                          {
 139   3                                              //当发送完描述符时,会从 USB_INT_EP0_IN 转到 USB_INT_EP0_SETUP的,
 140   3                                              //即发送完当前规定长度的描述符,才会出现USB_INT_EP0_SETUP中断,
 141   3                                              //否则一直为USB_INT_EP0_IN
 142   3                      
 143   3                                      if(USBFlags.bits.mbDescriptor)          //描述符上传
 144   3                                      {                                                               
 145   4                                              USBDesriptorCopy();                          //复制描述符
 146   4                                              USBCtrlPacketTransmit();                                                                                                                        
 147   4                                      }
 148   3                                      //设置USB地址
 149   3                                      else if(USBFlags.bits.mbAdrress)   //设置地址
 150   3                                      {
 151   4                                              USBCiWriteSingleCmd (CMD_SET_USB_ADDR);
 152   4                                              USBCiWriteSingleData(USBPcGetAddress());                                //设置USB地址,设置下次事务的USB地址
 153   4                                      }
 154   3                                      else
 155   3                                      {
 156   4                                              USBPcHold();  //发送空包,保持状态 
 157   4                                      }
 158   3                                      //释放缓冲区
 159   3                                      USBCiWriteSingleCmd(CMD_UNLOCK_USB);                            //释放缓冲区
 160   3                              }
 161   2                              break;
 162   2      
 163   2                      case USB_INT_EP0_OUT:                                                                           //控制端点下传成功
 164   2                               {
 165   3                                      //这里一定要读取,否则会导致HID系列USB卡死
 166   3                                      ucrecvLen=USBCiReadPortData(USBCtrlPacket.mucBuf);  
 167   3                               }
 168   2                               break;
 169   2      
 170   2                      default:
 171   2                                {
 172   3                                      //这里一定要有,需要总线复位,否则USB卡住不动
 173   3                                      if(ucintStatus&USB_INT_BUS_RESET1)                                //总线复位
 174   3                                      {                       
 175   4                          BufClr((UINT8 *)&USBCtrlPacket,sizeof(USBCtrlPacket));      //清空数据缓冲区                                
 176   4                                              USBFlags.musFlags=0;                          //标志位集合全部清零    
 177   4                                              USBFlags.bits.mbReset=TRUE;                   //标志位集合中的复位标志位置1
C51 COMPILER V7.06   USBAPPLICATION                                                        03/21/2011 11:03:29 PAGE 4   

 178   4                                              USBMSG("HID USB 复位\r\n");
 179   4                                      }
 180   3      
 181   3                                      USBCiWriteSingleCmd (CMD_UNLOCK_USB);                           //释放缓冲区
 182   3                               }
 183   2                               break;
 184   2      
 185   2               }
 186   1      
 187   1               EXIT_CRITICAL();       
 188   1      
 189   1      
 190   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    366    ----
   CONSTANT SIZE    =    789    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =     64    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
