C51 COMPILER V7.06   MAIN                                                                  03/16/2011 16:26:07 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Main.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          /*
   2           ----------------------------------------------------
   3           *作    者：温子祺
   4           ----------------------------------------------------
   5           */
   6          #include "stc.h"
   7          
   8          /***************************************************
   9           *          类型定义，方便代码移植
  10           ***************************************************/
  11          typedef unsigned char   UINT8;
  12          typedef unsigned int    UINT16;
  13          typedef unsigned long   UINT32;  
  14          typedef char               INT8;
  15          typedef int                INT16;
  16          typedef long               INT32; 
  17          
  18           
  19          /***************************************************
  20           *          大量宏定义，便于代码移植和阅读
  21           ***************************************************/
  22          #define TIMER0_INITIAL_VALUE 5000 //5Ms定时
  23          
  24          #define SEG_PORT            P0    //数码管占用的I/O口
  25          
  26          #define KEY_PORT            P1    //按键占用的I/O口
  27          #define KEY_MASK            0x0F //按键掩码
  28          
  29          #define KEY_SEARCH_STATUS    0 //查询按键状态
  30          #define KEY_ACK_STATUS       1 //确认按键状态
  31          #define KEY_REALEASE_STATUS 2 //释放按键状态
  32          
  33          #define KEY1                1     //按键1键值
  34          #define KEY2                2     //按键2键值
  35          #define KEY3                3     //按键3键值
  36          #define KEY4                4     //按键4键值
  37          
  38          #define HIGH                1     
  39          #define LOW                 0
  40          #define ON                  1
  41          #define OFF                 0
  42          
  43          
  44          #define LS164_DATA(x)      {if((x))P0_4=1;else P0_4=0;}         
  45          #define LS164_CLK(x)       {if((x))P0_5=1;else P0_5=0;} 
  46          
  47          
  48          UINT8  Timer0IRQEvent=0;   //T/C0中断事件
  49          UINT8  Time1SecEvent=0;    //1秒定时事件
  50          UINT8  TimeCount=0;         //T/C0计数器，用于计数产生1秒定时事件
  51          UINT8  SegCurPosMark=0;    //被选中的数码管
  52          UINT16 CounterValue=0;     //计数器
  53          
  54                UINT8  SegCurSel  = 0 ; //当前选中的数码管
  55                UINT8  SegBuf[4]  ={0}; //数码管显示缓冲区
C51 COMPILER V7.06   MAIN                                                                  03/16/2011 16:26:07 PAGE 2   

  56          //共阳极数码管字型码，并且保存在程序存储区，节省RAM资源
  57          code UINT8  SegCode[10]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
  58          //共阳极数码管片选数组，并且保存在程序存储区，节省RAM资源
  59          code UINT8  SegSelTbl[4]={0x07,0x0b,0x0d,0x0e};
  60          
  61          UINT8  bSetTime=0;  //标志位：是否要设置计数值
  62          
  63          /****************************************************
  64          * 函数名称: LS164Send
  65          * 输    入: byte 要发送的字节
  66          * 输    出: 无
  67          * 功能描述: 74LS164发送数据函数
  68          *****************************************************/
  69          void LS164Send(UINT8 byte) 
  70          {
  71   1         UINT8 j;
  72   1      
  73   1         for(j=0;j<=7;j++)
  74   1         {
  75   2            if(byte&(1<<(7-j)))
  76   2            {
  77   3                   LS164_DATA(HIGH);
  78   3               }
  79   2               else
  80   2               {
  81   3                  LS164_DATA(LOW);
  82   3               }
  83   2      
  84   2           LS164_CLK(LOW); 
  85   2           LS164_CLK(HIGH);
  86   2         }
  87   1      }
  88          /****************************************************
  89          * 函数名称: SegRefreshDisplayBuf
  90          * 输    入: 无
  91          * 输    出: 无
  92          * 功能描述: 刷新显示缓存
  93          *****************************************************/
  94          void SegRefreshDisplayBuf(void)  
  95          {
  96   1                      
  97   1              SegBuf[0] =CounterValue%10;       //个位
  98   1              SegBuf[1] =CounterValue/10%10;   //十位 
  99   1              SegBuf[2] =CounterValue/100%10;  //百位
 100   1              SegBuf[3] =CounterValue/1000%10; //千位
 101   1      
 102   1      }
 103          /****************************************************
 104          * 函数名称: SegDisplay
 105          * 输    入: 无
 106          * 输    出: 无
 107          * 功能描述: 显示数据
 108          *****************************************************/
 109          void SegDisplay(void)
 110          {
 111   1            
 112   1         UINT8  t;
 113   1             
 114   1         SEG_PORT = 0x0F;  //熄灭所有数码管
 115   1        
 116   1         if(bSetTime)       //检测是否设置计数值
 117   1         {
C51 COMPILER V7.06   MAIN                                                                  03/16/2011 16:26:07 PAGE 3   

 118   2                 if(SegCurSel==SegCurPosMark)
 119   2              {
 120   3                               
 121   3                   t = SegCode[SegBuf[SegCurSel]]&0x7F; //加上小数点标识   
 122   3                              
 123   3              }
 124   2                  else
 125   2              {
 126   3                               t = SegCode[SegBuf[SegCurSel]]; //正常显示当前数值
 127   3              }               
 128   2         }
 129   1         else
 130   1         {
 131   2                       t = SegCode[SegBuf[SegCurSel]]; //正常显示当前数值
 132   2         }
 133   1              
 134   1         
 135   1         LS164Send(t); 
 136   1      
 137   1         SEG_PORT = SegSelTbl[SegCurSel];     //点亮当前要显示的数码管        
 138   1                      
 139   1         if(++SegCurSel>=4) 
 140   1         {                            
 141   2                  SegCurSel=0;
 142   2         }     
 143   1      }
 144          /****************************************************
 145          * 函数名称: TimerInit
 146          * 输    入: 无
 147          * 输    出: 无
 148          * 功能描述: 定时器初始化
 149          *****************************************************/
 150          void TimerInit(void)
 151          { 
 152   1         TH0 = (65536-TIMER0_INITIAL_VALUE)/256;
 153   1         TL0 = (65536-TIMER0_INITIAL_VALUE)%256; //定时5MS
 154   1         TMOD = 0x01; 
 155   1        
 156   1      }
 157          /****************************************************
 158          * 函数名称: Timer0Start
 159          * 输    入: 无
 160          * 输    出: 无
 161          * 功能描述: T/C0启用
 162          *****************************************************/
 163          void Timer0Start(void)
 164          {
 165   1           TR0 = 1;            
 166   1               ET0 = 1;       
 167   1      }
 168          /****************************************************
 169          * 函数名称: Timer0Stop
 170          * 输    入: 无
 171          * 输    出: 无
 172          * 功能描述: T/C0停止
 173          *****************************************************/
 174          void Timer0Stop(void)
 175          {
 176   1           TR0 = 0;            
 177   1           ET0 = 0;   
 178   1      }
 179          /****************************************************
C51 COMPILER V7.06   MAIN                                                                  03/16/2011 16:26:07 PAGE 4   

 180          * 函数名称: PortInit
 181          * 输    入: 无
 182          * 输    出: 无
 183          * 功能描述: 单片机I/O口初始化
 184          *****************************************************/
 185          void PortInit(void)
 186          {
 187   1               P0=P1=P2=P3=0xFF;
 188   1      }
 189          /****************************************************
 190          * 函数名称: KeyRead
 191          * 输    入: 无
 192          * 输    出: 当前按下的按键
 193          * 功能描述: 读取按键值
 194          *****************************************************/
 195          UINT8 KeyRead(void)
 196          {
 197   1      //KeyStatus:静态变量，保存按键状态
 198   1      //KeyCurPress:静态变量，保存当前按键的键值
 199   1      static UINT8 KeyStatus=KEY_SEARCH_STATUS,KeyCurPress=0;
 200   1                 UINT8 KeyValue;
 201   1                 UINT8 i=0;
 202   1              
 203   1              KeyValue=(~KEY_PORT)&KEY_MASK;//检测哪一个按键按下
 204   1        
 205   1          switch(KeyStatus)
 206   1          {
 207   2                      case KEY_SEARCH_STATUS:   //按键查询状态
 208   2              {
 209   3                   if(KeyValue)
 210   3                   {
 211   4                                       KeyStatus=KEY_ACK_STATUS;//按键下一个状态为确认状态
 212   4                   }
 213   3               
 214   3                   return 0;
 215   3            
 216   3              }
 217   2              break;
 218   2      
 219   2                      case KEY_ACK_STATUS:    //按键确认状态
 220   2              {
 221   3                   if(!KeyValue)         //没有按键按下
 222   3                   {
 223   4                      KeyStatus=KEY_SEARCH_STATUS; ;//按键下一个状态为查询状态
 224   4      
 225   4                   }
 226   3                   else
 227   3                   {
 228   4                               for(i=0;i<4;i++)         //搜索哪个按键按下
 229   4                     {
 230   5                                      if(KeyValue & (1<<i))
 231   5                         {
 232   6                                         KeyCurPress=KEY1+i;
 233   6                            break;
 234   6                         }
 235   5                       
 236   5                     }
 237   4      
 238   4                     KeyStatus=KEY_REALEASE_STATUS; //按键下一个状态为释放状态
 239   4                   }
 240   3      
 241   3                   return 0;
C51 COMPILER V7.06   MAIN                                                                  03/16/2011 16:26:07 PAGE 5   

 242   3              }
 243   2              break;
 244   2      
 245   2                  case KEY_REALEASE_STATUS:      //按键释放状态
 246   2              {
 247   3                          if(!KeyValue)      //按键释放
 248   3                   {
 249   4                                      KeyStatus=KEY_SEARCH_STATUS; //按键下一个状态为释放状态
 250   4      
 251   4                         return KeyCurPress;//返回当前按键
 252   4                   }
 253   3                  
 254   3                   return 0;
 255   3                  
 256   3              }
 257   2      
 258   2              default:break;
 259   2          }   
 260   1      }
 261          /****************************************************
 262          * 函数名称: main
 263          * 输    入: 无
 264          * 输    出: 无
 265          * 功能描述: 函数主体
 266          *****************************************************/
 267          void main(void)
 268          {    
 269   1      
 270   1      PortInit();
 271   1      TimerInit();
 272   1          Timer0Start();
 273   1          SegRefreshDisplayBuf();
 274   1          EA=1;
 275   1      
 276   1              while(1)
 277   1          {
 278   2      
 279   2              SegRefreshDisplayBuf(); //刷新显示缓冲区
 280   2      
 281   2                      if(Timer0IRQEvent)      //定时器中断事件
 282   2                      { 
 283   3                              Timer0IRQEvent=0;
 284   3      
 285   3                         switch(KeyRead())    //扫描按键，获取键值
 286   3                  {
 287   4                                case KEY1:         //按键1
 288   4                      {
 289   5                                        bSetTime=~bSetTime;//标志位：是否设置计数值
 290   5                           SegCurPosMark=0;
 291   5                      }
 292   4                      break;
 293   4      
 294   4                      case KEY2:        //按键2
 295   4                      {
 296   5                            if(++SegCurPosMark>=4) //选择哪一个位要修改
 297   5                            {
 298   6                                 SegCurPosMark=0;
 299   6                            }
 300   5                      }
 301   4                      break;
 302   4      
 303   4                      case KEY3:       //按键3
C51 COMPILER V7.06   MAIN                                                                  03/16/2011 16:26:07 PAGE 6   

 304   4                      {
 305   5                            if(!bSetTime)break; //不是设置计数模式，跳出switch
 306   5      
 307   5                            //根据被选择的位进行自加操作
 308   5                            if(CounterValue>=9999)CounterValue=0;
 309   5      
 310   5                            if      (SegCurPosMark==0)CounterValue+=1;
 311   5                            else if(SegCurPosMark==1)CounterValue+=10;
 312   5                            else if(SegCurPosMark==2)CounterValue+=100;
 313   5                            else                         CounterValue+=1000;
 314   5      
 315   5                            
 316   5      
 317   5                      }
 318   4                      break;
 319   4      
 320   4                      case KEY4:                 //按键4
 321   4                      {
 322   5                            if(!bSetTime)break; //不是设置计数模式，跳出switch
 323   5      
 324   5      //根据被选择的位进行自减操作
 325   5                            if(CounterValue<=0)CounterValue=9999;
 326   5      
 327   5                            if      (SegCurPosMark==0)CounterValue-=1;
 328   5                            else if(SegCurPosMark==1)CounterValue-=10;
 329   5                            else if(SegCurPosMark==2)CounterValue-=100;
 330   5                            else                         CounterValue-=1000;
 331   5      
 332   5                            
 333   5                      }
 334   4                      break;
 335   4      
 336   4                      default:break;
 337   4                  }
 338   3                  
 339   3              }
 340   2                  else if(Time1SecEvent)//一秒定时事件产生
 341   2                  {
 342   3                          Time1SecEvent=0;
 343   3                      
 344   3                          if(!bSetTime)      //不是设置计数值模式
 345   3                          {
 346   4                             if(++CounterValue>=9999)//计数值自加1，同时计数值不能大于9999
 347   4                             {
 348   5                                      CounterValue=0;
 349   5                             }                
 350   4                          }
 351   3                  }   
 352   2          }
 353   1      
 354   1      }
 355          /****************************************************
 356          ** 函数名称: Timer0IRQ
 357          ** 输    入: 无
 358          ** 输    出: 无
 359          ** 功能描述: T/C0中断服务函数
 360          *****************************************************/
 361          void Timer0IRQ(void) interrupt 1 
 362          {
 363   1              TH0 = (65536-TIMER0_INITIAL_VALUE)/256;
 364   1              TL0 = (65536-TIMER0_INITIAL_VALUE)%256; //重载初值
 365   1      
C51 COMPILER V7.06   MAIN                                                                  03/16/2011 16:26:07 PAGE 7   

 366   1              Timer0IRQEvent=1;
 367   1          
 368   1          SegDisplay();         //数码管显示
 369   1       
 370   1          if(++TimeCount>=200)
 371   1          {
 372   2                  TimeCount=0;
 373   2               Time1SecEvent=1;
 374   2          }
 375   1      
 376   1      }
 377          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    641    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
